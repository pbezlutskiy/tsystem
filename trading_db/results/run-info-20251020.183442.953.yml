---
queries:
 -
  pack: codeql/python-queries#0
  relativeQueryPath: AlertSuppression.ql
  relativeBqrsPath: codeql/python-queries/AlertSuppression.bqrs
  metadata:
    name: Alert suppression
    description: Generates information about alert suppressions.
    kind: alert-suppression
    id: py/alert-suppression
 -
  pack: codeql/python-queries#0
  relativeQueryPath: analysis/Definitions.ql
  relativeBqrsPath: codeql/python-queries/analysis/Definitions.bqrs
  metadata:
    name: Definitions
    description: Jump to definition helper query.
    kind: definitions
    id: py/jump-to-definition
 -
  pack: codeql/python-queries#0
  relativeQueryPath: Filters/ClassifyFiles.ql
  relativeBqrsPath: codeql/python-queries/Filters/ClassifyFiles.bqrs
  metadata:
    name: Classify files
    description: |-
      This query produces a list of all files in a snapshot
                    that are classified as generated code or test code.
    kind: file-classifier
    id: py/file-classifier
 -
  pack: codeql/python-queries#0
  relativeQueryPath: Lexical/FCommentedOutCode.ql
  relativeBqrsPath: codeql/python-queries/Lexical/FCommentedOutCode.bqrs
  metadata:
    name: Lines of commented-out code in files
    description: The number of lines of commented out code per file
    kind: treemap
    treemap.warnOn: highValues
    metricType: file
    tags: maintainability
    id: py/lines-of-commented-out-code-in-files
  queryHelp: |
    # Lines of commented-out code in files
    This metric counts the number of lines of commented-out code in each file. Large amounts of commented-out code often indicate poorly maintained code.


    ## Example
    In the following example, a `print` statement, originally used for debugging, is left in the code, but commented out. It should be removed altogether.


    ```python
    def area(r):
        #if DEBUG:
        #   print("Computing area of %r" % r)
        return r.length * r.width

    ```

    ## References
    * Mark Needham: [The danger of commenting out code](http://www.markhneedham.com/blog/2009/01/17/the-danger-of-commenting-out-code/).
    * Los Techies: [Commented Code == Technical Debt](http://lostechies.com/rodpaddock/2010/12/29/commented-code-technical-debt).
    * High Integrity C++ Coding Standard: [2.3.2 Do not comment out code](http://www.codingstandard.com/rule/2-3-2-do-not-comment-out-code/).
 -
  pack: codeql/python-queries#0
  relativeQueryPath: Metrics/FLinesOfCode.ql
  relativeBqrsPath: codeql/python-queries/Metrics/FLinesOfCode.bqrs
  metadata:
    name: Lines of code in files
    kind: treemap
    description: |-
      Measures the number of lines of code in each file (ignoring lines that
                    contain only docstrings, comments or are blank).
    treemap.warnOn: highValues
    metricType: file
    metricAggregate: avg sum max
    tags: maintainability
    id: py/lines-of-code-in-files
  queryHelp: |
    # Lines of code in files
    This metric measures the number of lines of code in each file. The value excludes docstrings, comments and blank lines.

    Organizing source into very large files is not recommended because:

    * it can be difficult to understand and maintain the code, even with good support from development tools
    * it increases the risk that multiple developers will work on the same file at once, and increases the incidence of merge conflicts
    * it may be a symptom of weak code organization, where many different features are handled by functions in a single file.

    ## Recommendation
    The solution depends on the underlying cause:

    * if individual classes or functions are too large then they should be refactored into smaller modules
    * if the class contains many classes or functions, they should be moved to their own modules (sometimes in a subsidiary module, where appropriate)
    * if the file has been automatically generated by a tool, then it should be left alone.

    ## References
    * M. Fowler, *Refactoring*. Addison-Wesley, 1999.
    * Wikipedia: [Code refactoring](https://en.wikipedia.org/wiki/Code_refactoring).
 -
  pack: codeql/python-queries#0
  relativeQueryPath: Metrics/FLinesOfComments.ql
  relativeBqrsPath: codeql/python-queries/Metrics/FLinesOfComments.bqrs
  metadata:
    name: Lines of comments in files
    kind: treemap
    description: |-
      Measures the number of lines of comments in each file (including docstrings,
                    and ignoring lines that contain only code or are blank).
    treemap.warnOn: lowValues
    metricType: file
    metricAggregate: avg sum max
    id: py/lines-of-comments-in-files
  queryHelp: |
    # Lines of comments in files
    This metric measures the number of comment lines per file. A low number of comments may indicate files that are difficult to understand due to poor documentation.


    ## Recommendation
    Consider if the file needs more documentation. Most files should have at least a comment explaining their purpose.


    ## References
    * Jeff Atwood. [Avoiding Undocumentation](http://www.codinghorror.com/blog/2005/11/avoiding-undocumentation.html). 2005.
    * Steve McConnell. *Code Complete*. 2nd Edition. Microsoft Press. 2004.
 -
  pack: codeql/python-queries#0
  relativeQueryPath: Metrics/FNumberOfTests.ql
  relativeBqrsPath: codeql/python-queries/Metrics/FNumberOfTests.bqrs
  metadata:
    name: Number of tests
    description: The number of test methods defined in a module
    kind: treemap
    treemap.warnOn: lowValues
    metricType: file
    metricAggregate: avg sum max
    id: py/tests-in-files
  queryHelp: |
    # Number of tests
    This metric measures the number of tests below this location in the tree. At a file level, this would just be the number of tests in the file.

    A function or method is considered to be a "test" if one of the major testing frameworks would invoke it as part of a test run. Recognized frameworks include unittest, pytest, doctest and nose.

    In general, having many test cases is a good thing rather than a bad thing. However, at the file level, tests should typically be grouped by the functionality they relate to, which makes a file with an exceptionally high number of tests a strong candidate for splitting up. At a higher level, this metric makes it possible to compare the number of tests in different components, potentially flagging functionality that is comparatively under-tested.


    ## Recommendation
    Since it is typically not a problem to have too many tests, this metric is usually included for the purposes of collecting information, rather than finding problematic areas in the code. With that in mind, it is usually a good idea to avoid an excessive number of tests in a single file, and to maintain a broadly comparable level of testing across components.

    When assessing the thoroughness of a code base's test suite, the number of tests provides only part of the story. Test coverage statistics allow a more detailed examination of which parts of the code deserve improvements in this area.


    ## References
    * Python Standard Library: [unitest](https://docs.python.org/library/unittest.html).
    * Python Standard Library: [doctest](https://docs.python.org/2/library/doctest.html).
    * [http://pytest.org](http://pytest.org/latest/).
    * Read the docs: [http://nose.readthedocs.org/en/latest](http://nose.readthedocs.org/en/latest/).
extensionPacks: []
packs:
  codeql/python-queries#0:
    name: codeql/python-queries
    version: 1.6.7
    isLibrary: false
    isExtensionPack: false
    localPath: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/
    localPackDefinitionFile: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/qlpack.yml
    headSha: aa3000df1310b332ba1c84afec3bacb0aeb4dbbd
    runDataExtensions:
     -
      pack: codeql/python-all#1
      relativePath: ext/default-threat-models-fixup.model.yml
      index: 0
      firstRowId: 0
      rowCount: 1
      locations:
        lineNumbers: A=8
        columnNumbers: A=9
     -
      pack: codeql/python-all#1
      relativePath: semmle/python/frameworks/Asyncpg.model.yml
      index: 0
      firstRowId: 1
      rowCount: 5
      locations:
        lineNumbers: A=7+1+2+1+2
        columnNumbers: A=9*5
     -
      pack: codeql/python-all#1
      relativePath: semmle/python/frameworks/Asyncpg.model.yml
      index: 1
      firstRowId: 6
      rowCount: 6
      locations:
        lineNumbers: A=20+4+1*2+2+1
        columnNumbers: A=9*6
     -
      pack: codeql/python-all#1
      relativePath: semmle/python/frameworks/Stdlib.model.yml
      index: 0
      firstRowId: 12
      rowCount: 12
      locations:
        lineNumbers: A=6+1*4+2+1+2+1*2+4+2
        columnNumbers: A=9*12
     -
      pack: codeql/python-all#1
      relativePath: semmle/python/frameworks/Stdlib.model.yml
      index: 1
      firstRowId: 24
      rowCount: 1
      locations:
        lineNumbers: A=29
        columnNumbers: A=9
     -
      pack: codeql/python-all#1
      relativePath: semmle/python/frameworks/Stdlib.model.yml
      index: 2
      firstRowId: 25
      rowCount: 66
      locations:
        lineNumbers: A=37+1+2+4+2*2+4+2*3+1+2+1+2+1+2+4+2+4+2*2+3+2*2+3+1+2*4+4+1+4+1+4+1*5+2*4+4+1+2*11+3+2+3+4+1+2*2+1+2
        columnNumbers: A=9*66
     -
      pack: codeql/python-all#1
      relativePath: semmle/python/frameworks/builtins.model.yml
      index: 0
      firstRowId: 91
      rowCount: 244
      locations:
        lineNumbers: A=7+3*243
        columnNumbers: A=5*244
     -
      pack: codeql/python-all#1
      relativePath: semmle/python/frameworks/data/internal/subclass-capture/ALL.model.yml
      index: 0
      firstRowId: 335
      rowCount: 58275
      locations:
        lineNumbers: A=7+3*58274
        columnNumbers: A=5*58275
     -
      pack: codeql/threat-models#2
      relativePath: ext/supported-threat-models.model.yml
      index: 0
      firstRowId: 58610
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/threat-models#2
      relativePath: ext/threat-model-grouping.model.yml
      index: 0
      firstRowId: 58611
      rowCount: 15
      locations:
        lineNumbers: A=8+3+1+3+1*5+3+1+5+1*3
        columnNumbers: A=9*15
  codeql/util#3:
    name: codeql/util
    version: 2.0.20
    isLibrary: true
    isExtensionPack: false
    localPath: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/.codeql/libraries/codeql/util/2.0.20/
    localPackDefinitionFile: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/.codeql/libraries/codeql/util/2.0.20/qlpack.yml
    headSha: aa3000df1310b332ba1c84afec3bacb0aeb4dbbd
    runDataExtensions: []
  codeql/threat-models#2:
    name: codeql/threat-models
    version: 1.0.33
    isLibrary: true
    isExtensionPack: false
    localPath: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/.codeql/libraries/codeql/threat-models/1.0.33/
    localPackDefinitionFile: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/.codeql/libraries/codeql/threat-models/1.0.33/qlpack.yml
    headSha: aa3000df1310b332ba1c84afec3bacb0aeb4dbbd
    runDataExtensions: []
  codeql/python-all#1:
    name: codeql/python-all
    version: 4.0.17
    isLibrary: true
    isExtensionPack: false
    localPath: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/.codeql/libraries/codeql/python-all/4.0.17/
    localPackDefinitionFile: file:///C:/Users/bezlp/.codeql/packages/codeql/python-queries/1.6.7/.codeql/libraries/codeql/python-all/4.0.17/qlpack.yml
    headSha: aa3000df1310b332ba1c84afec3bacb0aeb4dbbd
    runDataExtensions: []
