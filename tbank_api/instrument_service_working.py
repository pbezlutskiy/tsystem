import os
from datetime import datetime, timedelta, UTC
from tinkoff.invest import Client, InstrumentStatus, InstrumentIdType
import pandas as pd


class InstrumentServiceWorking:
    """–†–∞–±–æ—á–∏–π —Å–µ—Ä–≤–∏—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã"""
    
    def __init__(self, token=None):
        self.token = token
    
    def _get_client(self):
        return Client(self.token)
    
    def get_popular_russian_shares_working(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"""
        try:
            popular_tickers = ['SBER', 'GAZP', 'LKOH', 'ROSN', 'YNDX', 'VTBR', 'TATN', 
                              'GMKN', 'PLZL', 'NLMK', 'POLY', 'AFKS', 'PHOR', 'MTSS']
            
            all_results = []
            
            for ticker in popular_tickers:
                try:
                    results = self.search_instruments_working(ticker)
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–∫–µ—Ä–æ–º
                    shares = results[results['Ticker'] == ticker]
                    if not shares.empty:
                        all_results.append(shares.iloc[0])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {ticker}: {e}")
                    continue
            
            if all_results:
                return pd.DataFrame(all_results)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                return self._get_fallback_data()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π: {e}")
            return self._get_fallback_data()
    
    def search_instruments_working(self, query):
        """–†–∞–±–æ—á–∏–π –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            with self._get_client() as client:
                result = client.instruments.find_instrument(query=query)
                
                instruments_data = []
                for instrument in result.instruments:
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                        ticker = getattr(instrument, 'ticker', '')
                        name = getattr(instrument, 'name', '')
                        instrument_type = getattr(instrument, 'instrument_type', '')
                        currency = getattr(instrument, 'currency', '')
                        figi = getattr(instrument, 'figi', '')
                        lot = getattr(instrument, 'lot', 1)
                        exchange = getattr(instrument, 'exchange', '')
                        
                        if ticker:  # –¢–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å —Ç–∏–∫–µ—Ä–æ–º
                            instruments_data.append({
                                'Ticker': ticker,
                                'Name': name,
                                'Type': instrument_type,
                                'Currency': currency,
                                'FIGI': figi,
                                'Lot': lot,
                                'Exchange': exchange,
                                'API Trade Available': getattr(instrument, 'api_trade_available_flag', False)
                            })
                    except Exception as e:
                        continue
                
                return pd.DataFrame(instruments_data)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
            return pd.DataFrame()
    
    def get_instrument_by_figi_working(self, figi):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ FIGI"""
        try:
            with self._get_client() as client:
                instrument = client.instruments.get_instrument_by(
                    id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_FIGI,
                    id=figi
                )
                return instrument
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {figi}: {e}")
            return None
    
    def get_trading_schedules_working(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤"""
        try:
            with self._get_client() as client:
                from_date = datetime.now(UTC)
                to_date = from_date + timedelta(days=1)
                
                schedules = client.instruments.trading_schedules(
                    exchange='',
                    from_=from_date,
                    to=to_date
                )
                return schedules
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return None
    
    def _get_fallback_data(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        return pd.DataFrame([
            {'Ticker': 'SBER', 'Name': '–°–±–µ—Ä –ë–∞–Ω–∫', 'Type': 'share', 'Currency': 'rub', 'Lot': 1, 'Exchange': 'MOEX', 'FIGI': 'BBG004730N88'},
            {'Ticker': 'GAZP', 'Name': '–ì–∞–∑–ø—Ä–æ–º', 'Type': 'share', 'Currency': 'rub', 'Lot': 10, 'Exchange': 'MOEX', 'FIGI': 'BBG004730RP0'},
            {'Ticker': 'LKOH', 'Name': '–õ–£–ö–û–ô–õ', 'Type': 'share', 'Currency': 'rub', 'Lot': 1, 'Exchange': 'MOEX', 'FIGI': 'BBG004731032'},
            {'Ticker': 'ROSN', 'Name': '–†–æ—Å–Ω–µ—Ñ—Ç—å', 'Type': 'share', 'Currency': 'rub', 'Lot': 10, 'Exchange': 'MOEX', 'FIGI': 'BBG004731354'},
            {'Ticker': 'YNDX', 'Name': '–Ø–Ω–¥–µ–∫—Å', 'Type': 'share', 'Currency': 'rub', 'Lot': 1, 'Exchange': 'MOEX', 'FIGI': 'BBG006L8G4H1'},
            {'Ticker': 'VTBR', 'Name': '–ë–∞–Ω–∫ –í–¢–ë', 'Type': 'share', 'Currency': 'rub', 'Lot': 10000, 'Exchange': 'MOEX', 'FIGI': 'BBG004730JJ5'},
            {'Ticker': 'TATN', 'Name': '–¢–∞—Ç–Ω–µ—Ñ—Ç—å', 'Type': 'share', 'Currency': 'rub', 'Lot': 1, 'Exchange': 'MOEX', 'FIGI': 'BBG004731489'},
            {'Ticker': 'GMKN', 'Name': '–ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å', 'Type': 'share', 'Currency': 'rub', 'Lot': 1, 'Exchange': 'MOEX', 'FIGI': 'BBG0047315D0'},
            {'Ticker': 'PLZL', 'Name': '–ü–æ–ª—é—Å', 'Type': 'share', 'Currency': 'rub', 'Lot': 1, 'Exchange': 'MOEX', 'FIGI': 'BBG00475J7X5'},
            {'Ticker': 'NLMK', 'Name': '–ù–õ–ú–ö', 'Type': 'share', 'Currency': 'rub', 'Lot': 1, 'Exchange': 'MOEX', 'FIGI': 'BBG00475K6C5'},
        ])


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    TOKEN = "t.8HbNCn4L0U9uBmMa5oloBrXCKxnqsTYNVK3f9iJOwDBiQ2lva9kvQ3C-MLgEESHl65ma1q0k0P6aMfS_O_co4g"
    
    service = InstrumentServiceWorking(TOKEN)
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –¢–µ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π
    print("\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π...")
    popular = service.get_popular_russian_shares_working()
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(popular)} –∞–∫—Ü–∏–π")
    print(popular[['Ticker', 'Name', 'Lot', 'Currency']])
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    print("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ 'GAZP'...")
    search_results = service.search_instruments_working("GAZP")
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(search_results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    if not search_results.empty:
        print(search_results[['Ticker', 'Name', 'Type', 'Currency']].head(3))