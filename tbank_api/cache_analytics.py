# tbank_api/cache_analytics.py
"""
–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

from datetime import datetime
import numpy as np
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

# üîß –ó–ê–©–ò–©–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ PSUTIL
try:
    import psutil
    PSUTIL_AVAILABLE = True
    logger.info("‚úÖ psutil –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã")
except ImportError as e:
    psutil = None
    PSUTIL_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è psutil –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

class CacheAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—ç—à–∞"""
    
    def __init__(self, cache_manager):
        self.cache_manager = cache_manager
        self.performance_stats = {
            'hits': 0,
            'misses': 0,
            'total_requests': 0,
            'size_history': [],
            'response_times': []
        }
        self.start_time = datetime.now()
    
    def record_hit(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à"""
        self.performance_stats['hits'] += 1
        self.performance_stats['total_requests'] += 1
    
    def record_miss(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–º–∞—Ö –∫—ç—à–∞"""
        self.performance_stats['misses'] += 1
        self.performance_stats['total_requests'] += 1
    
    def record_response_time(self, response_time: float):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        self.performance_stats['response_times'].append(
            (datetime.now(), response_time)
        )
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        if len(self.performance_stats['response_times']) > 1000:
            self.performance_stats['response_times'] = \
                self.performance_stats['response_times'][-1000:]
    
    def get_hit_ratio(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"""
        total = self.performance_stats['total_requests']
        if total == 0:
            return 0.0
        return self.performance_stats['hits'] / total
    
    def get_memory_usage(self) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        if not PSUTIL_AVAILABLE:
            return 0.0
        
        try:
            process = psutil.Process()
            return process.memory_info().rss / 1024 / 1024  # MB
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {e}")
            return 0.0
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        hit_ratio = self.get_hit_ratio()
        response_times = [rt for _, rt in self.performance_stats['response_times']]
        avg_response_time = np.mean(response_times) if response_times else 0
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
        memory_usage = self.get_memory_usage()
        
        uptime_seconds = (datetime.now() - self.start_time).total_seconds()
        uptime_hours = uptime_seconds / 3600
        
        return {
            'hit_ratio': hit_ratio,
            'total_requests': self.performance_stats['total_requests'],
            'hits': self.performance_stats['hits'],
            'misses': self.performance_stats['misses'],
            'avg_response_time_ms': avg_response_time * 1000,
            'memory_usage_mb': memory_usage,
            'uptime_hours': uptime_hours,
            'requests_per_hour': self.performance_stats['total_requests'] / max(1, uptime_hours),
            'psutil_available': PSUTIL_AVAILABLE
        }