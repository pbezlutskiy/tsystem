# tbank_api/tbank_data_loader.py
"""
–ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ë–ï–ó–û–ü–ê–°–ù–´–ú–ò –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
"""

import pandas as pd
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
import logging
from config import Config  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# ‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú–°–Ø –ù–ê –ë–ï–ó–û–ü–ê–°–ù–£–Æ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –í–ï–†–°–ò–Æ
from .optimized_data_manager import OptimizedTBankDataManager as TBankDataManager

logger = logging.getLogger(__name__)

class TBankDataLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, api_key: str = None):
        # –£–±–∏—Ä–∞–µ–º self.config, –∏—Å–ø–æ–ª—å–∑—É–µ–º Config –Ω–∞–ø—Ä—è–º—É—é
        if api_key:
            self.api_key = api_key
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Config
            self.api_key = Config.TINKOFF_TOKEN
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        self.data_manager = TBankDataManager(self.api_key)
        logger.info("‚úÖ TBankDataLoader —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_price_data(self, symbol: str, 
                       days_back: int = 365,
                       timeframe: str = '1d',
                       use_cache: bool = True) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
        if not self.api_key:
            logger.error("API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return pd.DataFrame()
        
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        data = self.data_manager.get_historical_data_with_cache(
            symbol=symbol,
            start_date=start_date.strftime('%Y-%m-%d'),
            end_date=end_date.strftime('%Y-%m-%d'),
            timeframe=timeframe,
            use_cache=use_cache
        )
        
        if data.empty:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return pd.DataFrame()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        standardized_data = self._standardize_data(data, symbol)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(standardized_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        return standardized_data
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.data_manager.get_performance_stats()
    
    def get_detailed_analytics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        return self.data_manager.get_detailed_analytics()
    
    def update_recent_data(self, symbol: str, days_back: int = 1) -> pd.DataFrame:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        return self.data_manager.update_data_incrementally(symbol, days_back)
    
    def get_available_symbols(self) -> pd.DataFrame:
        return self.data_manager.get_available_symbols_cached()
    
    def get_current_prices(self, symbols: List[str]) -> pd.DataFrame:
        if not self.api_key:
            return pd.DataFrame()
        return self.data_manager.api.get_current_quotes(symbols)
    
    def clear_cache(self):
        self.data_manager.clear_all_cache()
    
    def is_configured(self) -> bool:
        return bool(self.api_key)
    
    def get_cache_stats(self) -> Dict[str, Any]:
        return self.data_manager.get_cache_info()
    
    def _standardize_data(self, data: pd.DataFrame, symbol: str) -> pd.DataFrame:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        result = data.copy()
        
        required_columns = ['close']
        for col in required_columns:
            if col not in result.columns:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")
                return pd.DataFrame()
        
        if 'open' not in result.columns and 'close' in result.columns:
            result['open'] = result['close']
        
        if 'high' not in result.columns and 'close' in result.columns:
            result['high'] = result['close']
        
        if 'low' not in result.columns and 'close' in result.columns:
            result['low'] = result['close']
        
        if 'volume' not in result.columns:
            result['volume'] = 0
        
        result['symbol'] = symbol
        
        if not result.index.is_monotonic_increasing:
            result.sort_index(inplace=True)
        
        return result
    
    def get_advanced_analytics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        try:
            return self.data_manager.get_advanced_analytics()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {
                'error': str(e),
                'basic_stats': self.get_performance_stats(),
                'cache_info': self.get_cache_stats()
            }