# tbank_api/tbank_data_loader.py
"""
–ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –¢-–±–∞–Ω–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import pandas as pd
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
import logging
from .tbank_api import TBankAPI
from .tbank_config import TBankConfig

logger = logging.getLogger(__name__)

class TBankDataLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¢-–±–∞–Ω–∫–∞ API"""
    
    def __init__(self, api_key: str = None):
        self.config = TBankConfig()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if api_key:
            self.api_key = api_key
        else:
            self.api_key = self.config.get_api_key()
        
        self.api = TBankAPI(self.api_key, self.config.get('api_url'))
        self.cache = {}
        self.cache_time = {}
    
    def load_price_data(self, symbol: str, 
                       days_back: int = 365,
                       timeframe: str = '1d') -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        
        Parameters:
        -----------
        symbol : str
            –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        days_back : int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        timeframe : str
            –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
        --------
        pd.DataFrame
            –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∏—Å—Ç–µ–º—ã
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not self.api_key:
            logger.error("API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return pd.DataFrame()
        
        cache_key = f"{symbol}_{timeframe}_{days_back}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if self._is_cached_valid(cache_key):
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return self.cache[cache_key].copy()
        
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = self.api.get_historical_data(
            symbol=symbol,
            start_date=start_date.strftime('%Y-%m-%d'),
            end_date=end_date.strftime('%Y-%m-%d'),
            timeframe=timeframe
        )
        
        if data.empty:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return pd.DataFrame()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º—ã
        standardized_data = self._standardize_data(data, symbol)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        self.cache[cache_key] = standardized_data.copy()
        self.cache_time[cache_key] = datetime.now()
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(standardized_data)} —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        return standardized_data
    
    def _standardize_data(self, data: pd.DataFrame, symbol: str) -> pd.DataFrame:
        """
        –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Parameters:
        -----------
        data : pd.DataFrame
            –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        symbol : str
            –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
        --------
        pd.DataFrame
            –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        result = data.copy()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['close']
        for col in required_columns:
            if col not in result.columns:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")
                return pd.DataFrame()
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (–µ—Å–ª–∏ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏)
        if 'open' not in result.columns and 'close' in result.columns:
            result['open'] = result['close']
        
        if 'high' not in result.columns and 'close' in result.columns:
            result['high'] = result['close']
        
        if 'low' not in result.columns and 'close' in result.columns:
            result['low'] = result['close']
        
        if 'volume' not in result.columns:
            result['volume'] = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        result['symbol'] = symbol
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        if not result.index.is_monotonic_increasing:
            result.sort_index(inplace=True)
        
        return result
    
    def _is_cached_valid(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if cache_key not in self.cache:
            return False
        
        cache_duration = self.config.get('cache_duration_minutes', 5)
        cache_age = datetime.now() - self.cache_time.get(cache_key, datetime.min)
        
        return cache_age.total_seconds() < cache_duration * 60
    
    def get_available_symbols(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not self.api_key:
            logger.error("API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return pd.DataFrame()
        return self.api.get_instruments_list()
    
    def get_current_prices(self, symbols: List[str]) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not self.api_key:
            logger.error("API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return pd.DataFrame()
        return self.api.get_current_quotes(symbols)
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.cache.clear()
        self.cache_time.clear()
        logger.info("–ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω")
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫"""
        return bool(self.api_key)