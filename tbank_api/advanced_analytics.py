# tbank_api/advanced_analytics.py
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""

import time
from datetime import datetime, timedelta
from collections import deque
import threading
from typing import Dict, Any, List
import logging

# ‚úÖ –î–û–ë–ê–í–¨–¢–ï –ò–ú–ü–û–†–¢ PSUTIL –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    logging.debug("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")

logger = logging.getLogger(__name__)

class AdvancedCacheAnalytics:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, cache_manager):
        self.cache_manager = cache_manager
        self.metrics_history = {
            'hit_ratio': deque(maxlen=100),
            'response_time': deque(maxlen=100),
            'memory_usage': deque(maxlen=100),
            'cache_size': deque(maxlen=100)
        }
        self.performance_alerts = []
        self.start_time = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ–Ω–µ
        self._start_metrics_collection()
    
    def _start_metrics_collection(self):
        """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        def collect_metrics():
            while True:
                try:
                    self._collect_metrics_snapshot()
                    time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                    time.sleep(300)
        
        thread = threading.Thread(target=collect_metrics, daemon=True)
        thread.start()
    
    def _collect_metrics_snapshot(self):
        """–°–±–æ—Ä —Å–Ω–∏–º–∫–∞ –º–µ—Ç—Ä–∏–∫"""
        try:
            stats = self.cache_manager.get_detailed_analytics()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.metrics_history['hit_ratio'].append({
                'timestamp': datetime.now(),
                'value': float(stats.get('cache_hit_ratio', '0%').rstrip('%')) / 100
            })
            
            self.metrics_history['response_time'].append({
                'timestamp': datetime.now(),
                'value': stats.get('avg_response_time_ms', 0)
            })
            
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò
            memory_usage = 0
            if PSUTIL_AVAILABLE:
                try:
                    process = psutil.Process()
                    memory_usage = process.memory_info().rss / 1024 / 1024  # MB
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {e}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                memory_usage = stats.get('memory_usage_mb', 0)
            
            self.metrics_history['memory_usage'].append({
                'timestamp': datetime.now(),
                'value': memory_usage
            })
            
            self.metrics_history['cache_size'].append({
                'timestamp': datetime.now(),
                'value': stats.get('total_cache_size_mb', 0)
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            self._check_performance_alerts(stats)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _check_performance_alerts(self, stats: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        hit_ratio = float(stats.get('cache_hit_ratio', '0%').rstrip('%'))
        
        if hit_ratio < 20:  # –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π
            self._add_alert("warning", "–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à", 
                           f"Hit ratio: {hit_ratio}%", "cache_performance")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ psutil –¥–æ—Å—Ç—É–ø–µ–Ω
        if PSUTIL_AVAILABLE:
            memory_usage = stats.get('memory_usage_mb', 0)
            if memory_usage > 500:  # –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                self._add_alert("error", "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", 
                               f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory_usage} MB", "memory")
    
    def _add_alert(self, level: str, title: str, message: str, alert_type: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert = {
            'level': level,
            'title': title,
            'message': message,
            'type': alert_type,
            'timestamp': datetime.now(),
            'acknowledged': False
        }
        self.performance_alerts.append(alert)
        logger.warning(f"üö® {level.upper()}: {title} - {message}")
    
    def get_active_alerts(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        return [alert for alert in self.performance_alerts if not alert['acknowledged']]
    
    def acknowledge_alert(self, alert_index: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–ª–µ—Ä—Ç"""
        if 0 <= alert_index < len(self.performance_alerts):
            self.performance_alerts[alert_index]['acknowledged'] = True
            logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç #{alert_index} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
    
    def get_metrics_history(self, metric_type: str, last_n: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫"""
        history = self.metrics_history.get(metric_type, [])
        if last_n:
            return list(history)[-last_n:]
        return list(history)
    
    def get_performance_trends(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.metrics_history['hit_ratio']:
            return {
                'status': 'no_data',
                'message': '–ú–µ—Ç—Ä–∏–∫–∏ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã',
                'hit_ratio_trend': 'stable',
                'response_time_trend': 'stable',
                'active_alerts': 0,
                'uptime_hours': 0
            }
        
        hit_ratios = [point['value'] for point in self.metrics_history['hit_ratio']]
        response_times = [point['value'] for point in self.metrics_history['response_time']]
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        hit_trend = 'stable'
        if len(hit_ratios) > 1:
            if hit_ratios[-1] > hit_ratios[0] + 0.1:  # +10%
                hit_trend = 'up'
            elif hit_ratios[-1] < hit_ratios[0] - 0.1:  # -10%
                hit_trend = 'down'
        
        response_trend = 'stable'
        if len(response_times) > 1:
            if response_times[-1] < response_times[0] - 10:  # -10ms
                response_trend = 'down'  # –£–ª—É—á—à–µ–Ω–∏–µ
            elif response_times[-1] > response_times[0] + 10:  # +10ms
                response_trend = 'up'  # –£—Ö—É–¥—à–µ–Ω–∏–µ
        
        return {
            'hit_ratio_trend': hit_trend,
            'avg_hit_ratio': sum(hit_ratios) / len(hit_ratios) if hit_ratios else 0,
            'response_time_trend': response_trend,
            'avg_response_time_ms': sum(response_times) / len(response_times) if response_times else 0,
            'active_alerts': len(self.get_active_alerts()),
            'uptime_hours': round((datetime.now() - self.start_time).total_seconds() / 3600, 2),
            'data_points': len(hit_ratios),
            'memory_monitoring': PSUTIL_AVAILABLE  # ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
        }
    
    def clear_old_alerts(self, hours_old: int = 24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        cutoff_time = datetime.now() - timedelta(hours=hours_old)
        self.performance_alerts = [
            alert for alert in self.performance_alerts 
            if alert['timestamp'] > cutoff_time or not alert['acknowledged']
        ]