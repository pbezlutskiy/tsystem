# tbank_api/cache_predictor.py
"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from datetime import datetime, time
import threading
from collections import deque
import heapq
import logging
from typing import List, Tuple, Dict

logger = logging.getLogger(__name__)

class CachePredictor:
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    
    def __init__(self, cache_manager):
        self.cache_manager = cache_manager
        self.access_pattern = deque(maxlen=1000)
        self.popular_symbols = {}
        self.preload_thread = None
        self.running = False
        
    def record_access(self, symbol: str, timeframe: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥–∞–Ω–Ω—ã–º"""
        key = (symbol, timeframe)
        self.access_pattern.append(key)
        self.popular_symbols[key] = self.popular_symbols.get(key, 0) + 1
        
    def get_popular_symbols(self, top_n: int = 10) -> List[Tuple[Tuple[str, str], int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        return heapq.nlargest(top_n, self.popular_symbols.items(), key=lambda x: x[1])
    
    def start_preload_daemon(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.preload_thread and self.preload_thread.is_alive():
            return
            
        self.running = True
        self.preload_thread = threading.Thread(target=self._preload_worker, daemon=True)
        self.preload_thread.start()
        logger.info("‚úÖ –î–µ–º–æ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_preload_daemon(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ–º–æ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
        self.running = False
        if self.preload_thread:
            self.preload_thread.join(timeout=5)
            logger.info("‚úÖ –î–µ–º–æ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _preload_worker(self):
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
        import time as time_module
        while self.running:
            try:
                # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
                current_time = datetime.now().time()
                if time(2, 0) <= current_time <= time(5, 0):  # –ù–æ—á—å—é
                    popular_symbols = self.get_popular_symbols(3)  # –¢–æ–ø-3
                    
                    for (symbol, timeframe), count in popular_symbols:
                        logger.info(f"üîÆ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {symbol} ({timeframe}) - –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {count}")
                        try:
                            if hasattr(self.cache_manager, 'preload_data'):
                                self.cache_manager.preload_data(symbol, timeframe, days_back=7)
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
                
                # –ñ–¥–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                for _ in range(3600):
                    if not self.running:
                        break
                    time_module.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                time_module.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ