# tbank_api/tbank_gui.py
"""
GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
from datetime import datetime, timedelta
from typing import List
import logging
from .api_manager import ApiManager
from .tbank_config import TBankConfig
from gui.components import PlotFrame, StyledButton

logger = logging.getLogger(__name__)

class TBankApiTab:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"""
    
    def __init__(self, parent, main_app=None):
        self.parent = parent
        self.main_app = main_app
        self.config = TBankConfig()
        self.api_manager = ApiManager()
        self.current_data = None
        self.available_instruments = pd.DataFrame()
        self._setup_complete = False
        
        self.setup_ui()
        self.load_config_to_ui()
        self.load_available_instruments()
        self._setup_complete = True
        
        self.log_info("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ë–∏—Ä–∂–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.frame = ttk.Frame(self.parent)
        self.frame.columnconfigure(1, weight=1)
        self.frame.rowconfigure(3, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.frame, 
                               text="üì° –ë–∏—Ä–∂–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - API –∫–æ—Ç–∏—Ä–æ–≤–æ–∫",
                               font=('Arial', 14, 'bold'),
                               foreground='#2c3e50')
        title_label.grid(row=0, column=0, columnspan=4, pady=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.LabelFrame(self.frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º", padding="10")
        control_frame.grid(row=1, column=0, columnspan=4, sticky=(tk.W, tk.E), pady=5)
        control_frame.columnconfigure(1, weight=1)
        
        # –í–´–ë–û–† API
        ttk.Label(control_frame, text="–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.api_var = tk.StringVar(value="moex")
        api_combo = ttk.Combobox(control_frame, textvariable=self.api_var,
                               values=["moex", "tbank"], state="readonly", width=10)
        api_combo.grid(row=0, column=1, sticky=tk.W, pady=2, padx=5)
        api_combo.bind('<<ComboboxSelected>>', self.on_api_changed)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –¢-–±–∞–Ω–∫–∞
        self.tbank_frame = ttk.Frame(control_frame)
        self.tbank_frame.grid(row=1, column=0, columnspan=4, sticky=(tk.W, tk.E), pady=2)
        self.tbank_frame.columnconfigure(1, weight=1)
        
        ttk.Label(self.tbank_frame, text="API –∫–ª—é—á –¢-–±–∞–Ω–∫:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.api_key_var = tk.StringVar()
        self.api_entry = ttk.Entry(self.tbank_frame, textvariable=self.api_key_var, show="*", width=30)
        self.api_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2, padx=5)
        
        key_button_frame = ttk.Frame(self.tbank_frame)
        key_button_frame.grid(row=0, column=2, padx=5)
        
        StyledButton(key_button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                    command=self.save_api_key, width=10).pack(side=tk.LEFT, padx=2)
        
        StyledButton(key_button_frame, text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å", 
                    command=self.toggle_api_key_visibility, width=10).pack(side=tk.LEFT, padx=2)
        
        # –°—Ç–∞—Ç—É—Å API
        self.api_status_var = tk.StringVar(value="‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ë–∏—Ä–∂–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        status_label = ttk.Label(control_frame, textvariable=self.api_status_var, 
                 foreground='green', font=('Arial', 9))
        status_label.grid(row=2, column=1, sticky=tk.W, pady=2)
        self._status_label = status_label  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        test_button = StyledButton(control_frame, text="üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                                 command=self.test_connection, width=20)
        test_button.grid(row=2, column=2, padx=5)
        
        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instruments_frame = ttk.LabelFrame(self.frame, text="–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", padding="10")
        instruments_frame.grid(row=2, column=0, columnspan=4, sticky=(tk.W, tk.E), pady=5)
        instruments_frame.columnconfigure(1, weight=1)
        
        # –†—ã–Ω–æ–∫
        ttk.Label(instruments_frame, text="–†—ã–Ω–æ–∫:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.market_var = tk.StringVar(value="shares")
        market_combo = ttk.Combobox(instruments_frame, textvariable=self.market_var,
                                  values=["shares", "bonds", "etfs", "currencies", "futures", "all"], 
                                  state="readonly", width=10)
        market_combo.grid(row=0, column=1, sticky=tk.W, pady=2, padx=5)
        market_combo.bind('<<ComboboxSelected>>', self.on_market_changed)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        ttk.Label(instruments_frame, text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:").grid(row=0, column=2, sticky=tk.W, pady=2)
        self.symbol_var = tk.StringVar(value="SBER")
        self.symbol_combo = ttk.Combobox(instruments_frame, textvariable=self.symbol_var,
                                       state="readonly", width=15)
        self.symbol_combo.grid(row=0, column=3, sticky=(tk.W, tk.E), pady=2, padx=5)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        refresh_btn = StyledButton(instruments_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                                 command=self.load_available_instruments, width=15)
        refresh_btn.grid(row=0, column=4, padx=5)
        
        # –ü–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        params_frame = ttk.LabelFrame(self.frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö", padding="10")
        params_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        params_frame.columnconfigure(1, weight=1)
        
        # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        ttk.Label(params_frame, text="–ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π):").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.period_var = tk.StringVar(value="365")
        period_combo = ttk.Combobox(params_frame, textvariable=self.period_var,
                                  values=["30", "90", "180", "365", "730", "1825"],
                                  state="readonly", width=8)
        period_combo.grid(row=0, column=1, sticky=tk.W, pady=2, padx=5)
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º
        ttk.Label(params_frame, text="–¢–∞–π–º—Ñ—Ä–µ–π–º:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.timeframe_var = tk.StringVar(value="D")
        timeframe_combo = ttk.Combobox(params_frame, textvariable=self.timeframe_var,
                                     values=["D", "H1", "H4", "W", "1m", "5m", "15m"],
                                     state="readonly", width=8)
        timeframe_combo.grid(row=1, column=1, sticky=tk.W, pady=2, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(self.frame)
        buttons_frame.grid(row=3, column=2, columnspan=2, sticky=(tk.W, tk.E), pady=5, padx=10)
        
        StyledButton(buttons_frame, text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                    command=self.load_data, width=18).pack(side=tk.TOP, pady=2)
        
        StyledButton(buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                    command=self.refresh_data, width=18).pack(side=tk.TOP, pady=2)
        
        StyledButton(buttons_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", 
                    command=self.run_trading_test, width=18).pack(side=tk.TOP, pady=2)
        
        StyledButton(buttons_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                    command=self.export_data, width=18).pack(side=tk.TOP, pady=2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(self.frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
        info_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        info_frame.columnconfigure(0, weight=1)
        info_frame.rowconfigure(0, weight=1)
        
        self.info_text = tk.Text(info_frame, height=10, width=60, font=('Arial', 9))
        scrollbar = ttk.Scrollbar(info_frame, orient=tk.VERTICAL, command=self.info_text.yview)
        self.info_text.configure(yscrollcommand=scrollbar.set)
        self.info_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        plot_frame = ttk.LabelFrame(self.frame, text="–ì—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö", padding="10")
        plot_frame.grid(row=4, column=2, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5, padx=(10, 0))
        plot_frame.columnconfigure(0, weight=1)
        plot_frame.rowconfigure(0, weight=1)
        
        self.plot_widget = PlotFrame(plot_frame)
        self.plot_widget.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.frame.rowconfigure(4, weight=1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ API
        self.on_api_changed()
    
    def on_api_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ API"""
        if not self._setup_complete:
            return
            
        api_name = self.api_var.get()
        
        try:
            if api_name == 'tbank':
                self.tbank_frame.grid()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¢-–±–∞–Ω–∫–∞
                if self.api_manager.is_tbank_available():
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if self.api_manager.test_connection('tbank'):
                        self.api_status_var.set("‚úÖ –¢-–±–∞–Ω–∫ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                        self._update_status_color('green')
                    else:
                        self.api_status_var.set("‚ö†Ô∏è –¢-–±–∞–Ω–∫ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        self._update_status_color('orange')
                else:
                    self.api_status_var.set("‚ùå –¢-–±–∞–Ω–∫ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    self._update_status_color('red')
            else:
                self.tbank_frame.grid_remove()  # –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¢-–±–∞–Ω–∫–∞
                if self.api_manager.test_connection('moex'):
                    self.api_status_var.set("‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ë–∏—Ä–∂–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                    self._update_status_color('green')
                else:
                    self.api_status_var.set("‚ö†Ô∏è –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ë–∏—Ä–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    self._update_status_color('orange')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π API –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            if self.api_manager.set_api(api_name):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                self.load_available_instruments()
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API: {api_name}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ API: {e}")
            self.api_status_var.set("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ API")
            self._update_status_color('red')
    
    def on_market_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        self.load_available_instruments()
    
    def load_available_instruments(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            market = self.market_var.get()
            self.available_instruments = self.api_manager.get_available_symbols(market)
            
            if not self.available_instruments.empty:
                symbols = self.available_instruments['symbol'].tolist()
                self.symbol_combo['values'] = symbols
                
                if symbols and not self.symbol_var.get() in symbols:
                    self.symbol_var.set(symbols[0])
                
                self.log_info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(symbols)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä—ã–Ω–∫–∞ {market}")
            else:
                self.log_info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                self.symbol_combo['values'] = []
                
        except Exception as e:
            self.log_info(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
            self.symbol_combo['values'] = []
    
    def _update_status_color(self, color: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        self._status_label.config(foreground=color)
    
    def load_config_to_ui(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        api_key = self.config.get_api_key()
        if api_key:
            self.api_key_var.set(api_key)
    
    def save_api_key(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¢-–±–∞–Ω–∫–∞"""
        api_key = self.api_key_var.get().strip()
        if not api_key:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¢-–±–∞–Ω–∫–∞")
            return
        
        try:
            self.config.set_api_key(api_key)
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
            self.api_manager.reload_tbank_api()
            self.log_info("‚úÖ API –∫–ª—é—á –¢-–±–∞–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.on_api_changed()
            
        except Exception as e:
            self.log_info(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á: {str(e)}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É API"""
        api_name = self.api_var.get()
        
        if api_name == 'tbank' and not self.config.is_api_key_set():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á –¢-–±–∞–Ω–∫–∞")
            return
        
        try:
            if self.api_manager.test_connection(api_name):
                self.log_info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {api_name.upper()} API —É—Å–ø–µ—à–Ω–æ")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {api_name.upper()} API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                self._update_status_color('green')
            else:
                self.log_info(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {api_name.upper()} API")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {api_name.upper()} API")
                self._update_status_color('red')
                
        except Exception as e:
            self.log_info(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
    
    def toggle_api_key_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ API –∫–ª—é—á–∞"""
        current_show = self.api_entry.cget('show')
        if current_show == '*':
            self.api_entry.config(show='')
        else:
            self.api_entry.config(show='*')
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π API"""
        symbol = self.symbol_var.get().strip()
        if not symbol:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
            return
        
        try:
            days_back = int(self.period_var.get())
            timeframe = self.timeframe_var.get()
            
            api_name = self.api_var.get()
            self.log_info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} —á–µ—Ä–µ–∑ {api_name.upper()} API...")
            self.log_info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–µ—Ä–∏–æ–¥={days_back} –¥–Ω–µ–π, —Ç–∞–π–º—Ñ—Ä–µ–π–º={timeframe}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            self.parent.config(cursor='watch')
            self.frame.update()
            
            data = self.api_manager.load_price_data(
                symbol=symbol,
                days_back=days_back,
                timeframe=timeframe
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
            self.parent.config(cursor='')
            
            if data.empty:
                self.log_info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                return
            
            self.current_data = data
            self.update_info_panel(data)
            self.plot_data(data)
            self.log_info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
            
        except ValueError:
            self.log_info("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            self.log_info(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
            self.parent.config(cursor='')
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_data is not None:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            self.api_manager.clear_cache()
            self.load_data()
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
    
    def run_trading_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_data is None or self.current_data.empty:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        if self.main_app is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
            return
        
        try:
            if self.set_data_to_main_app(self.current_data):
                self.main_app.run_test()
                self.log_info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API")
            else:
                self.log_info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
                
        except Exception as e:
            self.log_info(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    def set_data_to_main_app(self, data: pd.DataFrame) -> bool:
        """–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        if self.main_app is not None:
            try:
                self.main_app.current_api_data = data
                self.main_app.data_file.set("api_loaded_data")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
                return False
        return False
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        try:
            api_name = self.api_var.get()
            symbol = self.symbol_var.get()
            timeframe = self.timeframe_var.get()
            filename = f"{api_name}_{symbol}_{timeframe}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            self.current_data.to_csv(filename, encoding='utf-8')
            
            self.log_info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            
        except Exception as e:
            self.log_info(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    def update_info_panel(self, data: pd.DataFrame):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        if data.empty:
            return
            
        api_name = self.api_var.get()
        symbol = self.symbol_var.get()
        market = self.market_var.get()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        instrument_info = ""
        if not self.available_instruments.empty and symbol in self.available_instruments['symbol'].values:
            instrument_data = self.available_instruments[self.available_instruments['symbol'] == symbol].iloc[0]
            instrument_info = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {instrument_data.get('name', 'N/A')}\n"
            if 'lot_size' in instrument_data:
                instrument_info += f"–õ–æ—Ç: {instrument_data['lot_size']}\n"
            if 'currency' in instrument_data:
                instrument_info += f"–í–∞–ª—é—Ç–∞: {instrument_data['currency']}\n"
            if 'type' in instrument_data:
                instrument_info += f"–¢–∏–ø: {instrument_data['type']}\n"
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        price_stats = ""
        if 'close' in data.columns:
            price_stats = f"""
–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ï–ù:
–ú–∏–Ω–∏–º—É–º: {data['close'].min():.2f}
–ú–∞–∫—Å–∏–º—É–º: {data['close'].max():.2f}
–¢–µ–∫—É—â–∞—è: {data['close'].iloc[-1]:.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((data['close'].iloc[-1] - data['close'].iloc[0]) / data['close'].iloc[0] * 100):+.2f}%
–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {data['close'].pct_change().std()*100:.2f}%"""
        
        info_text = f"""üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•:

–ò—Å—Ç–æ—á–Ω–∏–∫: {api_name.upper()}
–†—ã–Ω–æ–∫: {market}
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {symbol}
{instrument_info}
–ü–µ—Ä–∏–æ–¥: {self.period_var.get()} –¥–Ω–µ–π
–¢–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe_var.get()}
–ó–∞–ø–∏—Å–µ–π: {len(data):,}

–î–ò–ê–ü–ê–ó–û–ù –î–ê–¢:
–ù–∞—á–∞–ª–æ: {data.index.min().strftime('%d.%m.%Y %H:%M')}
–ö–æ–Ω–µ—Ü: {data.index.max().strftime('%d.%m.%Y %H:%M')}
{price_stats}

–ü–û–°–õ–ï–î–ù–ò–ï –î–ê–ù–ù–´–ï:
{data.tail(3).to_string()}
"""
        
        self.info_text.delete(1.0, tk.END)
        self.info_text.insert(1.0, info_text)
    
    def plot_data(self, data: pd.DataFrame):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if data.empty:
            return
        
        try:
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
            ax.plot(data.index, data['close'], label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', 
                    color='blue', linewidth=1.5)
            
            api_name = self.api_var.get()
            symbol = self.symbol_var.get()
            timeframe = self.timeframe_var.get()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_title(f'{symbol} - –¶–µ–Ω—ã ({api_name.upper()} API, {timeframe})', 
                        fontsize=12, fontweight='bold')
            ax.set_ylabel('–¶–µ–Ω–∞', fontsize=10)
            ax.grid(True, alpha=0.3)
            ax.legend()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            if timeframe in ['H1', 'H4', '1m', '5m', '15m']:
                fig.autofmt_xdate()
                ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d.%m %H:%M'))
            else:
                fig.autofmt_xdate()
                ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%d.%m.%Y'))
            
            self.plot_widget.show_plot(fig)
            
        except Exception as e:
            self.log_info(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
    def log_info(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_message = f"[{timestamp}] {message}\n"
        
        self.info_text.insert(tk.END, log_message)
        self.info_text.see(tk.END)
    
    def get_frame(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤–∫–ª–∞–¥–∫–∏"""
        return self.frame
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.api_manager.clear_cache()
            if hasattr(self, 'plot_widget'):
                self.plot_widget.clear_plot()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")