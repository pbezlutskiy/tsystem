# tbank_api/tbank_gui.py
"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –¢-–±–∞–Ω–∫–∞
"""
import threading
import time
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú ttk
import logging
from typing import Optional, Dict, Any, List
import pandas as pd
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
from .tbank_data_loader import TBankDataLoader
from config import Config

logger = logging.getLogger(__name__)

class TBankApiTab:
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –¢-–±–∞–Ω–∫–∞"""
    
    def __init__(self, parent, main_app):
        self.main_app = main_app
        self.frame = ttk.Frame(parent)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.data_loader = TBankDataLoader()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.token_var = tk.StringVar()
        self.symbol_var = tk.StringVar()
        self.days_back_var = tk.IntVar(value=365)
        self.timeframe_var = tk.StringVar(value='1d')
        self.cache_enabled = tk.BooleanVar(value=True)
        
        # –î–∞–Ω–Ω—ã–µ
        self.loaded_data = None
        self.available_instruments = None
        
        self.setup_ui()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = ttk.Frame(self.frame)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame, 
            text="üì° T-–ë–∞–Ω–∫ API - –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            font=('Arial', 14, 'bold'),
            foreground='#2c3e50'
        )
        title_label.pack(pady=(0, 20))
        
        # === –°–ï–ö–¶–ò–Ø 1: –ù–ê–°–¢–†–û–ô–ö–ê API ===
        api_frame = ttk.LabelFrame(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API", padding="15")
        api_frame.pack(fill=tk.X, pady=10)
        
        # –¢–æ–∫–µ–Ω API
        ttk.Label(api_frame, text="API –¢–æ–∫–µ–Ω:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        token_entry = ttk.Entry(api_frame, textvariable=self.token_var, width=50, show="*")
        token_entry.grid(row=0, column=1, columnspan=2, sticky=(tk.W, tk.E), padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API
        ttk.Button(api_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                  command=self.test_connection).grid(row=0, column=3, padx=5, pady=5)
        ttk.Button(api_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", 
                  command=self.save_token).grid(row=0, column=4, padx=5, pady=5)
        
        # === –°–ï–ö–¶–ò–Ø 2: –ü–û–ò–°–ö –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ===
        search_frame = ttk.LabelFrame(main_frame, text="üîç –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", padding="15")
        search_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        search_entry = ttk.Entry(search_frame, width=30)
        search_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(search_frame, text="–ò—Å–∫–∞—Ç—å", 
                  command=lambda: self.search_instruments(search_entry.get())).grid(row=0, column=2, padx=5, pady=5)
        ttk.Button(search_frame, text="üìã –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", 
                  command=self.load_all_instruments).grid(row=0, column=3, padx=5, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instruments_frame = ttk.Frame(search_frame)
        instruments_frame.grid(row=1, column=0, columnspan=4, sticky=(tk.W, tk.E), pady=10)
        
        self.instruments_tree = ttk.Treeview(instruments_frame, columns=('ticker', 'name', 'type', 'currency'), 
                                           show='headings', height=8)
        self.instruments_tree.heading('ticker', text='–¢–∏–∫–µ—Ä')
        self.instruments_tree.heading('name', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        self.instruments_tree.heading('type', text='–¢–∏–ø')
        self.instruments_tree.heading('currency', text='–í–∞–ª—é—Ç–∞')
        
        self.instruments_tree.column('ticker', width=80)
        self.instruments_tree.column('name', width=200)
        self.instruments_tree.column('type', width=80)
        self.instruments_tree.column('currency', width=60)
        
        # Scrollbar –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(instruments_frame, orient=tk.VERTICAL, command=self.instruments_tree.yview)
        self.instruments_tree.configure(yscrollcommand=scrollbar.set)
        
        self.instruments_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        self.instruments_tree.bind('<<TreeviewSelect>>', self.on_instrument_select)
        
        # === –°–ï–ö–¶–ò–Ø 3: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
        data_frame = ttk.LabelFrame(main_frame, text="üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", padding="15")
        data_frame.pack(fill=tk.X, pady=10)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        ttk.Label(data_frame, text="–¢–∏–∫–µ—Ä:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        ttk.Entry(data_frame, textvariable=self.symbol_var, width=15).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(data_frame, text="–î–Ω–µ–π –Ω–∞–∑–∞–¥:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=5)
        ttk.Entry(data_frame, textvariable=self.days_back_var, width=10).grid(row=0, column=3, padx=5, pady=5)
        
        ttk.Label(data_frame, text="–¢–∞–π–º—Ñ—Ä–µ–π–º:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=5)
        timeframe_combo = ttk.Combobox(
            data_frame, 
            textvariable=self.timeframe_var,
            values=['1d', '1h', '4h', '1w', '1m', '5m', '15m'],
            state="readonly",
            width=8
        )
        timeframe_combo.grid(row=0, column=5, padx=5, pady=5)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        ttk.Checkbutton(data_frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                       variable=self.cache_enabled).grid(row=0, column=6, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        button_frame = ttk.Frame(data_frame)
        button_frame.grid(row=1, column=0, columnspan=7, pady=10)
        
        ttk.Button(button_frame, text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.load_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ", 
                  command=self.update_recent_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ", 
                  command=self.use_in_main_system).pack(side=tk.LEFT, padx=5)
        
        # === –°–ï–ö–¶–ò–Ø 4: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–≠–®–ï–ú –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===
        cache_frame = ttk.LabelFrame(main_frame, text="‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏", padding="15")
        cache_frame.pack(fill=tk.X, pady=10)
        
        cache_buttons_frame = ttk.Frame(cache_frame)
        cache_buttons_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(cache_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", 
                  command=self.clear_cache).pack(side=tk.LEFT, padx=5)
        ttk.Button(cache_buttons_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞", 
                  command=self.show_cache_stats).pack(side=tk.LEFT, padx=5)
        ttk.Button(cache_buttons_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π", 
                  command=self.show_optimization_stats).pack(side=tk.LEFT, padx=5)  # ‚úÖ –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        ttk.Button(cache_buttons_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", 
                  command=lambda: self.load_all_instruments(force_refresh=True)).pack(side=tk.LEFT, padx=5)
        
        # –í —Å–µ–∫—Ü–∏–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏" –î–û–ë–ê–í–¨–¢–ï:

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        advanced_buttons_frame = ttk.Frame(cache_frame)
        advanced_buttons_frame.pack(fill=tk.X, pady=5)

        ttk.Button(advanced_buttons_frame, text="üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                command=self.show_advanced_analytics).pack(side=tk.LEFT, padx=5)

        ttk.Button(advanced_buttons_frame, text="üéõÔ∏è –î–∞—à–±–æ—Ä–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
                command=self.show_performance_dashboard).pack(side=tk.LEFT, padx=5)
        
        # –í —Å–µ–∫—Ü–∏–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏" –î–û–ë–ê–í–ò–ú:

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è AI-—Ñ—É–Ω–∫—Ü–∏–π
        ai_buttons_frame = ttk.Frame(cache_frame)
        ai_buttons_frame.pack(fill=tk.X, pady=5)

        ttk.Button(ai_buttons_frame, text="ü§ñ AI –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", 
                command=self.show_ai_predictions).pack(side=tk.LEFT, padx=5)

        ttk.Button(ai_buttons_frame, text="‚ö° –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", 
                command=self.toggle_auto_optimization).pack(side=tk.LEFT, padx=5)

        ttk.Button(ai_buttons_frame, text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π", 
                command=self.show_optimization_history).pack(side=tk.LEFT, padx=5)

        # –í —Å–µ–∫—Ü–∏–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏" –ø–æ—Å–ª–µ AI –∫–Ω–æ–ø–æ–∫:

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
        memory_buttons_frame = ttk.Frame(cache_frame)
        memory_buttons_frame.pack(fill=tk.X, pady=5)

        ttk.Button(memory_buttons_frame, text="üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏", 
                command=self.force_memory_cleanup).pack(side=tk.LEFT, padx=5)

        ttk.Button(memory_buttons_frame, text="üö® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏", 
                command=self.manage_memory_alerts).pack(side=tk.LEFT, padx=5)

        ttk.Button(memory_buttons_frame, text="üìâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏", 
                command=self.configure_memory_settings).pack(side=tk.LEFT, padx=5)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏
        self.memory_status_var = tk.StringVar(value="üíæ –ü–∞–º—è—Ç—å: –ù–æ—Ä–º–∞")
        memory_status_label = ttk.Label(cache_frame, textvariable=self.memory_status_var,
                                    foreground="green", font=('Arial', 9, 'bold'))
        memory_status_label.pack(pady=2)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        self._start_memory_monitoring()

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ AI
        self.ai_status_var = tk.StringVar(value="ü§ñ AI: –ê–∫—Ç–∏–≤–µ–Ω")
        ai_status_label = ttk.Label(cache_frame, textvariable=self.ai_status_var,
                                foreground="green", font=('Arial', 9, 'bold'))
        ai_status_label.pack(pady=2)

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
        mode_label = ttk.Label(cache_frame, 
                            text="–†–µ–∂–∏–º: üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞", 
                            foreground="blue", 
                            font=('Arial', 10, 'bold'))
        mode_label.pack(pady=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        mode_label = ttk.Label(cache_frame, text="–†–µ–∂–∏–º: üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã", 
                              foreground="green", font=('Arial', 9, 'bold'))
        mode_label.pack(pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
        self.info_text = scrolledtext.ScrolledText(main_frame, height=6, font=('Arial', 9))
        self.info_text.pack(fill=tk.BOTH, expand=True, pady=10)
        self.info_text.insert(tk.END, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ T-–ë–∞–Ω–∫ API!\n\n")
        self.info_text.insert(tk.END, "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API —Ç–æ–∫–µ–Ω\n")
        self.info_text.insert(tk.END, "2. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n")
        self.info_text.insert(tk.END, "3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n")
        self.info_text.insert(tk.END, "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ\n")
        self.info_text.config(state=tk.DISABLED)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        self.load_saved_token()
        
    def show_optimization_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            stats = self.data_loader.get_performance_stats()
            analytics = self.data_loader.get_detailed_analytics()
            
            # –ü–æ–ª—É—á–∞–µ–º AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            prediction_stats = self.data_loader.data_manager.get_prediction_stats()
            optimization_info = self.data_loader.data_manager.get_optimization_info()
            
            stats_text = f"""üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´

            üéØ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
            ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}
            ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {stats['cache_hits']} ({stats['cache_hit_ratio']})
            ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: {stats['memory_savings_mb']} MB
            ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è: {stats['avg_savings_per_request']} MB/–∑–∞–ø—Ä–æ—Å

            ü§ñ AI –°–ò–°–¢–ï–ú–ê:
            ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_stats.get('total_predictions', 0)}
            ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {prediction_stats.get('prediction_accuracy', 0):.1%}
            ‚Ä¢ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {'–í–ö–õ' if optimization_info['auto_optimization_enabled'] else '–í–´–ö–õ'}
            ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {optimization_info['optimization_history_count']}

            üíæ –°–û–°–¢–û–Ø–ù–ò–ï –ö–≠–®–ê:
            ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {analytics.get('instruments_cache_size', 0)}
            ‚Ä¢ –§–∞–π–ª–æ–≤ —Å–≤–µ—á–µ–π: {analytics.get('candles_cache_size', 0)}
            ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {analytics.get('total_cache_size_mb', 0):.2f} MB
            ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: {analytics.get('memory_cache_entries', 0)}

            üìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
            ‚Ä¢ –¢—Ä–µ–Ω–¥ Hit Ratio: {analytics.get('hit_ratio_trend', 'stable')}
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {analytics.get('memory_usage_mb', 0):.1f} MB
            ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {analytics.get('active_alerts_count', 0)}"""

            messagebox.showinfo("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats_text)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")
                
    def show_ai_predictions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            prediction_stats = self.data_loader.data_manager.get_prediction_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            likely_requests = self.data_loader.data_manager.smart_predictor.get_likely_requests(hours_ahead=24)
            
            prediction_text = f"""ü§ñ AI –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô

            üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:
            ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_stats.get('total_predictions', 0)}
            ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_stats.get('successful_predictions', 0)}
            ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {prediction_stats.get('prediction_accuracy', 0):.1%}

            üîÆ –í–ï–†–û–Ø–¢–ù–´–ï –ó–ê–ü–†–û–°–´ (—Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞):"""
            
            if likely_requests:
                for i, ((symbol, timeframe), probability) in enumerate(likely_requests[:5]):  # –¢–æ–ø-5
                    status = "‚úÖ –í–´–°–û–ö–ê–Ø" if probability > 0.7 else "‚ö†Ô∏è –°–†–ï–î–ù–Ø–Ø" if probability > 0.4 else "‚ÑπÔ∏è –ù–ò–ó–ö–ê–Ø"
                    prediction_text += f"\n{i+1}. {symbol} ({timeframe}) - {probability:.1%} - {status}"
            else:
                prediction_text += "\nüì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            popular_symbols = self.data_loader.data_manager.smart_predictor.get_popular_symbols()
            if popular_symbols:
                prediction_text += f"\n\nüèÜ –ü–û–ü–£–õ–Ø–†–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:"
                for i, ((symbol, timeframe), count) in enumerate(popular_symbols[:3]):
                    prediction_text += f"\n{i+1}. {symbol} ({timeframe}) - {count} –æ–±—Ä–∞—â–µ–Ω–∏–π"
            
            messagebox.showinfo("AI –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", prediction_text)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")

    def toggle_auto_optimization(self):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        try:
            current_state = self.data_loader.data_manager.auto_optimizer.config['optimization_enabled']
            new_state = not current_state
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.data_loader.data_manager.auto_optimizer.update_config({
                'optimization_enabled': new_state
            })
            
            status = "–í–ö–õ–Æ–ß–ï–ù–ê" if new_state else "–í–´–ö–õ–Æ–ß–ï–ù–ê"
            color = "green" if new_state else "red"
            self.ai_status_var.set(f"ü§ñ AI: {status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            for widget in self.frame.winfo_children():
                if hasattr(widget, 'winfo_children'):
                    for child in widget.winfo_children():
                        if isinstance(child, ttk.Label) and child.cget('textvariable') == str(self.ai_status_var):
                            child.configure(foreground=color)
            
            messagebox.showinfo("–ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", 
                            f"–ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {status.lower()}!\n\n"
                            f"–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç {'–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' if new_state else '—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ'}.")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")

    def show_optimization_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        try:
            history = self.data_loader.data_manager.auto_optimizer.get_optimization_history(last_n=10)
            
            history_text = "üìã –ò–°–¢–û–†–ò–Ø –ê–í–¢–û–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô:\n\n"
            
            if history:
                for i, record in enumerate(reversed(history)):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
                    timestamp = datetime.fromisoformat(record['timestamp']).strftime('%d.%m %H:%M')
                    history_text += f"üïí {timestamp}:\n"
                    
                    for action in record.get('actions', []):
                        action_type = action.get('type', 'unknown')
                        reason = action.get('reason', '')
                        
                        if action_type == 'auto_cleanup':
                            history_text += f"   üóëÔ∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: {reason}\n"
                        elif action_type == 'increase_ttl':
                            history_text += f"   ‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ TTL: {reason}\n"
                        elif action_type == 'decrease_ttl':
                            history_text += f"   ‚¨áÔ∏è –£–º–µ–Ω—å—à–µ–Ω–∏–µ TTL: {reason}\n"
                        else:
                            history_text += f"   ‚öôÔ∏è {action_type}: {reason}\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    snapshot = record.get('analytics_snapshot', {})
                    if snapshot:
                        history_text += f"   üìä Hit Ratio: {snapshot.get('hit_ratio', 'N/A')}\n"
                        history_text += f"   üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {snapshot.get('cache_size_mb', 0):.1f} MB\n\n"
            else:
                history_text += "üì≠ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å\n\n"
            
            # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            config = self.data_loader.data_manager.auto_optimizer.config
            history_text += f"‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:\n"
            history_text += f"‚Ä¢ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {'–í–ö–õ' if config['optimization_enabled'] else '–í–´–ö–õ'}\n"
            history_text += f"‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: {'–í–ö–õ' if config['auto_cleanup_enabled'] else '–í–´–ö–õ'}\n"
            history_text += f"‚Ä¢ –ü–æ—Ä–æ–≥ –æ—á–∏—Å—Ç–∫–∏: {config['cleanup_threshold_mb']} MB\n"
            history_text += f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: {config['max_cache_size_mb']} MB\n"
            
            messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π", history_text)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {str(e)}")    
    
    def load_saved_token(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ config.py
            saved_token = Config.TINKOFF_TOKEN
            if saved_token and saved_token.strip():
                self.token_var.set(saved_token)
                self.log_info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω API –∏–∑ config.py")
            else:
                self.log_info(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py")
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def save_token(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ API"""
        token = self.token_var.get().strip()
        if not token:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω")
            return
        
        try:
            from config import Config
            Config.set_tinkoff_token(token)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            self.log_info("‚úÖ –¢–æ–∫–µ–Ω API —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        token = self.token_var.get().strip()
        if not token:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω")
            return
        
        try:
            test_loader = TBankDataLoader(token)
            if test_loader.is_configured():
                messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ T-–ë–∞–Ω–∫ API —É—Å–ø–µ—à–Ω–æ!")
                self.log_info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
    
    def load_all_instruments(self, force_refresh=False):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not self.data_loader.is_configured():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API —Ç–æ–∫–µ–Ω")
            return
        
        try:
            self.log_info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            
            instruments_df = self.data_loader.get_available_symbols()
            
            if instruments_df.empty:
                self.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                return
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.instruments_tree.get_children():
                self.instruments_tree.delete(item)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            for _, instrument in instruments_df.iterrows():
                self.instruments_tree.insert('', tk.END, values=(
                    instrument.get('symbol', ''),
                    instrument.get('name', ''),
                    instrument.get('type', ''),
                    instrument.get('currency', '')
                ))
            
            self.available_instruments = instruments_df
            self.log_info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(instruments_df)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
    
    def search_instruments(self, query):
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not query:
            self.load_all_instruments()
            return
        
        if self.available_instruments is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            return
        
        try:
            mask = (self.available_instruments['symbol'].str.contains(query, case=False, na=False) | 
                    self.available_instruments['name'].str.contains(query, case=False, na=False))
            
            filtered_instruments = self.available_instruments[mask]
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.instruments_tree.get_children():
                self.instruments_tree.delete(item)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            for _, instrument in filtered_instruments.iterrows():
                self.instruments_tree.insert('', tk.END, values=(
                    instrument.get('symbol', ''),
                    instrument.get('name', ''),
                    instrument.get('type', ''),
                    instrument.get('currency', '')
                ))
            
            self.log_info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(filtered_instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
    
    def on_instrument_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selection = self.instruments_tree.selection()
        if selection:
            item = self.instruments_tree.item(selection[0])
            ticker = item['values'][0]
            self.symbol_var.set(ticker)
            self.log_info(f"‚úÖ –í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {ticker}")
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        symbol = self.symbol_var.get().strip()
        if not symbol:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
            return
        
        days_back = self.days_back_var.get()
        timeframe = self.timeframe_var.get()
        
        if days_back <= 0:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            return
        
        try:
            self.log_info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            
            use_cache = self.cache_enabled.get()
            
            # ‚úÖ –ó–ê–ü–ò–°–´–í–ê–ï–ú –û–ë–†–ê–©–ï–ù–ò–ï –î–õ–Ø AI –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô (–ó–ê–©–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ smart_predictor —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (hasattr(self.data_loader, 'data_manager') and 
                    hasattr(self.data_loader.data_manager, 'smart_predictor') and
                    hasattr(self.data_loader.data_manager.smart_predictor, 'record_access')):
                    
                    self.data_loader.data_manager.smart_predictor.record_access(symbol, timeframe)
                    self.log_info(f"üîÆ AI: –∑–∞–ø–∏—Å–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ {symbol} ({timeframe})")
                else:
                    logger.debug("AI predictor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è AI: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = self.data_loader.load_price_data(
                symbol=symbol,
                days_back=days_back,
                timeframe=timeframe,
                use_cache=use_cache
            )
            
            if data.empty:
                self.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                messagebox.showerror("–û—à–∏–±–∫–∞", 
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}.\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–∫–µ—Ä\n"
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API\n"
                    f"‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                return
            
            self.loaded_data = data
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            try:
                min_date = data.index.min().strftime('%Y-%m-%d')
                max_date = data.index.max().strftime('%Y-%m-%d')
                min_price = data['close'].min()
                max_price = data['close'].max()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                min_date = "N/A"
                max_date = "N/A" 
                min_price = 0
                max_price = 0
            
            info_lines = [
                f"‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´",
                f"üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {symbol}",
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {min_date} - {max_date}",
                f"üìà –ó–∞–ø–∏—Å–µ–π: {len(data)}",
                f"üíµ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min_price:.2f} - {max_price:.2f}",
                f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}",
                f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–í–ö–õ' if use_cache else '–í–´–ö–õ'}"
            ]
            
            self.log_info("\n".join(info_lines))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            try:
                if hasattr(self.data_loader, 'get_performance_stats'):
                    stats = self.data_loader.get_performance_stats()
                    cache_info = f" (Hit Ratio: {stats.get('cache_hit_ratio', 'N/A')})" if use_cache else ""
                    self.log_info(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get('total_requests', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤{cache_info}")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö", 
                f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n"
                f"üìä –ó–∞–ø–∏—Å–µ–π: {len(data)}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {days_back} –¥–Ω–µ–π\n"
                f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
                f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–í–ö–õ' if use_cache else '–í–´–ö–õ'}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
            )
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.log_error(error_msg)
            # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            detailed_error = (
                f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}:\n\n"
                f"{str(e)}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞\n" 
                f"‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                f"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"
            )
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", detailed_error)

    def update_recent_data(self):
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        symbol = self.symbol_var.get().strip()
        if not symbol:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        try:
            self.log_info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            
            updated_data = self.data_loader.update_recent_data(symbol, days_back=3)
            
            if not updated_data.empty:
                self.loaded_data = updated_data
                self.log_info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(updated_data)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                messagebox.showinfo("–£—Å–ø–µ—Ö", 
                    f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(updated_data)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            else:
                self.log_info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                    f"–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.log_error(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def use_in_main_system(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        if self.loaded_data is None or self.loaded_data.empty:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        try:
            if hasattr(self.main_app, 'current_api_data'):
                self.main_app.current_api_data = self.loaded_data
                
                symbol = self.symbol_var.get().strip()
                self.log_info(f"üéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
                
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", 
                    f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ!\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    f"1. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'\n"
                    f"2. –ù–∞–∂–∞—Ç—å '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç'\n"
                    f"3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                )
                
                if hasattr(self.main_app, 'data_file'):
                    self.main_app.data_file.set("tbank_api_loaded_data")
                    
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        try:
            if messagebox.askyesno("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞", 
                                  "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à?\n\n"
                                  "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–≤–µ—á–µ–π."):
                self.data_loader.clear_cache()
                self.log_info("üóëÔ∏è –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {str(e)}")
    
    def show_cache_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        try:
            stats = self.data_loader.get_cache_stats()
            
            stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê:

            ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {stats.get('instruments_cache_size', 0)}
            ‚Ä¢ –§–∞–π–ª–æ–≤ —Å–≤–µ—á–µ–π: {stats.get('candles_cache_size', 0)}
            ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: {stats.get('memory_cache_entries', 0)}
            ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('total_cache_size_mb', 0):.2f} MB

            üí° –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
            –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API."""
            
            messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞", stats_text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")
    
    def log_info(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.info_text.config(state=tk.NORMAL)
        self.info_text.insert(tk.END, f"\n[{datetime.now().strftime('%H:%M:%S')}] {message}")
        self.info_text.see(tk.END)
        self.info_text.config(state=tk.DISABLED)
    
    def log_error(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ –ª–æ–≥"""
        self.info_text.config(state=tk.NORMAL)
        self.info_text.insert(tk.END, f"\n[{datetime.now().strftime('%H:%M:%S')}] ‚ùå {message}")
        self.info_text.see(tk.END)
        self.info_text.config(state=tk.DISABLED)
    
    def get_frame(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤–∫–ª–∞–¥–∫–∏"""
        return self.frame

    def show_advanced_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        try:
            analytics = self.data_loader.get_advanced_analytics()
            
            basic_stats = analytics['basic_stats']
            cache_info = analytics['cache_info']
            trends = analytics['advanced_trends']
            alerts = analytics['active_alerts']
            metrics_history = analytics['metrics_history']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_text = f"""üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´

            üéØ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
            ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {basic_stats['total_requests']}
            ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {basic_stats['cache_hits']} ({basic_stats['cache_hit_ratio']})
            ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: {basic_stats['memory_savings_mb']} MB

            üíæ –°–û–°–¢–û–Ø–ù–ò–ï –ö–≠–®–ê:
            ‚Ä¢ –§–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {cache_info.get('instruments_cache_size', 0)}
            ‚Ä¢ –§–∞–π–ª–æ–≤ —Å–≤–µ—á–µ–π: {cache_info.get('candles_cache_size', 0)}
            ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {cache_info.get('total_cache_size_mb', 0):.2f} MB

            üìà –¢–†–ï–ù–î–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:
            ‚Ä¢ Hit Ratio: {trends.get('hit_ratio_trend', 'stable')}
            ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {trends.get('response_time_trend', 'stable')}
            ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {trends.get('active_alerts', 0)}
            ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {trends.get('uptime_hours', 0):.1f} —á–∞—Å–æ–≤
            ‚Ä¢ –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {trends.get('data_points', 0)}"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if alerts:
                analytics_text += "\n\nüö® –ê–ö–¢–ò–í–ù–´–ï –ê–õ–ï–†–¢–´:\n"
                for i, alert in enumerate(alerts[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    level_icon = "‚ö†Ô∏è" if alert['level'] == 'warning' else "‚ùå"
                    analytics_text += f"{i+1}. {level_icon} [{alert['level']}] {alert['title']}\n"
                    analytics_text += f"   üìù {alert['message']}\n"
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    if 'timestamp' in alert:
                        try:
                            from datetime import datetime
                            alert_time = datetime.fromisoformat(alert['timestamp'].replace('Z', '+00:00'))
                            analytics_text += f"   üïí {alert_time.strftime('%H:%M:%S')}\n"
                        except:
                            analytics_text += f"   üïí {alert['timestamp']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
            hit_history = metrics_history.get('hit_ratio', [])
            if hit_history:
                latest_hit = hit_history[-1]['value'] if hit_history else 0
                analytics_text += f"\nüìã –ò–°–¢–û–†–ò–Ø –ú–ï–¢–†–ò–ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(hit_history)} —Ç–æ—á–µ–∫)"
                analytics_text += f"\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π Hit Ratio: {latest_hit:.1%}"
            
            messagebox.showinfo("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", analytics_text)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É: {str(e)}")

    def show_performance_dashboard(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            analytics = self.data_loader.get_detailed_analytics()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            status_icon = "‚úÖ" if analytics.get('status') == 'active' else "‚ö†Ô∏è"
            hit_ratio = float(analytics.get('cache_hit_ratio', '0%').rstrip('%'))
            
            if hit_ratio > 70:
                performance_status = "–û—Ç–ª–∏—á–Ω–∞—è"
                status_color = "üü¢"
            elif hit_ratio > 40:
                performance_status = "–•–æ—Ä–æ—à–∞—è" 
                status_color = "üü°"
            else:
                performance_status = "–¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
                status_color = "üî¥"
            
            dashboard_text = f"""üéõÔ∏è –î–ê–®–ë–û–†–î –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò

            {status_icon} –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´: {analytics.get('status', 'unknown')}
            {status_color} –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {performance_status}

            üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
            ‚Ä¢ Hit Ratio: {analytics.get('cache_hit_ratio', '0%')}
            ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {analytics.get('avg_response_time_ms', 0):.1f} ms
            ‚Ä¢ –¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {analytics.get('hit_ratio_trend', 'stable')}

            üíæ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–°–£–†–°–û–í:
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {analytics.get('memory_usage_mb', 0):.1f} MB
            ‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {analytics.get('total_cache_size_mb', 0):.1f} MB
            ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {analytics.get('active_alerts_count', 0)}

            üïí –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
            ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {analytics.get('uptime_hours', 0):.1f} —á–∞—Å–æ–≤
            ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {analytics.get('total_requests', 0)}
            ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {analytics.get('cache_hits', 0)}
            ‚Ä¢ –ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: {analytics.get('cache_misses', 0)}

            ‚ö° –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
            ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if analytics.get('features', {}).get('advanced_analytics') else '–í—ã–∫–ª—é—á–µ–Ω–∞'}
            ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {'–ê–∫—Ç–∏–≤–µ–Ω' if analytics.get('features', {}).get('performance_monitoring') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {'–†–∞–±–æ—Ç–∞—é—Ç' if analytics.get('features', {}).get('real_time_metrics') else '–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç'}"""

            messagebox.showinfo("–î–∞—à–±–æ—Ä–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", dashboard_text)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—à–±–æ—Ä–¥: {str(e)}")

    def _start_memory_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ–Ω–µ"""
        def memory_monitor():
            while True:
                try:
                    self._update_memory_status()
                    time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏: {e}")
                    time.sleep(60)
        
        thread = threading.Thread(target=memory_monitor, daemon=True)
        thread.start()

    def _update_memory_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–º—è—Ç–∏"""
        try:
            analytics = self.data_loader.get_detailed_analytics()
            memory_usage = analytics.get('memory_usage_mb', 0)
            
            if memory_usage > 2000:
                status = "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò"
                color = "red"
            elif memory_usage > 1500:
                status = "‚ö†Ô∏è –í–´–°–û–ö–û–ï"
                color = "orange"
            elif memory_usage > 1000:
                status = "‚ÑπÔ∏è –ü–û–í–´–®–ï–ù–ù–û–ï"
                color = "blue"
            else:
                status = "‚úÖ –ù–û–†–ú–ê"
                color = "green"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.frame.after(0, lambda: self._update_memory_ui(f"üíæ –ü–∞–º—è—Ç—å: {status} ({memory_usage:.0f} MB)", color))
            
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏: {e}")

    def _update_memory_ui(self, text: str, color: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–∞–º—è—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.memory_status_var.set(text)
        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª
        for widget in self.frame.winfo_children():
            if hasattr(widget, 'winfo_children'):
                for child in widget.winfo_children():
                    if isinstance(child, ttk.Label) and child.cget('textvariable') == str(self.memory_status_var):
                        child.configure(foreground=color)

    def force_memory_cleanup(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.data_loader.clear_cache()
            
            # –û—á–∏—â–∞–µ–º memory cache
            if hasattr(self.data_loader.data_manager.cache, '_memory_cache'):
                self.data_loader.data_manager.cache._memory_cache.clear()
            
            # –°–±–æ—Ä –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            analytics = self.data_loader.get_detailed_analytics()
            memory_after = analytics.get('memory_usage_mb', 0)
            
            messagebox.showinfo(
                "–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏", 
                f"‚úÖ –ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!\n\n"
                f"–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {memory_after:.0f} MB\n"
                f"–ö—ç—à –æ—á–∏—â–µ–Ω, —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
            )
            
            self.log_info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å: {str(e)}")

    def manage_memory_alerts(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–∞–º—è—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            analytics = self.data_loader.get_detailed_analytics()
            active_alerts = self.data_loader.data_manager.advanced_analytics.get_active_alerts()
            
            memory_alerts = [alert for alert in active_alerts if alert.get('type') == 'memory']
            
            alert_text = f"""üö® –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–õ–ï–†–¢–ê–ú–ò –ü–ê–ú–Ø–¢–ò

    –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {analytics.get('memory_usage_mb', 0):.0f} MB
    –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –ø–∞–º—è—Ç–∏: {len(memory_alerts)}

    """
            if memory_alerts:
                alert_text += "–ê–ö–¢–ò–í–ù–´–ï –ê–õ–ï–†–¢–´:\n"
                for i, alert in enumerate(memory_alerts):
                    alert_text += f"{i+1}. {alert.get('title', '')}\n"
                    alert_text += f"   {alert.get('message', '')}\n"
                    
                    # ‚úÖ –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–†–ï–ú–ï–ù–ò
                    timestamp = alert.get('timestamp')
                    if hasattr(timestamp, 'strftime'):
                        # –û–±—ä–µ–∫—Ç datetime
                        time_str = timestamp.strftime('%H:%M:%S')
                    else:
                        # –°—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                        time_str = str(timestamp)[11:19] if len(str(timestamp)) > 10 else str(timestamp)
                    
                    alert_text += f"   –í—Ä–µ–º—è: {time_str}\n\n"
            else:
                alert_text += "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –ø–∞–º—è—Ç–∏\n\n"
            
            # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            dialog = tk.Toplevel(self.frame)
            dialog.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–∞–º—è—Ç–∏")
            dialog.geometry("500x400")
            dialog.transient(self.frame)
            dialog.grab_set()
            
            # –¢–µ–∫—Å—Ç –∞–ª–µ—Ä—Ç–æ–≤
            text_widget = scrolledtext.ScrolledText(dialog, height=15, width=60)
            text_widget.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
            text_widget.insert(tk.END, alert_text)
            text_widget.config(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            button_frame = ttk.Frame(dialog)
            button_frame.pack(pady=10)
            
            if memory_alerts:
                ttk.Button(button_frame, text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã",
                        command=lambda: self.acknowledge_all_memory_alerts(dialog)).pack(side=tk.LEFT, padx=5)
            
            ttk.Button(button_frame, text="üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏",
                    command=lambda: self.cleanup_and_close(dialog)).pack(side=tk.LEFT, padx=5)
            
            ttk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å",
                    command=dialog.destroy).pack(side=tk.LEFT, padx=5)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç–∞–º–∏: {str(e)}")

    def acknowledge_all_memory_alerts(self, dialog=None):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã –ø–∞–º—è—Ç–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            active_alerts = self.data_loader.data_manager.advanced_analytics.get_active_alerts()
            memory_alerts = [i for i, alert in enumerate(active_alerts) if alert.get('type') == 'memory']
            
            confirmed_count = 0
            for alert_index in memory_alerts:
                try:
                    self.data_loader.data_manager.advanced_analytics.acknowledge_alert(alert_index)
                    confirmed_count += 1
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–ª–µ—Ä—Ç {alert_index}: {e}")
            
            if dialog:
                dialog.destroy()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {confirmed_count} –∞–ª–µ—Ä—Ç–æ–≤ –ø–∞–º—è—Ç–∏")
            self.log_info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã –ø–∞–º—è—Ç–∏ ({confirmed_count} —à—Ç.)")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–ª–µ—Ä—Ç—ã: {str(e)}")

    def cleanup_and_close(self, dialog):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        self.force_memory_cleanup()
        if dialog:
            dialog.destroy()

    def configure_memory_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–º—è—Ç–∏"""
        try:
            config = self.data_loader.data_manager.auto_optimizer.config
            
            settings_text = f"""‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ú–Ø–¢–ò –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò

            –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
            ‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: {'–í–ö–õ' if config['auto_cleanup_enabled'] else '–í–´–ö–õ'}
            ‚Ä¢ –ü–æ—Ä–æ–≥ –æ—á–∏—Å—Ç–∫–∏: {config['cleanup_threshold_mb']} MB
            ‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: {config['max_cache_size_mb']} MB
            ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Hit Ratio: {config['min_hit_ratio_for_cleanup']}%

            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã:
            ‚Ä¢ –ü–æ—Ä–æ–≥ –æ—á–∏—Å—Ç–∫–∏: 500-1000 MB
            ‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 1000-2000 MB  
            ‚Ä¢ Hit Ratio: 20-30%

            –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"""
            
            if messagebox.askyesno("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏", settings_text):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                new_config = {
                    'cleanup_threshold_mb': 800,
                    'max_cache_size_mb': 1500,
                    'min_hit_ratio_for_cleanup': 25,
                    'auto_cleanup_enabled': True
                }
                
                self.data_loader.data_manager.auto_optimizer.update_config(new_config)
                
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", 
                    "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                    "–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                    "‚Ä¢ –ü–æ—Ä–æ–≥ –æ—á–∏—Å—Ç–∫–∏: 800 MB\n"
                    "‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 1500 MB\n"
                    "‚Ä¢ Min Hit Ratio: 25%\n"
                    "‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –í–ö–õ"
                )
                self.log_info("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {str(e)}")

