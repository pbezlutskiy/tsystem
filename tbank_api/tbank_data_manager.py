# tbank_api/tbank_data_manager.py
"""
–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Tinkoff API
"""

import pandas as pd
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
import logging
from .tbank_api import TBankAPI
from .tbank_cache import TBankCache, CacheConfig

logger = logging.getLogger(__name__)

class TBankDataManager:
    """–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, api_key: str = None, cache_config: CacheConfig = None):
        self.api = TBankAPI(api_key)
        self.cache = TBankCache(cache_config)
        self.available_symbols = None
    
    def get_historical_data_with_cache(self, symbol: str, 
                                     start_date: str, 
                                     end_date: str = None,
                                     timeframe: str = '1d',
                                     use_cache: bool = True) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç
        from_dt = datetime.strptime(start_date, '%Y-%m-%d')
        to_dt = datetime.strptime(end_date, '%Y-%m-%d') if end_date else datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º FIGI
        figi = self.api._get_figi_by_ticker(symbol)
        if not figi:
            logger.error(f"FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
            return pd.DataFrame()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
        if use_cache:
            cached_data = self.cache.load_candles(figi, timeframe, from_dt, to_dt)
            if cached_data is not None and not cached_data.empty:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {symbol}")
                return cached_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API: {symbol}")
        api_data = self.api.get_historical_data(symbol, start_date, end_date, timeframe)
        
        if api_data.empty:
            return pd.DataFrame()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if use_cache:
            self.cache.save_candles(figi, timeframe, api_data, (from_dt, to_dt))
        
        return api_data
    
    def get_instruments_with_cache(self, instrument_type: str = None, 
                                 force_refresh: bool = False) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = instrument_type or "all"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
        if not force_refresh:
            cached_instruments = self.cache.load_instruments(cache_key)
            if cached_instruments is not None and not cached_instruments.empty:
                logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {cache_key}")
                return cached_instruments
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ API: {cache_key}")
        api_instruments = self.api.get_instruments_list(instrument_type)
        
        if api_instruments.empty:
            return pd.DataFrame()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.cache.save_instruments(api_instruments, cache_key)
        
        return api_instruments
    
    def update_data_incrementally(self, symbol: str, 
                                days_back: int = 1,
                                timeframe: str = '1d') -> pd.DataFrame:
        """
        –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–¥–æ–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        fresh_data = self.api.get_historical_data(
            symbol=symbol,
            start_date=start_date.strftime('%Y-%m-%d'),
            end_date=end_date.strftime('%Y-%m-%d'),
            timeframe=timeframe
        )
        
        if fresh_data.empty:
            logger.warning(f"–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return pd.DataFrame()
        
        # –ü–æ–ª—É—á–∞–µ–º FIGI
        figi = self.api._get_figi_by_ticker(symbol)
        if not figi:
            return fresh_data
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        updated_data = self.cache.update_candles_incrementally(
            figi, timeframe, fresh_data
        )
        
        return updated_data
    
    def get_available_symbols_cached(self, force_refresh: bool = False) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if self.available_symbols is None or force_refresh:
            self.available_symbols = self.get_instruments_with_cache(force_refresh=force_refresh)
        return self.available_symbols
    
    def search_instruments_cached(self, query: str) -> pd.DataFrame:
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        symbols_df = self.get_available_symbols_cached()
        if symbols_df.empty:
            return pd.DataFrame()
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–∫–µ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        mask = (symbols_df['symbol'].str.contains(query, case=False, na=False) | 
                symbols_df['name'].str.contains(query, case=False, na=False))
        
        return symbols_df[mask].copy()
    
    def get_cache_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞"""
        return self.cache.get_cache_stats()
    
    def clear_all_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞"""
        self.cache.clear_cache()
        self.available_symbols = None
    
    def is_symbol_available(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞"""
        symbols_df = self.get_available_symbols_cached()
        return not symbols_df.empty and symbol in symbols_df['symbol'].values