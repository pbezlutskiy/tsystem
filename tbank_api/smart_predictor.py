# tbank_api/smart_predictor.py
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import heapq
from datetime import datetime, time
from collections import defaultdict, deque
import threading
import time as time_module
from typing import Dict, List, Tuple, Set, Any
import logging

logger = logging.getLogger(__name__)

class SmartPredictor:
    """–£–º–Ω—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, cache_manager):
        self.cache_manager = cache_manager
        self.access_patterns = defaultdict(lambda: deque(maxlen=1000))
        self.time_patterns = defaultdict(lambda: defaultdict(int))
        self.seasonal_patterns = defaultdict(lambda: defaultdict(int))
        self.popular_symbols = {}
        
        self.prediction_accuracy = 0
        self.total_predictions = 0
        self.successful_predictions = 0
        
        self._start_prediction_engine()
    
    def record_access(self, symbol: str, timeframe: str, timestamp: datetime = None):
        """–ó–∞–ø–∏—Å—å –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        if timestamp is None:
            timestamp = datetime.now()
        
        key = (symbol, timeframe)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ—Å—Ç—É–ø–∞
        self.access_patterns[key].append(timestamp)
        self.popular_symbols[key] = self.popular_symbols.get(key, 0) + 1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        hour = timestamp.hour
        self.time_patterns[key][hour] += 1
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
        day_of_week = timestamp.weekday()
        self.seasonal_patterns[key][day_of_week] += 1
    
    def get_likely_requests(self, hours_ahead: int = 24) -> List[Tuple[Tuple[str, str], float]]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        predictions = []
        current_time = datetime.now()
        
        for (symbol, timeframe), pattern in self.time_patterns.items():
            probability = self._calculate_request_probability(symbol, timeframe, current_time, hours_ahead)
            if probability > 0.3:  # –ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                predictions.append(((symbol, timeframe), probability))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        predictions.sort(key=lambda x: x[1], reverse=True)
        return predictions[:10]  # –¢–æ–ø-10 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    
    def _calculate_request_probability(self, symbol: str, timeframe: str, 
                                     current_time: datetime, hours_ahead: int) -> float:
        """–†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        key = (symbol, timeframe)
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        time_prob = self._analyze_time_pattern(key, current_time, hours_ahead)
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏–π
        freq_prob = self._analyze_frequency_pattern(key)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        combined_prob = (time_prob * 0.6 + freq_prob * 0.4)
        
        return min(combined_prob, 1.0)
    
    def _analyze_time_pattern(self, key: Tuple[str, str], current_time: datetime, hours_ahead: int) -> float:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        hour_patterns = self.time_patterns[key]
        if not hour_patterns:
            return 0.0
        
        total_requests = sum(hour_patterns.values())
        current_hour = current_time.hour
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ N —á–∞—Å–æ–≤
        probability = 0.0
        for hour_offset in range(hours_ahead):
            target_hour = (current_hour + hour_offset) % 24
            hour_prob = hour_patterns.get(target_hour, 0) / total_requests
            probability = max(probability, hour_prob)
        
        return probability
    
    def _analyze_frequency_pattern(self, key: Tuple[str, str]) -> float:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–∞—Å—Ç–æ—Ç—ã"""
        total_requests = self.popular_symbols.get(key, 0)
        if total_requests == 0:
            return 0.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        max_requests = max(self.popular_symbols.values()) if self.popular_symbols else 1
        return total_requests / max_requests
    
    def _start_prediction_engine(self):
        """–ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        def prediction_worker():
            while True:
                try:
                    self._execute_predictions()
                    time_module.sleep(1800)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–≤–∏–∂–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
                    time_module.sleep(300)
        
        thread = threading.Thread(target=prediction_worker, daemon=True)
        thread.start()
    
    def _execute_predictions(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
        likely_requests = self.get_likely_requests(hours_ahead=6)
        
        for (symbol, timeframe), probability in likely_requests:
            if probability > 0.7:  # –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                logger.info(f"üîÆ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {symbol} ({timeframe}) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.1%}")
                try:
                    self.cache_manager.preload_data(symbol, timeframe, days_back=7)
                    self.total_predictions += 1
                    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª–∞—Å—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")

    # –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø GUI:
    
    def get_popular_symbols(self, top_n: int = 10) -> List[Tuple[Tuple[str, str], int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –±–µ—Ä–µ–º —Ç–æ–ø-N
        sorted_symbols = sorted(
            self.popular_symbols.items(), 
            key=lambda x: x[1], 
            reverse=True
        )
        return sorted_symbols[:top_n]
    
    def get_prediction_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        accuracy = (self.successful_predictions / self.total_predictions * 100) if self.total_predictions > 0 else 0
        
        return {
            'total_predictions': self.total_predictions,
            'successful_predictions': self.successful_predictions,
            'prediction_accuracy': accuracy / 100,  # –í –¥–æ–ª—è—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'access_patterns_count': len(self.access_patterns),
            'popular_symbols_count': len(self.popular_symbols)
        }