# tbank_api/ultimate_data_manager.py
"""
–£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
"""

import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import logging
from .tbank_api import TBankAPI
from .tbank_cache import TBankCache, CacheConfig
from .cache_optimizer import SafeCacheOptimizer
from .advanced_analytics import AdvancedCacheAnalytics
from .smart_predictor import SmartPredictor
from .auto_optimizer import AutoOptimizer

logger = logging.getLogger(__name__)

class UltimateTBankDataManager:
    """–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, api_key: str = None):
        self.api = TBankAPI(api_key)
        self.cache = TBankCache()
        self.optimizer = SafeCacheOptimizer()
        self.available_symbols = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        self.analytics = AdvancedCacheAnalytics(self)
        self.predictor = SmartPredictor(self)
        self.auto_optimizer = AutoOptimizer(self)
        
        self.performance_stats = {
            'total_requests': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'optimization_savings_mb': 0.0,
            'predictions_made': 0
        }
        
        logger.info("üöÄ UltimateTBankDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–æ –≤—Å–µ–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!")
    
    def get_historical_data_with_cache(self, symbol: str, 
                                     start_date: str, 
                                     end_date: str = None,
                                     timeframe: str = '1d',
                                     use_cache: bool = True) -> pd.DataFrame:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        """
        self.performance_stats['total_requests'] += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.predictor.record_access(symbol, timeframe)
        
        if not use_cache:
            return self.api.get_historical_data(symbol, start_date, end_date, timeframe)
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç
        from_dt = datetime.strptime(start_date, '%Y-%m-%d')
        to_dt = datetime.strptime(end_date, '%Y-%m-%d') if end_date else datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º FIGI
        figi = self.api._get_figi_by_ticker(symbol)
        if not figi:
            logger.error(f"FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
            return pd.DataFrame()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached_data = self.cache.load_candles(figi, timeframe, from_dt, to_dt)
        if cached_data is not None and not cached_data.empty:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞: {symbol} ({len(cached_data)} –∑–∞–ø–∏—Å–µ–π)")
            self.performance_stats['cache_hits'] += 1
            return cached_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ API: {symbol}")
        self.performance_stats['cache_misses'] += 1
        
        api_data = self.api.get_historical_data(symbol, start_date, end_date, timeframe)
        
        if api_data.empty:
            return pd.DataFrame()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        original_size = api_data.memory_usage(deep=True).sum() / 1024 / 1024
        optimized_data = self.optimizer.optimize_dataframe_safe(api_data)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫–æ–Ω–æ–º–∏—é –º–µ—Å—Ç–∞
        optimized_size = optimized_data.memory_usage(deep=True).sum() / 1024 / 1024
        savings = original_size - optimized_size
        if savings > 0:
            self.performance_stats['optimization_savings_mb'] += savings
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
        self.cache.save_candles(figi, timeframe, optimized_data, (from_dt, to_dt))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        self.auto_optimizer.optimize_cache_parameters()
        
        return api_data
    
    def get_comprehensive_analytics(self) -> Dict[str, Any]:
        """–í—Å–µ–æ–±—ä–µ–º–ª—é—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        cache_stats = self.cache.get_cache_stats()
        performance_stats = self.get_performance_stats()
        trends = self.analytics.get_performance_trends()
        
        return {
            **cache_stats,
            **performance_stats,
            **trends,
            'optimization_level': 'ultimate',
            'status': 'active',
            'features': {
                'smart_predictions': True,
                'advanced_analytics': True,
                'auto_optimization': True,
                'performance_monitoring': True
            }
        }
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ...