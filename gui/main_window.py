# ===== –°–ï–ö–¶–ò–Ø 16: –ì–õ–ê–í–ù–û–ï –û–ö–ù–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from typing import Optional
import matplotlib
matplotlib.use('TkAgg')
from datetime import datetime
import pandas as pd
import numpy as np

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from core.trading_system import SeikotaTradingSystem
from core.visualizer import ResultsVisualizer
from utils.data_loader import load_price_data_from_file
from utils.analytics import analyze_performance
from utils.error_handler import with_error_handling

# –ò–º–ø–æ—Ä—Ç –≤–∫–ª–∞–¥–æ–∫
from gui.tabs import (
    PriceTab, CapitalTab, PositionTab, ReturnsTab, 
    CorrelationTab, TradesTab, StatsTab, CompareTab, RiskTab,
    RiskAnalysisTab
)

from gui.components import FileBrowser, ResultsComboBox, StyledButton

# ‚úÖ –î–û–ë–ê–í–¨–¢–ï –ü–û–°–õ–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ò–ú–ü–û–†–¢–û–í:
try:
    from gui.tabs.instruments_tab_working import InstrumentsTabWorking as InstrumentsTab
    INSTRUMENTS_AVAILABLE = True
    print("‚úÖ –†–∞–±–æ—á–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    print(f"‚ÑπÔ∏è –†–∞–±–æ—á–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    INSTRUMENTS_AVAILABLE = False


# üîß –ü–´–¢–ê–ï–ú–°–Ø –ò–ú–ü–û–†–¢–ò–†–û–í–ê–¢–¨ –ú–û–î–£–õ–¨ –¢-–ë–ê–ù–ö–ê
try:
    from tbank_api.tbank_gui import TBankApiTab
    TBANK_AVAILABLE = True
    print("‚úÖ –ú–æ–¥—É–ª—å –¢-–±–∞–Ω–∫–∞ API —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    print(f"‚ÑπÔ∏è –ú–æ–¥—É–ª—å –¢-–±–∞–Ω–∫–∞ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è –¢-–±–∞–Ω–∫–∞ API: {e}")

class TradingSystemGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –°–µ–π–∫–æ—Ç—ã - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –ø–æ –ö–µ–ª–ª–∏")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f0f0f0')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        self.system = SeikotaTradingSystem(initial_capital=100000)
        self.visualizer = ResultsVisualizer()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.data_file = tk.StringVar()
        self.initial_capital = tk.DoubleVar(value=100000)
        self.initial_f = tk.DoubleVar(value=0.1)
        self.risk_per_trade = tk.DoubleVar(value=0.01)
        self.use_multi_timeframe = tk.BooleanVar(value=True)
        self.use_dynamic_risk = tk.BooleanVar(value=True)
        self.use_realistic = tk.BooleanVar(value=False)
        self.selected_result = tk.StringVar()
        
        # üÜï –î–õ–Ø API –î–ê–ù–ù–´–•
        self.current_api_data = None
        
        # üÜï –ù–û–í–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø: –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        self.risk_management_enabled = tk.BooleanVar(value=True)
        
        # –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_type = tk.StringVar(value='multi_timeframe')
        self.supertrend_atr_period = tk.IntVar(value=10)
        self.supertrend_multiplier = tk.DoubleVar(value=3.0)
        
        # üÜï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò
        self.stop_loss_atr = tk.DoubleVar(value=2.0)
        self.take_profit_atr = tk.DoubleVar(value=3.0)
        self.trailing_stop_enabled = tk.BooleanVar(value=False)
        self.trailing_stop_atr = tk.DoubleVar(value=2.5)
        self.break_even_enabled = tk.BooleanVar(value=True)
        self.max_position_risk = tk.DoubleVar(value=0.02)
        self.time_stop_days = tk.IntVar(value=5)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        self.tabs = {}
        
        # üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ Pylint
        self.performance_stats = {}
        self._cache_stats = {}
        self.active_orders = {}
        
        self.setup_gui()

    def initialize_tabs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs['price'] = PriceTab(self.notebook, self.visualizer)
        self.tabs['capital'] = CapitalTab(self.notebook, self.visualizer)
        self.tabs['position'] = PositionTab(self.notebook, self.visualizer)
        self.tabs['returns'] = ReturnsTab(self.notebook, self.visualizer)
        self.tabs['correlation'] = CorrelationTab(self.notebook, self.visualizer)
        self.tabs['trades'] = TradesTab(self.notebook, self.system)
        self.tabs['stats'] = StatsTab(self.notebook, self.visualizer)
        self.tabs['compare'] = CompareTab(self.notebook, self.visualizer)
        self.tabs['risk'] = RiskTab(self.notebook, self.visualizer)
        self.tabs['risk_analysis'] = RiskAnalysisTab(self.notebook, self.visualizer, self)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –≤ notebook - –ë–ï–ó –≠–ú–û–î–ó–ò
        self.notebook.add(self.tabs['price'].get_frame(), text="–¶–µ–Ω—ã –∏ —Å–∏–≥–Ω–∞–ª—ã")
        self.notebook.add(self.tabs['capital'].get_frame(), text="–ö–∞–ø–∏—Ç–∞–ª")
        self.notebook.add(self.tabs['position'].get_frame(), text="–ü–æ–∑–∏—Ü–∏–∏")
        self.notebook.add(self.tabs['returns'].get_frame(), text="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        self.notebook.add(self.tabs['correlation'].get_frame(), text="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
        self.notebook.add(self.tabs['trades'].get_frame(), text="–°–¥–µ–ª–∫–∏")
        self.notebook.add(self.tabs['stats'].get_frame(), text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.notebook.add(self.tabs['compare'].get_frame(), text="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        self.notebook.add(self.tabs['risk'].get_frame(), text="–†–∏—Å–∫–∏")
        self.notebook.add(self.tabs['risk_analysis'].get_frame(), text="–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")
        
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –í–ö–õ–ê–î–ö–£ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
        if INSTRUMENTS_AVAILABLE:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Tinkoff API
                TOKEN = "t.8HbNCn4L0U9uBmMa5oloBrXCKxnqsTYNVK3f9iJOwDBiQ2lva9kvQ3C-MLgEESHl65ma1q0k0P6aMfS_O_co4g"
                self.instruments_tab = InstrumentsTab(self.notebook, TOKEN)
                self.notebook.add(self.instruments_tab, text="üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                print("‚úÖ –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")

    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, 
                               text="üéØ –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –°–µ–π–∫–æ—Ç—ã - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –ø–æ –ö–µ–ª–ª–∏",
                               font=('Arial', 16, 'bold'),
                               foreground='#2c3e50')
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", padding="10")
        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_frame = ttk.LabelFrame(main_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", padding="10")
        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.rowconfigure(1, weight=1)
        left_frame.columnconfigure(1, weight=1)
        right_frame.columnconfigure(0, weight=1)
        right_frame.rowconfigure(1, weight=1)
        
        self.setup_left_panel(left_frame)
        self.setup_right_panel(right_frame)
        
    def setup_left_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        parent.columnconfigure(1, weight=1)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        ttk.Label(parent, text="–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏:").grid(row=0, column=0, sticky=tk.W, pady=2)
        file_browser = FileBrowser(parent, self.data_file)
        file_browser.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
        ttk.Label(parent, text="–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª ($):").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Entry(parent, textvariable=self.initial_capital).grid(row=1, column=1, sticky=(tk.W, tk.E), pady=2)
        
        ttk.Label(parent, text="–ù–∞—á–∞–ª—å–Ω–æ–µ f:").grid(row=2, column=0, sticky=tk.W, pady=2)
        ttk.Entry(parent, textvariable=self.initial_f).grid(row=2, column=1, sticky=(tk.W, tk.E), pady=2)
        
        ttk.Label(parent, text="–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%):").grid(row=3, column=0, sticky=tk.W, pady=2)
        ttk.Entry(parent, textvariable=self.risk_per_trade).grid(row=3, column=1, sticky=(tk.W, tk.E), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        ttk.Checkbutton(parent, text="–ú—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", 
                    variable=self.use_multi_timeframe).grid(row=4, column=0, columnspan=2, sticky=tk.W, pady=2)
        
        ttk.Checkbutton(parent, text="–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º", 
                    variable=self.use_dynamic_risk).grid(row=5, column=0, columnspan=2, sticky=tk.W, pady=2)
        
        ttk.Checkbutton(parent, text="–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∂–∏–º (–∫–æ–º–∏—Å—Å–∏–∏)", 
                    variable=self.use_realistic).grid(row=6, column=0, columnspan=2, sticky=tk.W, pady=2)
    
        # üÜï –ù–û–í–´–ô –ß–ï–ö–ë–û–ö–°: –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        ttk.Checkbutton(parent, text="üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", 
                        variable=self.risk_management_enabled).grid(row=7, column=0, columnspan=2, sticky=tk.W, pady=2)

        # –í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò
        ttk.Label(parent, text="–°—Ç—Ä–∞—Ç–µ–≥–∏—è:").grid(row=8, column=0, sticky=tk.W, pady=2)
        strategy_frame = ttk.Frame(parent)
        strategy_frame.grid(row=8, column=1, sticky=(tk.W, tk.E), pady=2)

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategies = self.system.get_available_strategies()
        strategy_combo = ttk.Combobox(strategy_frame, textvariable=self.strategy_type, 
                                    values=list(strategies.keys()), state="readonly")
        strategy_combo.pack(side=tk.LEFT, fill=tk.X, expand=True)
        strategy_combo.bind('<<ComboboxSelected>>', self.on_strategy_changed)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Super Trend
        self.supertrend_frame = ttk.LabelFrame(parent, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Super Trend")
        self.supertrend_frame.grid(row=9, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)

        ttk.Label(self.supertrend_frame, text="ATR –ø–µ—Ä–∏–æ–¥:").grid(row=0, column=0, sticky=tk.W, padx=5)
        ttk.Entry(self.supertrend_frame, textvariable=self.supertrend_atr_period, width=8).grid(row=0, column=1, padx=5)

        ttk.Label(self.supertrend_frame, text="–ú–Ω–æ–∂–∏—Ç–µ–ª—å:").grid(row=0, column=2, sticky=tk.W, padx=5)
        ttk.Entry(self.supertrend_frame, textvariable=self.supertrend_multiplier, width=8).grid(row=0, column=3, padx=5)
        
        # üõ°Ô∏è –ü–ê–†–ê–ú–ï–¢–†–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò
        risk_frame = ttk.LabelFrame(parent, text="üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", padding="5")
        risk_frame.grid(row=10, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        
        ttk.Label(risk_frame, text="Stop Loss (ATR):").grid(row=0, column=0, sticky=tk.W, padx=2)
        ttk.Entry(risk_frame, textvariable=self.stop_loss_atr, width=6).grid(row=0, column=1, padx=2)
        
        ttk.Label(risk_frame, text="Take Profit (ATR):").grid(row=0, column=2, sticky=tk.W, padx=2)
        ttk.Entry(risk_frame, textvariable=self.take_profit_atr, width=6).grid(row=0, column=3, padx=2)
        
        ttk.Checkbutton(risk_frame, text="Trailing Stop", 
                    variable=self.trailing_stop_enabled).grid(row=1, column=0, columnspan=2, sticky=tk.W, padx=2)
        
        ttk.Label(risk_frame, text="Trailing (ATR):").grid(row=1, column=2, sticky=tk.W, padx=2)
        ttk.Entry(risk_frame, textvariable=self.trailing_stop_atr, width=6).grid(row=1, column=3, padx=2)
        
        ttk.Checkbutton(risk_frame, text="Break Even Stop", 
                    variable=self.break_even_enabled).grid(row=2, column=0, columnspan=2, sticky=tk.W, padx=2)
        
        ttk.Label(risk_frame, text="Max Position Risk (%):").grid(row=2, column=2, sticky=tk.W, padx=2)
        ttk.Entry(risk_frame, textvariable=self.max_position_risk, width=6).grid(row=2, column=3, padx=2)
        
        ttk.Label(risk_frame, text="Time Stop (days):").grid(row=3, column=0, sticky=tk.W, padx=2)
        ttk.Entry(risk_frame, textvariable=self.time_stop_days, width=6).grid(row=3, column=1, padx=2)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Super Trend
        self.supertrend_frame.grid_remove()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(parent)
        button_frame.grid(row=11, column=0, columnspan=2, pady=20)
        
        StyledButton(button_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", 
                    command=self.run_test).pack(fill=tk.X, pady=2)
        
        StyledButton(button_frame, text="üìà –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", 
                    command=self.update_all_tabs).pack(fill=tk.X, pady=2)
        
        StyledButton(button_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                    command=self.export_results).pack(fill=tk.X, pady=2)
        
        StyledButton(button_frame, text="‚ùì –°–ø—Ä–∞–≤–∫–∞", 
                    command=self.show_help).pack(fill=tk.X, pady=2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ttk.LabelFrame(parent, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", padding="10")
        info_frame.grid(row=12, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)
        
        info_text = """–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –≠–¥–∞ –°–µ–π–∫–æ—Ç—ã:
        ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ö–µ–ª–ª–∏
        ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∏—Å–∫–∞
        ‚Ä¢ –ú—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        ‚Ä¢ Super Trend —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        ‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–µ–∫"""
        
        ttk.Label(info_frame, text=info_text, justify=tk.LEFT, 
                 font=('Arial', 9)).pack(anchor=tk.W)
    
    def setup_right_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        parent.columnconfigure(0, weight=1)
        parent.rowconfigure(1, weight=1)
        
        # –í—ã–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        result_frame = ttk.Frame(parent)
        result_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        result_frame.columnconfigure(0, weight=1)
        
        self.results_combo = ResultsComboBox(result_frame, self.selected_result,
                                        on_select=self.on_result_selected)
        self.results_combo.pack(fill=tk.X)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.notebook = ttk.Notebook(parent)
        self.notebook.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        self.initialize_tabs()
        
        # üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–ö–õ–ê–î–ö–ò API –ü–û–°–õ–ï –û–°–ù–û–í–ù–´–• –í–ö–õ–ê–î–û–ö
        if TBANK_AVAILABLE:
            try:
                self.tabs['tbank_api'] = TBankApiTab(self.notebook, self)
                self.notebook.add(self.tabs['tbank_api'].get_frame(), text="üì° –¢-–±–∞–Ω–∫ API")
                print("‚úÖ –í–∫–ª–∞–¥–∫–∞ –¢-–±–∞–Ω–∫–∞ API —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –¢-–±–∞–Ω–∫–∞ API: {e}")
        
    def update_all_tabs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫"""
        if not self.selected_result.get():
            return
            
        current_result = self.selected_result.get()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≤–∫–ª–∞–¥–æ–∫
        self.tabs['price'].update_plot(current_result)
        self.tabs['capital'].update_plot(current_result)
        self.tabs['position'].update_plot(current_result)
        self.tabs['returns'].update_plot(current_result)
        self.tabs['correlation'].update_plot(current_result)
        self.tabs['trades'].update_trades(current_result)
        self.tabs['stats'].update_stats(current_result)
        self.tabs['risk'].update_plot(current_result)
        
    def on_strategy_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.strategy_type.get() == 'supertrend':
            self.supertrend_frame.grid()
        else:
            self.supertrend_frame.grid_remove()
                    
    def browse_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if filename:
            self.data_file.set(filename)
            
    @with_error_handling
    def run_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ API"""
        
        # === 1. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø ===
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ò–õ–ò –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
        has_file_data = bool(self.data_file.get() and self.data_file.get() != "tbank_api_loaded_data")
        has_api_data = hasattr(self, 'current_api_data') and self.current_api_data is not None
        
        if not has_file_data and not has_api_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        if not self._validate_system_parameters():
            return
        
        # üÜï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –†–ò–°–ö–ê –ü–ï–†–ï–î –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú
        self.apply_risk_parameters()
        
        try:
            # === 2. –ó–ê–ì–†–£–ó–ö–ê –ò –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===
            data = None
            data_source = ""
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if has_api_data:
                data = self.current_api_data.copy()
                data_source = "API –¢-–±–∞–Ω–∫–∞"
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ API –¢-–±–∞–Ω–∫–∞")
            else:
                # –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
                data = load_price_data_from_file(self.data_file.get())
                data_source = f"—Ñ–∞–π–ª–∞ {self.data_file.get()}"
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            from utils.data_loader import validate_price_data
            validation = validate_price_data(data)
            
            if not validation['is_valid']:
                error_msg = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é:\n" + "\n".join(validation['errors'])
                messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", error_msg)
                return
            
            # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if validation['warnings']:
                warning_msg = "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(validation['warnings'])
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", warning_msg)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if len(data) < 50:
                response = messagebox.askyesno(
                    "–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö", 
                    f"–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(data)} –∑–∞–ø–∏—Å–µ–π.\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100-200 –∑–∞–ø–∏—Å–µ–π.\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?"
                )
                if not response:
                    return
            
            # === 3. –ü–û–î–ì–û–¢–û–í–ö–ê –°–ò–°–¢–ï–ú–´ ===
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã
            self.system.initial_capital = self.initial_capital.get()
            self.system.current_capital = self.initial_capital.get()
            
            # üÜï –û–ß–ò–°–¢–ö–ê –ü–†–ï–î–´–î–£–©–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
            if hasattr(self.system, 'clear_caches'):
                self.system.clear_caches()
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
                self.system.trade_history = []
            
            # === 4. –°–û–ë–ò–†–ê–ï–ú –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–°–¢–ê ===
            test_params = self._collect_test_parameters()
            
            # === 5. –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò ===
            
            # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            import time
            start_time = time.time()
            
            # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
            result = self.system.simulate_trading(data, **test_params)
            
            execution_time = time.time() - start_time
            
            # === 6. –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
            if not self._validate_simulation_results(result):
                messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                return
            
            # === 7. –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
            try:
                performance = analyze_performance(result, self.system.initial_capital)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
                return
            
            # === 8. –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            result_name = self._generate_result_name(data_source)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
            self.visualizer.add_simulation_result(result_name, result, performance)
            
            # === 9. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê ===
            self.update_results_combo()
            self.update_all_tabs()
            
            # === 10. –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===
            self._show_success_report(result, performance, execution_time, data_source)
            
        except FileNotFoundError:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.data_file.get()}")
        except pd.errors.EmptyDataError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        except Exception as e:
            # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{str(e)}"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            traceback.print_exc()

    def _validate_system_parameters(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
        if self.initial_capital.get() <= 0:
            checks.append("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ö–µ–ª–ª–∏
        if not (0 < self.initial_f.get() <= 0.5):
            checks.append("–ü–∞—Ä–∞–º–µ—Ç—Ä –ö–µ–ª–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (0, 0.5]")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        if not (0.001 <= self.risk_per_trade.get() <= 0.1):
            checks.append("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.1%, 10%]")
        
        if checks:
            error_msg = "‚ùå –û—à–∏–±–∫–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Å–∏—Å—Ç–µ–º—ã:\n" + "\n".join(f"‚Ä¢ {check}" for check in checks)
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", error_msg)
            return False
        
        return True

    def _collect_test_parameters(self) -> dict:
        """–°–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'initial_f': self.initial_f.get(),
            'risk_per_trade': self.risk_per_trade.get(),
            'use_multi_timeframe': self.use_multi_timeframe.get(),
            'use_dynamic_risk': self.use_dynamic_risk.get(),
            'realistic_mode': self.use_realistic.get(),
            'strategy_type': self.strategy_type.get(),
            'supertrend_atr_period': self.supertrend_atr_period.get(),
            'supertrend_multiplier': self.supertrend_multiplier.get()
        }

    def _validate_simulation_results(self, result: pd.DataFrame) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        if result.empty:
            return False
        
        if 'capital' not in result.columns:
            return False
        
        if len(result) < 10:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö DataFrame
        if hasattr(result, 'attrs') and 'error' in result.attrs:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–ø–∏—Ç–∞–ª–∞
        capital_values = result['capital']
        if (capital_values <= 0).any():
            return False
        
        if capital_values.isna().any():
            return False
        
        return True

    def _generate_result_name(self, data_source: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        from datetime import datetime
        
        strategy_map = {
            'multi_timeframe': 'MA',
            'supertrend': 'ST'
        }
        
        strategy = strategy_map.get(self.strategy_type.get(), 'UNK')
        mode = "REAL" if self.use_realistic.get() else "BASIC"
        timeframe = "MULTI" if self.use_multi_timeframe.get() else "SINGLE"
        risk_mode = "DYN" if self.use_dynamic_risk.get() else "STAT"
        risk_mgmt = "RISK_ON" if self.risk_management_enabled.get() else "RISK_OFF"
        
        timestamp = datetime.now().strftime('%m%d_%H%M')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
        source_prefix = ""
        if "API" in data_source:
            source_prefix = "API_"
        elif "—Ñ–∞–π–ª–∞" in data_source:
            source_prefix = "FILE_"
        
        return f"{source_prefix}{strategy}_{mode}_{timeframe}_{risk_mode}_{risk_mgmt}_{timestamp}"

    def _show_success_report(self, result: pd.DataFrame, performance: dict, execution_time: float, data_source: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        final_capital = result['capital'].iloc[-1]
        total_return = (final_capital - self.system.initial_capital) / self.system.initial_capital * 100
        trades_count = len(self.system.trade_history)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        cache_stats = self.system.get_cache_stats() if hasattr(self.system, 'get_cache_stats') else {'overall_hit_ratio': 0}
        cache_efficiency = cache_stats.get('overall_hit_ratio', 0)
        
        # üÜï –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ï
        risk_status = "–∞–∫—Ç–∏–≤–Ω–∞" if self.risk_management_enabled.get() else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        risk_trades_info = ""
        if self.risk_management_enabled.get() and 'risk_system_enabled' in performance:
            risk_trades = performance.get('total_trades_with_risk', 0)
            risk_trades_info = f"\n‚Ä¢ –°–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {risk_trades}"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_msg = (
            f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üìà –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {data_source}\n"
            f"‚Ä¢ –°–¥–µ–ª–æ–∫: {trades_count}\n"
            f"‚Ä¢ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${final_capital:,.2f}\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%\n"
            f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {performance.get('max_drawdown', 0):.2f}%\n"
            f"‚Ä¢ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: {risk_status}{risk_trades_info}\n\n"
            f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n"
            f"‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫\n"
            f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {cache_efficiency:.1%}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result)}\n\n"
            f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {self._generate_result_name(data_source)}"
        )
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", success_msg)

    def update_results_combo(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results = self.visualizer.get_available_results()
        self.results_combo.update_values(results)
        self.tabs['compare'].update_available_results()
            
    def on_result_selected(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        self.update_all_tabs()
                
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.selected_result.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        filename = filedialog.asksaveasfilename(
            title="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                content = []
                content.append("–≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ –°–ï–ô–ö–û–¢–´")
                content.append("=" * 50)
                content.append(f"–í—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                content.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {self.selected_result.get()}")
                content.append("")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.visualizer.get_detailed_stats(self.selected_result.get())
                content.append(stats)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(content))
                    
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
                
    def show_help(self):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = """üéØ –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ï–ô–ö–û–¢–´ - –°–ü–†–ê–í–ö–ê

        –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:

        üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –ø–æ –ö–µ–ª–ª–∏
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä–æ–±–Ω–æ–≥–æ f –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞
        ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

        ‚ö° –°–¢–†–ê–¢–ï–ì–ò–ò:
        ‚Ä¢ –ú—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–∞—è (MA) - —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –Ω–∞ —Ç—Ä–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
        ‚Ä¢ Super Trend - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–∞—Ö
        ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ —Ä–∏—Å–∫–∞

        üí∏ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        ‚Ä¢ –£—á–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ (–∫–æ–º–∏—Å—Å–∏–∏)
        ‚Ä¢ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
        ‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏

        –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:

        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–∞ CSV
        2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
        5. –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

        –§–û–†–ú–ê–¢ –î–ê–ù–ù–´–•:
        ‚Ä¢ CSV —Ñ–∞–π–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ;
        ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: DATE, CLOSE
        ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: HIGH, LOW, OPEN, VOL

        –ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–°–¢–ï–ú–´:
        ‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª - —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
        ‚Ä¢ –ù–∞—á–∞–ª—å–Ω–æ–µ f - –±–∞–∑–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ö–µ–ª–ª–∏
        ‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤ %"""
        
        help_window = tk.Toplevel(self.root)
        help_window.title("–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ")
        help_window.geometry("600x700")
        help_window.configure(bg='white')
        
        text_widget = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, 
                                              font=('Arial', 10),
                                              padx=10, pady=10)
        text_widget.pack(fill=tk.BOTH, expand=True)
        text_widget.insert(tk.END, help_text)
        text_widget.config(state=tk.DISABLED)

    @with_error_handling
    def apply_risk_parameters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∫ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            if self.risk_management_enabled.get():
                risk_params = {
                    'stop_loss_atr_multiplier': self.stop_loss_atr.get(),
                    'take_profit_atr_multiplier': self.take_profit_atr.get(),
                    'trailing_stop_enabled': self.trailing_stop_enabled.get(),
                    'trailing_stop_atr_multiplier': self.trailing_stop_atr.get(),
                    'break_even_stop': self.break_even_enabled.get(),
                    'max_position_risk': self.max_position_risk.get(),
                    'time_stop_days': self.time_stop_days.get(),
                    'risk_management_enabled': True
                }
                
                if hasattr(self.system, 'update_risk_parameters'):
                    self.system.update_risk_parameters(**risk_params)
            else:
                # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
                if hasattr(self.system, 'update_risk_parameters'):
                    self.system.update_risk_parameters(risk_management_enabled=False)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞: {e}")