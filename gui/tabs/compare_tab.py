# ===== –°–ï–ö–¶–ò–Ø 14: –í–ö–õ–ê–î–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
"""
–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from gui.components import PlotFrame

class CompareTab:
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self, parent, visualizer):
        self.parent = parent
        self.visualizer = visualizer
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.frame = ttk.Frame(self.parent)
        self.frame.columnconfigure(0, weight=1)
        self.frame.rowconfigure(1, weight=1)
        
        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.setup_control_panel()
        
        self.plot_frame = PlotFrame(self.frame)
        self.plot_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        self.plot_frame.show_placeholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    
    def setup_control_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º"""
        control_frame = ttk.Frame(self.frame)
        control_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(control_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–º–∞–∫—Å. 4):").grid(
            row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        # –§—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        self.checkboxes_frame = ttk.Frame(control_frame)
        self.checkboxes_frame.grid(row=0, column=1, sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_btn = ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", 
                                   command=self.update_comparison)
        self.update_btn.grid(row=0, column=2, padx=(10, 0))
        
        self.checkbox_vars = {}
        self.checkboxes = {}
    
    def get_frame(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤–∫–ª–∞–¥–∫–∏"""
        return self.frame
    
    def update_available_results(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        for widget in self.checkboxes_frame.winfo_children():
            widget.destroy()
        
        self.checkbox_vars = {}
        self.checkboxes = {}
        
        available_results = self.visualizer.get_available_results()
        
        if not available_results:
            ttk.Label(self.checkboxes_frame, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                     foreground='gray').grid(row=0, column=0)
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for i, result_name in enumerate(available_results[:6]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 6 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            var = tk.BooleanVar()
            cb = ttk.Checkbutton(self.checkboxes_frame, text=result_name, 
                               variable=var)
            cb.grid(row=0, column=i, padx=(10, 0))
            
            self.checkbox_vars[result_name] = var
            self.checkboxes[result_name] = cb
    
    def get_selected_results(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        selected = []
        for result_name, var in self.checkbox_vars.items():
            if var.get():
                selected.append(result_name)
        return selected[:4]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 4 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    def update_comparison(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        selected_results = self.get_selected_results()
        
        if not selected_results:
            self.plot_frame.show_placeholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return
        
        if len(selected_results) == 1:
            self.plot_frame.show_placeholder("–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            return
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        fig = self.visualizer.plot_comparison_chart(selected_results)
        if fig:
            self.plot_frame.show_plot(fig)