# ===== –°–ï–ö–¶–ò–Ø 12: –í–ö–õ–ê–î–ö–ê –°–ü–ò–°–ö–ê –°–î–ï–õ–û–ö =====
"""
–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Å–¥–µ–ª–∫–∞—Ö
–¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import tkinter as tk
from tkinter import ttk
from tkinter import scrolledtext
import pandas as pd
from gui.components import StatsTextFrame

class TradesTab:
    """–í–∫–ª–∞–¥–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    def __init__(self, parent, trading_system):
        self.parent = parent
        self.trading_system = trading_system
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.frame = ttk.Frame(self.parent)
        self.frame.columnconfigure(0, weight=1)
        self.frame.rowconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Notebook –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.notebook = ttk.Notebook(self.frame)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –í–∫–ª–∞–¥–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å–¥–µ–ª–æ–∫
        self.trades_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.trades_frame, text="üìã –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–¥–µ–ª–æ–∫
        self.stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.stats_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫")
        
        self.setup_trades_tab()
        self.setup_stats_tab()
    
    def setup_trades_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å–¥–µ–ª–æ–∫"""
        self.trades_frame.columnconfigure(0, weight=1)
        self.trades_frame.rowconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        columns = ('‚Ññ', '–í—Ö–æ–¥', '–í—ã—Ö–æ–¥', '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞', '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞', 
                  '–†–∞–∑–º–µ—Ä', 'P&L %', 'P&L $', '–î–ª–∏—Ç.', '–¢–∏–ø')
        
        self.trades_tree = ttk.Treeview(self.trades_frame, columns=columns, show='headings', height=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {
            '‚Ññ': 50, '–í—Ö–æ–¥': 80, '–í—ã—Ö–æ–¥': 80, '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': 90, 
            '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': 90, '–†–∞–∑–º–µ—Ä': 100, 'P&L %': 80, 
            'P&L $': 100, '–î–ª–∏—Ç.': 60, '–¢–∏–ø': 80
        }
        
        for col in columns:
            self.trades_tree.heading(col, text=col)
            self.trades_tree.column(col, width=column_widths.get(col, 100))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.setup_context_menu()
        
        # Scrollbar –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(self.trades_frame, orient=tk.VERTICAL, command=self.trades_tree.yview)
        self.trades_tree.configure(yscrollcommand=scrollbar.set)
        
        self.trades_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
    
    def setup_context_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        self.context_menu = tk.Menu(self.trades_tree, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.copy_selected_data)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", command=self.export_to_csv)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
        self.trades_tree.bind("<Button-3>", self.show_context_menu)
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        item = self.trades_tree.identify_row(event.y)
        if item:
            self.trades_tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)
    
    def copy_selected_data(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        selected_items = self.trades_tree.selection()
        if not selected_items:
            return
        
        copied_data = []
        for item in selected_items:
            values = self.trades_tree.item(item)['values']
            copied_data.append('\t'.join(map(str, values)))
        
        self.trades_tree.clipboard_clear()
        self.trades_tree.clipboard_append('\n'.join(copied_data))
    
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
        try:
            trade_history = self.trading_system.get_trade_history()
            if not trade_history.empty:
                filename = f"trades_export_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv"
                trade_history.to_csv(filename, index=False, encoding='utf-8')
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
    
    def setup_stats_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–¥–µ–ª–æ–∫"""
        self.stats_frame.columnconfigure(0, weight=1)
        self.stats_frame.rowconfigure(0, weight=1)
        
        self.stats_text = StatsTextFrame(self.stats_frame)
        self.stats_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.stats_text.set_placeholder("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def get_frame(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤–∫–ª–∞–¥–∫–∏"""
        return self.frame
    
    def update_trades(self, result_name: str = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–∞—Ö"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.trades_tree.get_children():
            self.trades_tree.delete(item)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        trade_history = self.trading_system.get_trade_history()
        
        if trade_history.empty:
            self.stats_text.set_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")
            return
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        for i, trade in trade_history.iterrows():
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è P&L
            pnl_percent = trade['pnl_percent']
            pnl_absolute = trade['pnl_absolute']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (–¥–ª–∏–Ω–Ω–∞—è/–∫–æ—Ä–æ—Ç–∫–∞—è)
            trade_type = "LONG" if trade.get('trade_type', 'long') == 'long' else "SHORT"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            values = (
                i + 1,  # ‚Ññ
                trade['entry_index'],
                trade['exit_index'],
                f"${trade['entry_price']:.2f}",
                f"${trade['exit_price']:.2f}",
                f"${trade['position_size']:,.0f}",
                f"{pnl_percent:+.2f}%",
                f"${pnl_absolute:+.2f}",
                f"{trade['duration']} –¥–Ω.",
                trade_type
            )
            
            item = self.trades_tree.insert('', tk.END, values=values)
            
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö/—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            tags = ('profit',) if pnl_absolute > 0 else ('loss',) if pnl_absolute < 0 else ('even',)
            self.trades_tree.item(item, tags=tags)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.trades_tree.tag_configure('profit', background='#f0fff0')  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        self.trades_tree.tag_configure('loss', background='#fff0f0')    # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
        self.trades_tree.tag_configure('even', background='#f0f0f0')    # –°–µ—Ä—ã–π
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.update_trades_stats(trade_history)
    
    def update_trades_stats(self, trade_history: pd.DataFrame):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–¥–µ–ª–æ–∫"""
        if trade_history.empty:
            return
        
        try:
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            total_trades = len(trade_history)
            winning_trades = len(trade_history[trade_history['pnl_absolute'] > 0])
            losing_trades = len(trade_history[trade_history['pnl_absolute'] < 0])
            even_trades = len(trade_history[trade_history['pnl_absolute'] == 0])
            win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
            
            total_pnl = trade_history['pnl_absolute'].sum()
            avg_pnl = trade_history['pnl_absolute'].mean()
            
            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            avg_win = (trade_history[trade_history['pnl_absolute'] > 0]['pnl_absolute'].mean() 
                      if winning_trades > 0 else 0)
            avg_loss = (trade_history[trade_history['pnl_absolute'] < 0]['pnl_absolute'].mean() 
                       if losing_trades > 0 else 0)
            
            largest_win = trade_history['pnl_absolute'].max()
            largest_loss = trade_history['pnl_absolute'].min()
            
            gross_profit = (trade_history[trade_history['pnl_absolute'] > 0]['pnl_absolute'].sum() 
                           if winning_trades > 0 else 0)
            gross_loss = (abs(trade_history[trade_history['pnl_absolute'] < 0]['pnl_absolute'].sum()) 
                         if losing_trades > 0 else 0)
            
            profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
            win_loss_ratio = abs(avg_win / avg_loss) if avg_loss != 0 else float('inf')
            
            avg_duration = trade_history['duration'].mean()
            
            # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
            cumulative_pnl = trade_history['pnl_absolute'].cumsum()
            running_max = cumulative_pnl.cummax()
            drawdown = cumulative_pnl - running_max
            max_drawdown = drawdown.min()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = "=" * 60 + "\n"
            stats_text += "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö\n"
            stats_text += "=" * 60 + "\n\n"
            
            stats_text += f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
            stats_text += f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
            stats_text += f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)\n"
            stats_text += f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades} ({100 - win_rate:.1f}%)\n"
            stats_text += f"   –ë–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö: {even_trades}\n"
            stats_text += f"   –û–±—â–∏–π P&L: ${total_pnl:+.2f}\n\n"
            
            stats_text += f"üí∞ –î–û–•–û–î–ù–û–°–¢–¨:\n"
            stats_text += f"   –°—Ä–µ–¥–Ω–∏–π P&L –∑–∞ —Å–¥–µ–ª–∫—É: ${avg_pnl:+.2f}\n"
            stats_text += f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_win:+.2f}\n"
            stats_text += f"   –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${avg_loss:+.2f}\n"
            stats_text += f"   Profit Factor: {profit_factor:.2f}\n"
            stats_text += f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {win_loss_ratio:.2f}\n\n"
            
            stats_text += f"üéØ –≠–ö–°–¢–†–ï–ú–£–ú–´:\n"
            stats_text += f"   –ö—Ä—É–ø–Ω–µ–π—à–∞—è –ø—Ä–∏–±—ã–ª—å: ${largest_win:+.2f}\n"
            stats_text += f"   –ö—Ä—É–ø–Ω–µ–π—à–∏–π —É–±—ã—Ç–æ–∫: ${largest_loss:+.2f}\n"
            stats_text += f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: ${max_drawdown:.2f}\n\n"
            
            stats_text += f"‚è±Ô∏è  –í–†–ï–ú–ï–ù–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n"
            stats_text += f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: {avg_duration:.1f} –¥–Ω–µ–π\n"
            stats_text += f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {trade_history['duration'].min()} –¥–Ω–µ–π\n"
            stats_text += f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {trade_history['duration'].max()} –¥–Ω–µ–π\n"
            
            self.stats_text.set_text(stats_text)
            
        except Exception as e:
            self.stats_text.set_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")