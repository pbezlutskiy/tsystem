import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

try:
    from tbank_api.instrument_service_working import InstrumentServiceWorking
    IMPORT_SUCCESS = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ InstrumentServiceWorking: {e}")
    IMPORT_SUCCESS = False


class InstrumentsTabWorking(ttk.Frame):
    """–†–∞–±–æ—á–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, parent, token):
        super().__init__(parent)
        self.token = token
        
        if not IMPORT_SUCCESS:
            self.show_import_error()
            return
            
        self.service = InstrumentServiceWorking(token)
        self.create_widgets()
        self.load_popular_shares()
    
    def show_import_error(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–º–ø–æ—Ä—Ç–∞"""
        error_frame = ttk.Frame(self)
        error_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        ttk.Label(error_frame, text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π", 
                 font=('Arial', 14, 'bold'), foreground='red').pack(pady=10)
        
        ttk.Label(error_frame, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.", 
                 justify=tk.CENTER).pack(pady=10)
        
        ttk.Button(error_frame, text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", 
                  command=self.retry_import).pack(pady=10)
    
    def retry_import(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏"""
        try:
            global IMPORT_SUCCESS
            from tbank_api.instrument_service_working import InstrumentServiceWorking
            IMPORT_SUCCESS = True
            self.service = InstrumentServiceWorking(self.token)
            
            # –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            for widget in self.winfo_children():
                widget.destroy()
                
            self.create_widgets()
            self.load_popular_shares()
            
        except ImportError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: {e}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not IMPORT_SUCCESS:
            return
            
        main_frame = ttk.Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        title_label = ttk.Label(main_frame, text="üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Tinkoff API", 
                               font=('Arial', 12, 'bold'))
        title_label.pack(pady=5)
        
        status_label = ttk.Label(main_frame, text="‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç", 
                                foreground='green')
        status_label.pack(pady=5)
        
        search_frame = ttk.LabelFrame(main_frame, text="üîç –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", padding=10)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").grid(row=0, column=0, sticky=tk.W)
        self.search_entry = ttk.Entry(search_frame, width=30)
        self.search_entry.grid(row=0, column=1, padx=5)
        self.search_entry.bind('<Return>', lambda e: self.search_instruments())
        
        ttk.Button(search_frame, text="–ù–∞–π—Ç–∏", 
                  command=self.search_instruments).grid(row=0, column=2, padx=5)
        
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        self.shares_frame = ttk.Frame(notebook)
        notebook.add(self.shares_frame, text="üìà –ê–∫—Ü–∏–∏")
        
        self.search_frame = ttk.Frame(notebook)
        notebook.add(self.search_frame, text="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        self.details_frame = ttk.Frame(notebook)
        notebook.add(self.details_frame, text="üìã –î–µ—Ç–∞–ª–∏")
        
        self.create_shares_table()
        self.create_search_table()
        self.create_details_section()
        
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ü–∏–∏", 
                  command=self.load_popular_shares).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API", 
                  command=self.test_connection).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–≠–∫—Å–ø–æ—Ä—Ç", 
                  command=self.export_to_csv).pack(side=tk.RIGHT, padx=5)
    
    def create_shares_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–∫—Ü–∏–π"""
        columns = ('–¢–∏–∫–µ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–õ–æ—Ç', '–í–∞–ª—é—Ç–∞', 'FIGI')
        self.shares_tree = ttk.Treeview(self.shares_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.shares_tree.heading(col, text=col)
            self.shares_tree.column(col, width=100)
        
        scrollbar = ttk.Scrollbar(self.shares_frame, orient=tk.VERTICAL, command=self.shares_tree.yview)
        self.shares_tree.configure(yscrollcommand=scrollbar.set)
        
        self.shares_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.shares_tree.bind('<Double-1>', self.show_instrument_details_from_shares)
    
    def create_search_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        columns = ('–¢–∏–∫–µ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–í–∞–ª—é—Ç–∞', '–õ–æ—Ç')
        self.search_tree = ttk.Treeview(self.search_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.search_tree.heading(col, text=col)
            self.search_tree.column(col, width=120)
        
        scrollbar = ttk.Scrollbar(self.search_frame, orient=tk.VERTICAL, command=self.search_tree.yview)
        self.search_tree.configure(yscrollcommand=scrollbar.set)
        
        self.search_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.search_tree.bind('<Double-1>', self.show_instrument_details_from_search)
    
    def create_details_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        details_text_frame = ttk.Frame(self.details_frame)
        details_text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        ttk.Label(details_text_frame, text="–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", 
                 font=('Arial', 10, 'bold')).pack(anchor=tk.W)
        
        self.details_text = tk.Text(details_text_frame, wrap=tk.WORD, height=20, 
                                   padx=10, pady=10, font=('Arial', 9))
        
        scrollbar = ttk.Scrollbar(details_text_frame, orient=tk.VERTICAL, command=self.details_text.yview)
        self.details_text.configure(yscrollcommand=scrollbar.set)
        
        self.details_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        details_buttons = ttk.Frame(self.details_frame)
        details_buttons.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(details_buttons, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_details).pack(side=tk.LEFT, padx=5)
    
    def load_popular_shares(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π"""
        try:
            self.shares_tree.delete(*self.shares_tree.get_children())
            
            shares_df = self.service.get_popular_russian_shares_working()
            
            for _, row in shares_df.iterrows():
                self.shares_tree.insert('', tk.END, values=(
                    row['Ticker'],
                    row['Name'],
                    row['Lot'],
                    row.get('Currency', 'rub'),
                    row.get('FIGI', '')
                ))
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shares_df)} –∞–∫—Ü–∏–π")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ü–∏–∏: {e}")
    
    def search_instruments(self):
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        try:
            self.search_tree.delete(*self.search_tree.get_children())
            
            results_df = self.service.search_instruments_working(query)
            
            for _, row in results_df.iterrows():
                self.search_tree.insert('', tk.END, values=(
                    row['Ticker'],
                    row['Name'],
                    row['Type'],
                    row.get('Currency', ''),
                    row.get('Lot', 1)
                ))
            
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", f"–ù–∞–π–¥–µ–Ω–æ: {len(results_df)}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def show_instrument_details_from_shares(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ü–∏–π"""
        selection = self.shares_tree.selection()
        if not selection:
            return
        
        item = selection[0]
        values = self.shares_tree.item(item, 'values')
        figi = values[4]  # FIGI –≤ 5-–π –∫–æ–ª–æ–Ω–∫–µ
        
        self.show_instrument_details_by_figi(figi)
    
    def show_instrument_details_from_search(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        selection = self.search_tree.selection()
        if not selection:
            return
        
        item = selection[0]
        values = self.search_tree.item(item, 'values')
        ticker = values[0]
        
        try:
            results_df = self.service.search_instruments_working(ticker)
            if not results_df.empty:
                figi = results_df.iloc[0]['FIGI']
                self.show_instrument_details_by_figi(figi)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏: {e}")
    
    def show_instrument_details_by_figi(self, figi):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ FIGI"""
        try:
            instrument = self.service.get_instrument_by_figi_working(figi)
            if instrument and hasattr(instrument, 'instrument'):
                details = instrument.instrument
                self.display_instrument_details(details)
            else:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    def display_instrument_details(self, instrument):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        self.details_text.config(state=tk.NORMAL)
        self.details_text.delete(1.0, tk.END)
        
        info = f"""üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:

üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {instrument.name}
üè∑Ô∏è –¢–∏–∫–µ—Ä: {instrument.ticker}
üî¢ FIGI: {instrument.figi}
üí∞ –í–∞–ª—é—Ç–∞: {instrument.currency}
üì¶ –õ–æ—Ç: {instrument.lot}
üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã: {instrument.min_price_increment.units}.{instrument.min_price_increment.nano:09d}
üèõÔ∏è –ë–∏—Ä–∂–∞: {instrument.exchange}

‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:
‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è —á–µ—Ä–µ–∑ API: {'‚úÖ –î–ê' if instrument.api_trade_available_flag else '‚ùå –ù–ï–¢'}
‚Ä¢ –ü–æ–∫—É–ø–∫–∞: {'‚úÖ –î–ê' if instrument.buy_available_flag else '‚ùå –ù–ï–¢'}
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞: {'‚úÖ –î–ê' if instrument.sell_available_flag else '‚ùå –ù–ï–¢'}
"""
        
        self.details_text.insert(tk.END, info)
        self.details_text.config(state=tk.DISABLED)
        
        notebook = self.details_frame.master
        notebook.select(self.details_frame)
    
    def clear_details(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        self.details_text.config(state=tk.NORMAL)
        self.details_text.delete(1.0, tk.END)
        self.details_text.config(state=tk.DISABLED)
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            schedules = self.service.get_trading_schedules_working()
            if schedules:
                messagebox.showinfo("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!\n{len(schedules.exchanges)} –±–∏—Ä–∂")
            else:
                messagebox.showwarning("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        try:
            shares_df = self.service.get_popular_russian_shares_working()
            shares_df.to_csv('instruments_export.csv', index=False, encoding='utf-8')
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(shares_df)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    root.title("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    root.geometry("900x600")
    
    TOKEN = "t.8HbNCn4L0U9uBmMa5oloBrXCKxnqsTYNVK3f9iJOwDBiQ2lva9kvQ3C-MLgEESHl65ma1q0k0P6aMfS_O_co4g"
    
    tab = InstrumentsTabWorking(root, TOKEN)
    tab.pack(fill=tk.BOTH, expand=True)
    
    root.mainloop()