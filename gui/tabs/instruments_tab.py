import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
from tbank_api.instrument_service import InstrumentService


class InstrumentsTab(ttk.Frame):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self, parent, token):
        super().__init__(parent)
        self.token = token
        self.service = InstrumentService(token)
        
        self.create_widgets()
        self.load_popular_shares()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–æ–∏—Å–∫
        search_frame = ttk.LabelFrame(main_frame, text="üîç –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", padding=10)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").grid(row=0, column=0, sticky=tk.W)
        self.search_entry = ttk.Entry(search_frame, width=30)
        self.search_entry.grid(row=0, column=1, padx=5)
        self.search_entry.bind('<Return>', lambda e: self.search_instruments())
        
        ttk.Button(search_frame, text="–ù–∞–π—Ç–∏", 
                  command=self.search_instruments).grid(row=0, column=2, padx=5)
        
        # –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        ttk.Label(search_frame, text="–¢–∏–ø:").grid(row=0, column=3, padx=(20, 5))
        self.instrument_type = tk.StringVar(value="all")
        type_combo = ttk.Combobox(search_frame, textvariable=self.instrument_type,
                                 values=["all", "share", "bond", "etf", "currency", "future"],
                                 state="readonly", width=10)
        type_combo.grid(row=0, column=4, padx=5)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏
        self.shares_frame = ttk.Frame(notebook)
        notebook.add(self.shares_frame, text="üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        self.search_frame = ttk.Frame(notebook)
        notebook.add(self.search_frame, text="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å ETF
        self.etfs_frame = ttk.Frame(notebook)
        notebook.add(self.etfs_frame, text="üìä ETF")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏
        self.bonds_frame = ttk.Frame(notebook)
        notebook.add(self.bonds_frame, text="üíµ –û–±–ª–∏–≥–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        self.create_shares_table()
        self.create_search_table()
        self.create_etfs_table()
        self.create_bonds_table()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ü–∏–∏", 
                  command=self.load_popular_shares).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å ETF", 
                  command=self.load_etfs).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–∏", 
                  command=self.load_bonds).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", 
                  command=self.export_to_csv).pack(side=tk.RIGHT, padx=5)
    
    def create_shares_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–∫—Ü–∏–π"""
        # Treeview –¥–ª—è –∞–∫—Ü–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º FIGI –∫–∞–∫ —Å–∫—Ä—ã—Ç—É—é –∫–æ–ª–æ–Ω–∫—É
        columns = ('FIGI', 'Ticker', 'Name', 'Lot', 'Currency', 'Exchange', 'Sector')
        self.shares_tree = ttk.Treeview(self.shares_frame, columns=columns, show='headings', height=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (FIGI —Å–∫—Ä—ã–≤–∞–µ–º)
        for col in columns:
            self.shares_tree.heading(col, text=col)
            if col == 'FIGI':
                self.shares_tree.column(col, width=0, stretch=False)  # –°–∫—Ä—ã—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
            else:
                self.shares_tree.column(col, width=100)
                    
    def create_search_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        columns = ('Ticker', 'Name', 'Instrument Type', 'Currency', 'Exchange', 'API Trade')
        self.search_tree = ttk.Treeview(self.search_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.search_tree.heading(col, text=col)
            self.search_tree.column(col, width=120)
        
        scrollbar = ttk.Scrollbar(self.search_frame, orient=tk.VERTICAL, command=self.search_tree.yview)
        self.search_tree.configure(yscrollcommand=scrollbar.set)
        
        self.search_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.search_tree.bind('<Double-1>', self.show_instrument_details)
    
    def create_etfs_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è ETF"""
        columns = ('Ticker', 'Name', 'Lot', 'Currency', 'Exchange', 'Focus Type')
        self.etfs_tree = ttk.Treeview(self.etfs_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.etfs_tree.heading(col, text=col)
            self.etfs_tree.column(col, width=120)
        
        scrollbar = ttk.Scrollbar(self.etfs_frame, orient=tk.VERTICAL, command=self.etfs_tree.yview)
        self.etfs_tree.configure(yscrollcommand=scrollbar.set)
        
        self.etfs_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.etfs_tree.bind('<Double-1>', self.show_instrument_details)
    
    def create_bonds_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π"""
        columns = ('Ticker', 'Name', 'Lot', 'Currency', 'Exchange', 'Nominal')
        self.bonds_tree = ttk.Treeview(self.bonds_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.bonds_tree.heading(col, text=col)
            self.bonds_tree.column(col, width=120)
        
        scrollbar = ttk.Scrollbar(self.bonds_frame, orient=tk.VERTICAL, command=self.bonds_tree.yview)
        self.bonds_tree.configure(yscrollcommand=scrollbar.set)
        
        self.bonds_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.bonds_tree.bind('<Double-1>', self.show_instrument_details)
    
    def load_popular_shares(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π"""
        try:
            self.shares_tree.delete(*self.shares_tree.get_children())
            
            shares_df = self.service.get_popular_russian_shares()
            
            for _, row in shares_df.iterrows():
                self.shares_tree.insert('', tk.END, values=(
                    row['FIGI'],  # FIGI –∫–∞–∫ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å–∫—Ä—ã—Ç–æ–µ)
                    row['Ticker'],
                    row['Name'],
                    row['Lot'],
                    row['Currency'],
                    row['Exchange'],
                    row.get('Sector', '')
                ))
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shares_df)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ü–∏–∏: {e}")
    
    def search_instruments(self):
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        try:
            self.search_tree.delete(*self.search_tree.get_children())
            
            instrument_type = self.instrument_type.get()
            results_df = self.service.search_instruments(query, instrument_type)
            
            for _, row in results_df.iterrows():
                self.search_tree.insert('', tk.END, values=(
                    row['Ticker'],
                    row['Name'],
                    row['Instrument Type'],
                    row['Currency'],
                    row['Exchange'],
                    '–î–∞' if row['API Trade Available'] else '–ù–µ—Ç'
                ))
            
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", f"–ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(results_df)}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def load_etfs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ ETF"""
        try:
            self.etfs_tree.delete(*self.etfs_tree.get_children())
            
            etfs_df = self.service.etfs_to_dataframe()
            
            for _, row in etfs_df.iterrows():
                self.etfs_tree.insert('', tk.END, values=(
                    row['Ticker'],
                    row['Name'],
                    row['Lot'],
                    row['Currency'],
                    row['Exchange'],
                    row.get('Focus Type', '')
                ))
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(etfs_df)} ETF")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ETF: {e}")
    
    def load_bonds(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π"""
        try:
            self.bonds_tree.delete(*self.bonds_tree.get_children())
            
            bonds_df = self.service.bonds_to_dataframe()
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            bonds_df = bonds_df.head(100)
            
            for _, row in bonds_df.iterrows():
                self.bonds_tree.insert('', tk.END, values=(
                    row['Ticker'],
                    row['Name'],
                    row['Lot'],
                    row['Currency'],
                    row['Exchange'],
                    row.get('Nominal', '')
                ))
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bonds_df)} –æ–±–ª–∏–≥–∞—Ü–∏–π")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–∏: {e}")
    
    def show_instrument_details(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º FIGI"""
        tree = event.widget
        selection = tree.selection()
        if not selection:
            return
        
        item = selection[0]
        values = tree.item(item, 'values')
        figi = values[0]  # FIGI —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        ticker = values[1]  # –¢–∏–∫–µ—Ä –≤—Ç–æ—Ä–æ–µ
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FIGI –¥–ª—è –ø–æ–∏—Å–∫–∞ - —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ
            instrument = self.service.get_instrument_by_figi(figi)
            if instrument and hasattr(instrument, 'instrument'):
                details = instrument.instrument
                self.show_details_window(details)
            else:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {ticker}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏: {e}")
    
    def show_instrument_details(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tree = event.widget
        selection = tree.selection()
        if not selection:
            return
        
        item = selection[0]
        values = tree.item(item, 'values')
        ticker = values[0]
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
            instrument = self.service.get_instrument_by_ticker(ticker)
            if instrument and hasattr(instrument, 'instrument'):
                details = instrument.instrument
                self.show_details_window(details)
            else:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {ticker}\n"
                                    f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏: {e}")
                        
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏
            shares_df = self.service.get_popular_russian_shares()
            shares_df.to_csv('popular_shares.csv', index=False, encoding='utf-8')
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ popular_shares.csv")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
if __name__ == "__main__":
    root = tk.Tk()
    root.title("–¢–µ—Å—Ç –≤–∫–ª–∞–¥–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    root.geometry("800x600")
    
    TOKEN = "t.8HbNCn4L0U9uBmMa5oloBrXCKxnqsTYNVK3f9iJOwDBiQ2lva9kvQ3C-MLgEESHl65ma1q0k0P6aMfS_O_co4g"
    
    tab = InstrumentsTab(root, TOKEN)
    tab.pack(fill=tk.BOTH, expand=True)
    
    root.mainloop()