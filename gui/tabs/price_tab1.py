# ===== –°–ï–ö–¶–ò–Ø 7: –í–ö–õ–ê–î–ö–ê –¶–ï–ù –ò –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í =====
import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import pandas as pd
from datetime import datetime
from gui.components import PlotFrame
from utils.supertrend import calculate_supertrend

class PriceTab:
    """–í–∫–ª–∞–¥–∫–∞ —Ü–µ–Ω –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, parent, visualizer):
        self.parent = parent
        self.visualizer = visualizer
        self.current_fig = None
        self.last_result_name = None
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.frame = ttk.Frame(self.parent)
        self.frame.columnconfigure(0, weight=1)
        self.frame.rowconfigure(1, weight=1)  # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.frame)
        control_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=5)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–æ–º
        left_frame = ttk.Frame(control_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Button(left_frame, text="üìä –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±", 
                  command=self.auto_scale).pack(side=tk.LEFT, padx=2)
        ttk.Button(left_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_plot).pack(side=tk.LEFT, padx=2)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        right_frame = ttk.Frame(control_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.X)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
        ttk.Label(right_frame, text="–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞:").pack(side=tk.LEFT, padx=(10, 2))
        self.timeframe_var = tk.StringVar(value="auto")
        timeframe_combo = ttk.Combobox(right_frame, textvariable=self.timeframe_var, 
                                      values=["auto", "1D", "1W", "1M", "3M", "6M", "1Y"], 
                                      state="readonly", width=5)
        timeframe_combo.pack(side=tk.LEFT, padx=2)
        timeframe_combo.bind('<<ComboboxSelected>>', self.on_timeframe_change)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.show_supertrend = tk.BooleanVar(value=True)
        ttk.Checkbutton(right_frame, text="SuperTrend", 
                       variable=self.show_supertrend,
                       command=self.refresh_current_plot).pack(side=tk.LEFT, padx=5)
        
        self.show_trade_signals = tk.BooleanVar(value=True)
        ttk.Checkbutton(right_frame, text="–°–∏–≥–Ω–∞–ª—ã", 
                       variable=self.show_trade_signals,
                       command=self.refresh_current_plot).pack(side=tk.LEFT, padx=5)
        
        self.show_entries_exits = tk.BooleanVar(value=True)
        ttk.Checkbutton(right_frame, text="–í—Ö–æ–¥—ã/–í—ã—Ö–æ–¥—ã", 
                       variable=self.show_entries_exits,
                       command=self.refresh_current_plot).pack(side=tk.LEFT, padx=5)
        
        self.show_rsi = tk.BooleanVar(value=False)
        ttk.Checkbutton(right_frame, text="RSI", 
                       variable=self.show_rsi,
                       command=self.refresh_current_plot).pack(side=tk.LEFT, padx=5)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Ö
        self.info_frame = ttk.Frame(self.frame)
        self.info_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=2)
        
        self.date_info_label = ttk.Label(self.info_frame, text="–ü–µ—Ä–∏–æ–¥: - | –°–≤–µ—á–µ–π: -")
        self.date_info_label.pack(side=tk.LEFT)
        
        self.zoom_info_label = ttk.Label(self.info_frame, text="–ú–∞—Å—à—Ç–∞–±: –ê–≤—Ç–æ")
        self.zoom_info_label.pack(side=tk.RIGHT)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        self.plot_frame = PlotFrame(self.frame)
        self.plot_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.frame.rowconfigure(1, weight=1)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Ö
        self.setup_mouse_events()
    
    def setup_mouse_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        pass
    
    def on_mouse_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞—Ç—ã"""
        if event.inaxes and self.current_fig and hasattr(self.plot_frame, 'fig_canvas'):
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –¥–∞—Ç—É
                x_date = mdates.num2date(event.xdata).strftime('%d.%m.%Y %H:%M')
                y_value = f"{event.ydata:.2f}" if event.ydata else "-"
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                info_text = f"–î–∞—Ç–∞: {x_date} | –¶–µ–Ω–∞: {y_value}"
                self.zoom_info_label.config(text=info_text)
                
            except (ValueError, TypeError):
                pass
    
    def on_zoom(self, event):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.current_fig and len(self.current_fig.axes) > 0 and hasattr(self.plot_frame, 'fig_canvas'):
            ax = self.current_fig.axes[0]
            xlim = ax.get_xlim()
            
            try:
                start_date = mdates.num2date(xlim[0]).strftime('%d.%m.%Y')
                end_date = mdates.num2date(xlim[1]).strftime('%d.%m.%Y')
                self.zoom_info_label.config(text=f"–ú–∞—Å—à—Ç–∞–±: {start_date} - {end_date}")
            except (ValueError, TypeError):
                self.zoom_info_label.config(text="–ú–∞—Å—à—Ç–∞–±: –ê–≤—Ç–æ")

    def on_timeframe_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"""
        self.refresh_current_plot()
    
    def auto_scale(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        if self.last_result_name:
            self.update_plot(self.last_result_name)
            self.zoom_info_label.config(text="–ú–∞—Å—à—Ç–∞–±: –ê–≤—Ç–æ")

    def save_plot(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª"""
        if self.current_fig:
            try:
                filename = f"trading_chart_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.current_fig.savefig(filename, dpi=300, bbox_inches='tight')
                print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def refresh_current_plot(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        if self.last_result_name:
            self.update_plot(self.last_result_name)
    
    def detect_strategy_type(self, data):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º"""
        if 'supertrend_direction' in data.columns and 'supertrend_line' in data.columns:
            return "Super Trend"
        elif 'ma_fast' in data.columns and 'ma_slow' in data.columns:
            return "–ú—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–∞—è MA"
        elif 'rsi' in data.columns and 'rsi_oversold' in data.columns:
            return "RSI Strategy"
        else:
            return "–ë–∞–∑–æ–≤–∞—è"
    
    def setup_time_axis(self, ax, dates, timeframe="auto"):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dates - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç—ã
        is_datetime_index = (hasattr(dates, 'dtype') and 
                           (np.issubdtype(dates.dtype, np.datetime64) or 
                            hasattr(dates, 'dt'))) or (
                           len(dates) > 0 and hasattr(dates[0], 'year'))
        
        if timeframe == "auto" and is_datetime_index:
            try:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
                date_range = dates.max() - dates.min()
                if hasattr(date_range, 'days'):
                    days_range = date_range.days
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ timedelta, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                    days_range = len(dates) / 24  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                
                if days_range <= 7:
                    # –ù–µ–¥–µ–ª—è –∏–ª–∏ –º–µ–Ω—å—à–µ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–Ω–∏ –∏ –≤—Ä–µ–º—è
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m\n%H:%M'))
                    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
                elif days_range <= 30:
                    # –î–æ –º–µ—Å—è—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–Ω–∏
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
                    ax.xaxis.set_major_locator(mdates.WeekdayLocator(byweekday=0, interval=1))
                elif days_range <= 90:
                    # –î–æ 3 –º–µ—Å—è—Ü–µ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–¥–µ–ª–∏
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
                    ax.xaxis.set_major_locator(mdates.WeekdayLocator(byweekday=0, interval=1))
                else:
                    # –ë–æ–ª–µ–µ 3 –º–µ—Å—è—Ü–µ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ—Å—è—Ü—ã
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
                    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=max(1, int(days_range // 90))))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m.%Y'))
        elif timeframe != "auto" and is_datetime_index:
            # –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
            timeframe_formats = {
                "1D": ('%H:%M', mdates.HourLocator(interval=4)),
                "1W": ('%d.%m', mdates.DayLocator(interval=1)),
                "1M": ('%d.%m', mdates.WeekdayLocator(byweekday=0, interval=1)),
                "3M": ('%b %Y', mdates.MonthLocator(interval=1)),
                "6M": ('%b %Y', mdates.MonthLocator(interval=2)),
                "1Y": ('%b %Y', mdates.MonthLocator(interval=3))
            }
            
            if timeframe in timeframe_formats:
                try:
                    date_format, locator = timeframe_formats[timeframe]
                    ax.xaxis.set_major_formatter(mdates.DateFormatter(date_format))
                    ax.xaxis.set_major_locator(locator)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä—É—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ datetime –∏–Ω–¥–µ–∫—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –º–µ—Ç–∫–∏
        if not is_datetime_index:
            ax.set_xlabel('–ò–Ω–¥–µ–∫—Å –¥–∞–Ω–Ω—ã—Ö')
            # –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{int(x)}'))
        else:
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
        ax.grid(True, alpha=0.3)
        ax.tick_params(axis='x', which='major', labelsize=8)
    
    def calculate_technical_indicators(self, data):
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        indicators = {}
        
        # SuperTrend (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if (self.show_supertrend.get() and 
            'high' in data.columns and 'low' in data.columns):
            try:
                from utils.supertrend import calculate_supertrend
                indicators['supertrend'] = calculate_supertrend(data, atr_period=10, multiplier=3.0)
                print("‚úÖ Super Trend —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Super Trend: {e}")
        
        # RSI (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.show_rsi.get() and 'close' in data.columns:
            try:
                indicators['rsi'] = self.calculate_rsi(data['close'])
                print("‚úÖ RSI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
        
        return indicators
    
    def calculate_rsi(self, prices, period=14):
        """–†–∞—Å—á–µ—Ç RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    def plot_price_and_positions(self, ax, data, indicators, dates):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏–π"""
        strategy_name = self.detect_strategy_type(data)
        ax.set_title(f'–¶–µ–Ω—ã –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({strategy_name})', 
                    fontsize=12, fontweight='bold', pad=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
        self.setup_time_axis(ax, dates, self.timeframe_var.get())
        
        # 1. –§–û–ù–û–í–ê–Ø –ü–û–î–°–í–ï–¢–ö–ê –ü–û–ó–ò–¶–ò–ô
        if 'position_type' in data.columns and self.show_entries_exits.get():
            self._plot_position_background(ax, data, dates)
        
        # 2. –û–°–ù–û–í–ù–ê–Ø –¶–ï–ù–ê –ó–ê–ö–†–´–¢–ò–Ø
        ax.plot(dates, data['close'], label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', 
                color='black', linewidth=1.5, alpha=0.8, zorder=2)
        
        # 3. SUPER TREND –ò–ù–î–ò–ö–ê–¢–û–† (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if (self.show_supertrend.get() and 'supertrend' in indicators and 
            indicators['supertrend'] is not None):
            self._plot_supertrend(ax, indicators['supertrend'], dates)
        
        # 4. –°–ö–û–õ–¨–ó–Ø–©–ò–ï –°–†–ï–î–ù–ò–ï
        self._plot_moving_averages(ax, data, dates, strategy_name)
        
        # 5. –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ (—Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if self.show_entries_exits.get():
            self._plot_trade_signals(ax, data, dates)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        ax.set_ylabel('–¶–µ–Ω–∞ ($)')
        ax.legend(fontsize=8, loc='upper left')
        ax.grid(True, alpha=0.3)
        
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        ax.autoscale(enable=True, axis='both', tight=True)

    def plot_trading_signals(self, ax, data, indicators, dates):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –û–¢–°–¢–£–ü–´ –î–õ–Ø –ó–ê–ì–û–õ–û–í–ö–ê –ò –ü–û–î–ü–ò–°–ï–ô
        ax.set_title('–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã', fontsize=12, fontweight='bold', pad=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
        self.setup_time_axis(ax, dates, self.timeframe_var.get())
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.show_trade_signals.get() and 'signal' in data.columns:
            ax.plot(dates, data['signal'], label='–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª', 
                color='purple', linewidth=2)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.show_trade_signals.get() and 'combined_signal' in data.columns:
            ax.plot(dates, data['combined_signal'], label='–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª', 
                color='orange', linewidth=1, alpha=0.7)
        
        # RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.show_rsi.get():
            rsi_data = None
            if 'rsi' in data.columns:
                rsi_data = data['rsi']
            elif 'rsi' in indicators:
                rsi_data = indicators['rsi']
            
            if rsi_data is not None:
                ax_twin = ax.twinx()
                ax_twin.plot(dates, rsi_data, label='RSI', 
                        color='blue', linewidth=1, alpha=0.7)
                ax_twin.axhline(y=70, color='red', linestyle='--', alpha=0.5, label='–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å')
                ax_twin.axhline(y=30, color='green', linestyle='--', alpha=0.5, label='–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å')
                ax_twin.set_ylabel('RSI', color='blue', labelpad=15)
                ax_twin.set_ylim(0, 100)
                ax_twin.legend(loc='upper right', fontsize=7)
        
        # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –û–¢–°–¢–£–ü–´ –î–õ–Ø –ü–û–î–ü–ò–°–ï–ô –û–°–ï–ô
        ax.set_xlabel('–î–∞—Ç–∞', labelpad=15)
        ax.set_ylabel('–°–∏–≥–Ω–∞–ª', labelpad=15)
        
        if self.show_trade_signals.get():
            # –†–ê–ó–ú–ï–©–ê–ï–ú –õ–ï–ì–ï–ù–î–£ –í–ù–£–¢–†–ò –ì–†–ê–§–ò–ö–ê, –ß–¢–û–ë–´ –ù–ï –ó–ê–ù–ò–ú–ê–õ–ê –ú–ï–°–¢–û –°–í–ï–†–•–£
            ax.legend(loc='upper left', fontsize=8, bbox_to_anchor=(0, 0.98))
        
        ax.grid(True, alpha=0.3)
        
        # –í–ê–ñ–ù–û: –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –î–ò–ê–ü–ê–ó–û–ù –ü–û Y –î–õ–Ø –û–¢–°–¢–£–ü–û–í
        ax.set_ylim(-0.25, 1.25)  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        
        # –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–¢–£–ü–´ –ü–û X
        if len(dates) > 1:
            if hasattr(dates, 'min') and hasattr(dates, 'max'):
                x_padding = (dates.max() - dates.min()) * 0.03  # 3% –æ—Ç—Å—Ç—É–ø –ø–æ X
                ax.set_xlim(dates.min() - x_padding, dates.max() + x_padding)

    def update_plot(self, result_name: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.last_result_name = result_name
        
        if result_name not in self.visualizer.results_history:
            self.plot_frame.show_placeholder("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        data = self.visualizer.results_history[result_name]['results']
        
        if data.empty:
            self.plot_frame.show_placeholder("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        if hasattr(data.index, 'to_pydatetime'):
            dates = data.index
        else:
            try:
                dates = pd.to_datetime(data.index)
                if dates.min().year == 1970:
                    print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞—Ç—ã 1970 –≥–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å")
                    dates = pd.RangeIndex(start=0, stop=len(data))
            except:
                dates = pd.RangeIndex(start=0, stop=len(data))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–∏–æ–¥–µ
        if hasattr(dates, 'min') and hasattr(dates, 'max'):
            if hasattr(dates.min(), 'strftime'):
                start_date = dates.min().strftime('%d.%m.%Y')
                end_date = dates.max().strftime('%d.%m.%Y')
                date_info = f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}"
            else:
                date_info = f"–ü–µ—Ä–∏–æ–¥: –∏–Ω–¥–µ–∫—Å—ã {dates.min()} - {dates.max()}"
        else:
            date_info = "–ü–µ—Ä–∏–æ–¥: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        total_candles = len(data)
        self.date_info_label.config(text=f"{date_info} | –°–≤–µ—á–µ–π: {total_candles}")
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤)
        indicators = self.calculate_technical_indicators(data)
        
        # –°–û–ó–î–ê–ï–ú –ë–û–õ–¨–®–£–Æ –§–ò–ì–£–†–£ –î–õ–Ø –ì–†–ê–§–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 12), 
                                    gridspec_kw={'height_ratios': [1.8, 1]})  # –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        
        # –û—á–∏—â–∞–µ–º –æ—Å–∏ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
        ax1.clear()
        ax2.clear()
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤
        self.plot_price_and_positions(ax1, data, indicators, dates)
        self.plot_trading_signals(ax2, data, indicators, dates)
        
        # –ù–ê–°–¢–†–û–ô–ö–ê –û–¢–°–¢–£–ü–û–í –î–õ–Ø –ì–†–ê–§–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í
        plt.subplots_adjust(
            left=0.07,    # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
            right=0.95,   # –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞  
            bottom=0.06,  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
            top=0.95,     # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
            hspace=0.5    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        )
        
        self.current_fig = fig
        self.plot_frame.show_plot(fig)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        if hasattr(self.plot_frame, 'fig_canvas'):
            canvas = self.plot_frame.fig_canvas
            canvas.mpl_connect('motion_notify_event', self.on_mouse_move)
            canvas.mpl_connect('button_release_event', self.on_zoom)
            canvas.draw()
        
        strategy_type = self.detect_strategy_type(data)
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {strategy_type}, "
            f"SuperTrend: {self.show_supertrend.get()}, "
            f"–°–∏–≥–Ω–∞–ª—ã: {self.show_trade_signals.get()}, "
            f"–í—Ö–æ–¥—ã/–í—ã—Ö–æ–¥—ã: {self.show_entries_exits.get()}, "
            f"RSI: {self.show_rsi.get()}, "
            f"–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞: {self.timeframe_var.get()}")
        
    def _plot_position_background(self, ax, data, dates):
        """–§–æ–Ω–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        position_type = data['position_type'].values
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–∑–∏—Ü–∏–π
        position_changes = np.where(np.diff(position_type) != 0)[0] + 1
        segments = []
        
        if len(position_changes) > 0:
            segments.append((0, position_changes[0], position_type[0]))
            for i in range(len(position_changes) - 1):
                segments.append((position_changes[i], position_changes[i + 1], 
                               position_type[position_changes[i]]))
            segments.append((position_changes[-1], len(data), 
                           position_type[position_changes[-1]]))
        else:
            segments = [(0, len(data), position_type[0])]
        
        # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–∑–∏—Ü–∏–π
        for start_idx, end_idx, pos_type in segments:
            if pos_type == 1:  # LONG –ø–æ–∑–∏—Ü–∏—è
                if hasattr(dates, '__getitem__') and hasattr(dates[0], 'year'):
                    ax.axvspan(dates[start_idx], dates[end_idx - 1], 
                              alpha=0.15, color='green', label='LONG' if start_idx == 0 else "", 
                              zorder=1)
                else:
                    ax.axvspan(start_idx, end_idx - 1, 
                              alpha=0.15, color='green', label='LONG' if start_idx == 0 else "", 
                              zorder=1)
            elif pos_type == -1:  # SHORT –ø–æ–∑–∏—Ü–∏—è
                if hasattr(dates, '__getitem__') and hasattr(dates[0], 'year'):
                    ax.axvspan(dates[start_idx], dates[end_idx - 1], 
                              alpha=0.15, color='red', label='SHORT' if start_idx == 0 else "", 
                              zorder=1)
                else:
                    ax.axvspan(start_idx, end_idx - 1, 
                              alpha=0.15, color='red', label='SHORT' if start_idx == 0 else "", 
                              zorder=1)
    
    def _plot_supertrend(self, ax, supertrend_data, dates):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ SuperTrend –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        direction = supertrend_data['supertrend_direction'].values
        supertrend_line = supertrend_data['supertrend_line'].values
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫–∏ —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        change_points = np.where(np.diff(direction) != 0)[0] + 1
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        segments = []
        if len(change_points) > 0:
            segments.append((0, change_points[0]))
            for i in range(len(change_points) - 1):
                segments.append((change_points[i], change_points[i + 1]))
            segments.append((change_points[-1], len(supertrend_data)))
        else:
            segments = [(0, len(supertrend_data))]
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        for start_idx, end_idx in segments:
            segment_direction = direction[start_idx]
            
            color = 'green' if segment_direction == 1 else 'red'
            label = 'SuperTrend' if start_idx == 0 else ""
            
            if hasattr(supertrend_data.index, '__getitem__') and hasattr(supertrend_data.index[0], 'year'):
                ax.plot(supertrend_data.index[start_idx:end_idx], supertrend_line[start_idx:end_idx],
                       color=color, linewidth=2, label=label, zorder=3)
            else:
                ax.plot(np.arange(start_idx, end_idx), supertrend_line[start_idx:end_idx],
                       color=color, linewidth=2, label=label, zorder=3)
    
    def _plot_moving_averages(self, ax, data, dates, strategy_name):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö"""
        ma_columns = ['ma_fast', 'ma_slow', 'ma_trend']
        ma_colors = ['blue', 'red', 'orange']
        ma_labels = ['MA –ë—ã—Å—Ç—Ä–∞—è', 'MA –ú–µ–¥–ª–µ–Ω–Ω–∞—è', 'MA –¢—Ä–µ–Ω–¥']
        
        for i, ma_col in enumerate(ma_columns):
            if ma_col in data.columns:
                ax.plot(dates, data[ma_col], 
                       label=ma_labels[i], color=ma_colors[i],
                       alpha=0.7, linewidth=1, zorder=2)
    
    def _plot_trade_signals(self, ax, data, dates):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞"""
        if 'entry_signal' in data.columns:
            entry_signals = data[data['entry_signal'] == 1]
            if not entry_signals.empty:
                if hasattr(dates, '__getitem__') and hasattr(dates[0], 'year'):
                    entry_dates = dates[data['entry_signal'] == 1]
                else:
                    entry_dates = np.where(data['entry_signal'] == 1)[0]
                ax.scatter(entry_dates, entry_signals['close'],
                          color='lime', marker='^', s=80, zorder=4,
                          label='–í—Ö–æ–¥', edgecolors='black', linewidth=0.5)
        
        if 'exit_signal' in data.columns:
            exit_signals = data[data['exit_signal'] == 1]
            if not exit_signals.empty:
                if hasattr(dates, '__getitem__') and hasattr(dates[0], 'year'):
                    exit_dates = dates[data['exit_signal'] == 1]
                else:
                    exit_dates = np.where(data['exit_signal'] == 1)[0]
                ax.scatter(exit_dates, exit_signals['close'],
                          color='red', marker='v', s=80, zorder=4,
                          label='–í—ã—Ö–æ–¥', edgecolors='black', linewidth=0.5)

    def get_frame(self):  
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º –≤–∫–ª–∞–¥–∫–∏"""
        return self.frame