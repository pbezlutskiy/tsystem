import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd

class SimpleInstrumentsTab(ttk.Frame):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, parent, token):
        super().__init__(parent)
        self.token = token
        
        self.create_widgets()
        self.load_sample_data()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø", 
                               font=('Arial', 12, 'bold'))
        title_label.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = ttk.Label(main_frame, text="–°–µ—Ä–≤–∏—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                              justify=tk.CENTER)
        info_label.pack(pady=5)
        
        # –ü–æ–∏—Å–∫
        search_frame = ttk.Frame(main_frame)
        search_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT)
        self.search_entry = ttk.Entry(search_frame, width=30)
        self.search_entry.pack(side=tk.LEFT, padx=5)
        self.search_entry.insert(0, "SBER")  # –ü—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        ttk.Button(search_frame, text="–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞", 
                  command=self.test_search).pack(side=tk.LEFT, padx=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ('–¢–∏–∫–µ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–í–∞–ª—é—Ç–∞')
        self.tree = ttk.Treeview(main_frame, columns=columns, show='headings', height=10)
        
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(main_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(button_frame, text="–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                  command=self.test_connection).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_table).pack(side=tk.LEFT, padx=5)
    
    def load_sample_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        sample_data = [
            ('SBER', '–°–±–µ—Ä –ë–∞–Ω–∫', '–ê–∫—Ü–∏—è', 'RUB'),
            ('GAZP', '–ì–∞–∑–ø—Ä–æ–º', '–ê–∫—Ü–∏—è', 'RUB'),
            ('LKOH', '–õ–£–ö–û–ô–õ', '–ê–∫—Ü–∏—è', 'RUB'),
            ('YNDX', '–Ø–Ω–¥–µ–∫—Å', '–ê–∫—Ü–∏—è', 'RUB'),
            ('VTBR', '–ë–∞–Ω–∫ –í–¢–ë', '–ê–∫—Ü–∏—è', 'RUB'),
        ]
        
        for item in sample_data:
            self.tree.insert('', tk.END, values=item)
    
    def test_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
            self.clear_table()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            self.tree.insert('', tk.END, values=(query, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {query}", "–¢–µ—Å—Ç", "RUB"))
            self.tree.insert('', tk.END, values=("TEST", "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ê–∫—Ü–∏—è", "RUB"))
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ–∏—Å–∫ '{query}' –≤—ã–ø–æ–ª–Ω–µ–Ω\n(—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            from tinkoff.invest import Client
            
            with Client(self.token) as client:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                accounts = client.users.get_accounts()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def clear_table(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        for item in self.tree.get_children():
            self.tree.delete(item)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    root = tk.Tk()
    root.title("–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏")
    root.geometry("800x600")
    
    TOKEN = "t.8HbNCn4L0U9uBmMa5oloBrXCKxnqsTYNVK3f9iJOwDBiQ2lva9kvQ3C-MLgEESHl65ma1q0k0P6aMfS_O_co4g"
    
    tab = SimpleInstrumentsTab(root, TOKEN)
    tab.pack(fill=tk.BOTH, expand=True)
    
    root.mainloop()