# ===== –°–ï–ö–¶–ò–Ø: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ =====
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
"""

import logging
import traceback
import functools
from typing import Any, Callable, Dict, Optional
from datetime import datetime

import pandas as pd
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def setup_error_handler_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫"""
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - [%(funcName)s] - %(message)s'
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)

setup_error_handler_logging()

class TradingError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    pass

class DataValidationError(TradingError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class StrategyCalculationError(TradingError):
    """–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    pass

class RiskManagementError(TradingError):
    """–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    pass

class KellyCalculationError(TradingError):
    """–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ö–µ–ª–ª–∏"""
    pass

class PositionSizeError(TradingError):
    """–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    pass

class CacheError(TradingError):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º"""
    pass

class SimulationError(TradingError):
    """–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    pass

def error_handler(logger: logging.Logger = None, 
                 default_return: Any = None,
                 log_level: int = logging.ERROR,
                 capture_traceback: bool = True):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –º–µ—Ç–æ–¥–∞—Ö —Å–∏—Å—Ç–µ–º—ã
    
    Parameters:
    -----------
    logger : logging.Logger, optional
        –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥—É–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä)
    default_return : Any, optional
        –ó–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    log_level : int, optional
        –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ERROR)
    capture_traceback : bool, optional
        –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –ª–∏ traceback (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –∏–ª–∏ –º–æ–¥—É–ª—å–Ω—ã–π
            current_logger = logger or logging.getLogger(func.__module__)
            
            try:
                return func(*args, **kwargs)
                
            except (DataValidationError, StrategyCalculationError, 
                   RiskManagementError, KellyCalculationError,
                   PositionSizeError, CacheError, SimulationError) as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
                error_msg = f"{type(e).__name__} –≤ {func.__name__}: {str(e)}"
                current_logger.log(log_level, error_msg)
                
                if capture_traceback:
                    current_logger.debug(f"Traceback –¥–ª—è {func.__name__}:\n{traceback.format_exc()}")
                
                # –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏ –≤ –æ–±—ä–µ–∫—Ç —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if args and hasattr(args[0], '_errors'):
                    args[0]._errors.append({
                        'method': func.__name__,
                        'error_type': type(e).__name__,
                        'error_message': str(e),
                        'timestamp': datetime.now(),
                        'args': str(args[1:]) if len(args) > 1 else 'None',
                        'kwargs': str(kwargs) if kwargs else 'None'
                    })
                
                return default_return if default_return is not None else safe_fallback(func.__name__, args, kwargs)
                
            except (ValueError, ZeroDivisionError, TypeError, 
                   AttributeError, KeyError, IndexError) as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö Python –æ—à–∏–±–æ–∫
                error_msg = f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ {func.__name__}: {str(e)}"
                current_logger.log(log_level, error_msg)
                
                if capture_traceback:
                    current_logger.debug(f"Traceback –¥–ª—è {func.__name__}:\n{traceback.format_exc()}")
                
                return default_return if default_return is not None else safe_fallback(func.__name__, args, kwargs)
                
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {str(e)}"
                current_logger.log(log_level, error_msg)
                current_logger.error(f"–ü–æ–ª–Ω—ã–π traceback –¥–ª—è {func.__name__}:\n{traceback.format_exc()}")
                
                # –ó–∞–ø–∏—Å—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
                if args and hasattr(args[0], '_errors'):
                    args[0]._errors.append({
                        'method': func.__name__,
                        'error_type': 'CRITICAL',
                        'error_message': str(e),
                        'timestamp': datetime.now(),
                        'traceback': traceback.format_exc(),
                        'args': str(args[1:]) if len(args) > 1 else 'None',
                        'kwargs': str(kwargs) if kwargs else 'None'
                    })
                
                return default_return if default_return is not None else safe_fallback(func.__name__, args, kwargs)
                
        return wrapper
    return decorator

def safe_fallback(method_name: str, args: tuple, kwargs: dict) -> Any:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Parameters:
    -----------
    method_name : str
        –ò–º—è –º–µ—Ç–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    args : tuple
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–æ–¥–∞
    kwargs : dict
        –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–æ–¥–∞
        
    Returns:
    --------
    Any
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    fallback_values = {
        # –ú–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –ö–µ–ª–ª–∏
        'calculate_kelly_fraction': 0.1,
        'calculate_kelly_criterion': 0.1,
        
        # –ú–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π
        'calculate_position_size': 0.0,
        'calculate_optimal_position': 0.0,
        'fast_position_size': 0.0,
        
        # –ú–µ—Ç–æ–¥—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        'calculate_atr': pd.Series([0.0]),
        'calculate_sma': pd.Series([0.0]),
        'calculate_ema': pd.Series([0.0]),
        'calculate_rsi': pd.Series([50.0]),
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        'multi_timeframe_signal': pd.DataFrame(),
        'supertrend_strategy': pd.DataFrame(),
        'vectorized_signal_calculation': pd.DataFrame(),
        
        # –°–∏–º—É–ª—è—Ü–∏–∏
        'simulate_trading': _create_fallback_dataframe(args),
        '_optimized_simulation_loop': _create_fallback_dataframe(args),
        'run_backtest': _create_fallback_dataframe(args),
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        'dynamic_risk_management': 0.01,
        'calculate_risk_level': 0.01,
        'adjust_risk_parameters': 0.01,
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        'get_from_cache': None,
        'save_to_cache': False,
        
        # –û–±—â–∏–µ
        'get_performance_report': {},
        'get_cache_stats': {},
        'get_trade_history': pd.DataFrame(),
        'get_available_strategies': {'multi_timeframe': '–ú—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–∞—è (MA)', 'supertrend': 'Super Trend'}
    }
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback
    logger.warning(f"üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–∞: {method_name}")
    
    return fallback_values.get(method_name, None)

def _create_fallback_dataframe(args: tuple) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ DataFrame –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–∏–º—É–ª—è—Ü–∏–∏
    
    Parameters:
    -----------
    args : tuple
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–æ–¥–∞
        
    Returns:
    --------
    pd.DataFrame
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π DataFrame —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    """
    try:
       
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        original_data = None
        for arg in args:
            if isinstance(arg, pd.DataFrame) and not arg.empty:
                original_data = arg
                break
            elif hasattr(arg, 'price_data') and isinstance(arg.price_data, pd.DataFrame):
                original_data = arg.price_data
                break
        
        if original_data is not None:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
            safe_data = original_data.copy().iloc[:min(100, len(original_data))]
        else:
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π DataFrame
            safe_data = pd.DataFrame({
                'close': [100.0] * 10
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        safe_data['capital'] = 100000.0
        safe_data['kelly_f'] = 0.1
        safe_data['position_size'] = 0.0
        safe_data['risk_level'] = 0.01
        safe_data['drawdown'] = 0.0
        safe_data['position_type'] = 0
        safe_data['signal'] = 0
        
        return safe_data
        
    except Exception as e:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback
        return pd.DataFrame({'capital': [100000.0]})

def with_error_handling(func: Callable = None, **decorator_kwargs):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
    
    Parameters:
    -----------
    func : Callable, optional
        –î–µ–∫–æ—Ä–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    **decorator_kwargs
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è error_handler
        
    Returns:
    --------
    Callable
        –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    if func is None:
        return lambda f: error_handler(**decorator_kwargs)(f)
    return error_handler(**decorator_kwargs)(func)

def retry_on_error(max_retries: int = 3, delay: float = 1.0, 
                  exceptions: tuple = (Exception,)):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Parameters:
    -----------
    max_retries : int, optional
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    delay : float, optional
        –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)
    exceptions : tuple, optional
        –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            last_exception = None
            
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except exceptions as e:
                    last_exception = e
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å –≤ {func.__name__}: {e}")
                    
                    if attempt < max_retries - 1:
                        import time
                        time.sleep(delay)
                    else:
                        logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å –≤ {func.__name__}")
                        raise last_exception
            
            # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
            return safe_fallback(func.__name__, args, kwargs)
        return wrapper
    return decorator

class ErrorCollector:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.errors = []
        self.error_stats = {}
    
    def add_error(self, method_name: str, error: Exception, 
                 args: tuple = None, kwargs: dict = None):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        
        Parameters:
        -----------
        method_name : str
            –ò–º—è –º–µ—Ç–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        error : Exception
            –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        args : tuple, optional
            –ê—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–æ–¥–∞
        kwargs : dict, optional
            –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–æ–¥–∞
        """
        error_info = {
            'method': method_name,
            'error_type': type(error).__name__,
            'error_message': str(error),
            'timestamp': datetime.now(),
            'args': str(args) if args else 'None',
            'kwargs': str(kwargs) if kwargs else 'None',
            'traceback': traceback.format_exc()
        }
        
        self.errors.append(error_info)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        error_type = type(error).__name__
        if error_type in self.error_stats:
            self.error_stats[error_type] += 1
        else:
            self.error_stats[error_type] = 1
    
    def get_error_summary(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—à–∏–±–∫–∞–º
        
        Returns:
        --------
        dict
            –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        """
        return {
            'total_errors': len(self.errors),
            'error_types': self.error_stats,
            'recent_errors': self.errors[-10:] if self.errors else [],
            'most_common_error': max(self.error_stats, key=self.error_stats.get) if self.error_stats else 'None'
        }
    
    def clear_errors(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫"""
        self.errors.clear()
        self.error_stats.clear()
    
    def save_errors_to_file(self, filename: str = "trading_errors.log"):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª
        
        Parameters:
        -----------
        filename : str, optional
            –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=== –õ–û–ì –û–®–ò–ë–û–ö –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ ===\n\n")
                
                for i, error in enumerate(self.errors, 1):
                    f.write(f"–û–®–ò–ë–ö–ê #{i}:\n")
                    f.write(f"–ú–µ—Ç–æ–¥: {error['method']}\n")
                    f.write(f"–¢–∏–ø: {error['error_type']}\n")
                    f.write(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error['error_message']}\n")
                    f.write(f"–í—Ä–µ–º—è: {error['timestamp']}\n")
                    f.write(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {error['args']}\n")
                    f.write(f"KWArgs: {error['kwargs']}\n")
                    f.write(f"Traceback:\n{error['traceback']}\n")
                    f.write("-" * 50 + "\n")
                
                f.write(f"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                f.write(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(self.errors)}\n")
                for error_type, count in self.error_stats.items():
                    f.write(f"{error_type}: {count}\n")
            
            logger.info(f"‚úÖ –û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª: {e}")

def validate_method_arguments(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–≤
    
    Parameters:
    -----------
    func : Callable
        –î–µ–∫–æ—Ä–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        
    Returns:
    --------
    Callable
        –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs) -> Any:
        try:
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            for i, arg in enumerate(args):
                if isinstance(arg, (int, float)) and not np.isfinite(arg):
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ {i}: {arg}")
            
            for key, value in kwargs.items():
                if isinstance(value, (int, float)) and not np.isfinite(value):
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ {key}: {value}")
            
            return func(*args, **kwargs)
            
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ {func.__name__}: {e}")
            return safe_fallback(func.__name__, args, kwargs)
    
    return wrapper

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫
global_error_collector = ErrorCollector()

def get_global_error_collector() -> ErrorCollector:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫
    
    Returns:
    --------
    ErrorCollector
        –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫
    """
    return global_error_collector

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    
    @with_error_handling
    def test_method(x, y):
        """–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞"""
        if y == 0:
            raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        return x / y
    
    @retry_on_error(max_retries=2, delay=0.1)
    def test_retry_method():
        """–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        import random
        if random.random() < 0.7:
            raise ValueError("–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞!")
        return "–£—Å–ø–µ—Ö!"
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    result1 = test_method(10, 0)  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π: {result1}")
    
    result2 = test_method(10, 2)  # –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –æ—à–∏–±–∫–∏: {result2}")
    
    # –¢–µ—Å—Ç retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    try:
        result3 = test_retry_method()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç retry: {result3}")
    except Exception as e:
        print(f"Retry –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
    summary = global_error_collector.get_error_summary()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫: {summary}")