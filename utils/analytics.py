# ===== –°–ï–ö–¶–ò–Ø 5: –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –†–ê–°–ß–ï–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====
"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import numpy as np
import pandas as pd
from typing import Dict, Any, List

def analyze_performance(results: pd.DataFrame, initial_capital: float) -> Dict[str, Any]:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    capital = results['capital']

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    total_return_pct = (capital.iloc[-1] - initial_capital) / initial_capital * 100

    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
    cumulative_max = capital.cummax()
    drawdown = (cumulative_max - capital) / cumulative_max
    max_drawdown_pct = drawdown.max() * 100
    avg_drawdown = drawdown.mean() * 100

    # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –®–∞—Ä–ø–∞
    returns = capital.pct_change().dropna()
    
    if len(returns) > 0 and returns.std() > 0:
        sharpe = returns.mean() / returns.std() * np.sqrt(252)
    else:
        sharpe = 0

    volatility = returns.std() * np.sqrt(252) * 100 if len(returns) > 0 else 0
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
    avg_risk = results['risk_level'].mean() * 100 if 'risk_level' in results.columns else 1.0
    risk_adjustments = len(results[results['risk_level'] != results['risk_level'].iloc[0]]) if 'risk_level' in results.columns else 0

    # üÜï –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
    risk_metrics = analyze_risk_management(results)

    # –°–±–æ—Ä –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Å–ª–æ–≤–∞—Ä—å
    performance = {
        'total_return': total_return_pct,
        'max_drawdown': max_drawdown_pct,
        'sharpe_ratio': sharpe,
        'final_capital': capital.iloc[-1],
        'volatility': volatility,
        'avg_drawdown': avg_drawdown,
        'avg_kelly_f': results['kelly_f'].mean() if 'kelly_f' in results.columns else 0,
        'avg_position_size': results['position_size'].mean() if 'position_size' in results.columns else 0,
        'avg_risk': avg_risk,
        'risk_adjustments': risk_adjustments,
        'initial_capital': initial_capital,
        # üÜï –ú–ï–¢–†–ò–ö–ò –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
        **risk_metrics
    }

    return performance

# üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏

def analyze_risk_management(results: pd.DataFrame) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    """
    risk_metrics = {
        'risk_system_enabled': False,
        'total_trades_with_risk': 0,
        'stop_loss_trades': 0,
        'take_profit_trades': 0,
        'trailing_stop_trades': 0,
        'time_stop_trades': 0,
        'avg_stop_loss_pnl': 0,
        'avg_take_profit_pnl': 0,
        'stop_loss_efficiency': 0,
        'risk_reward_ratio': 0,
        'win_rate_with_stops': 0
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∏—Å–∫–∞—Ö
    if 'exit_reason' not in results.columns:
        return risk_metrics
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π –≤—ã—Ö–æ–¥–∞
    exit_trades = results[results['exit_reason'] != '']
    if exit_trades.empty:
        return risk_metrics
    
    risk_metrics['risk_system_enabled'] = True
    risk_metrics['total_trades_with_risk'] = len(exit_trades)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤
    risk_exit_reasons = ['stop_loss', 'take_profit', 'trailing_stop', 'time_stop']
    
    for reason in risk_exit_reasons:
        reason_trades = exit_trades[exit_trades['exit_reason'] == reason]
        count = len(reason_trades)
        
        if count > 0:
            risk_metrics[f'{reason}_trades'] = count
            
            # –°—Ä–µ–¥–Ω–∏–π PnL –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –≤—ã—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π PnL –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –Ω–µ—Ç)
            if 'pnl_percent' in reason_trades.columns:
                avg_pnl = reason_trades['pnl_percent'].mean()
            elif 'pnl_absolute' in reason_trades.columns and 'capital_before' in reason_trades.columns:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π PnL –Ω–∞ –ª–µ—Ç—É
                pnl_pct = (reason_trades['pnl_absolute'] / reason_trades['capital_before']) * 100
                avg_pnl = pnl_pct.mean()
            else:
                avg_pnl = 0
                
            risk_metrics[f'avg_{reason}_pnl'] = avg_pnl
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
    stop_loss_trades = exit_trades[exit_trades['exit_reason'] == 'stop_loss']
    if len(stop_loss_trades) > 0:
        # –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ —Å–¥–µ–ª–æ–∫
        risk_metrics['stop_loss_efficiency'] = len(stop_loss_trades) / len(exit_trades) * 100
        
        # –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º
        if 'pnl_percent' in stop_loss_trades.columns:
            avg_stop_loss = stop_loss_trades['pnl_percent'].mean()
        elif 'pnl_absolute' in stop_loss_trades.columns and 'capital_before' in stop_loss_trades.columns:
            pnl_pct = (stop_loss_trades['pnl_absolute'] / stop_loss_trades['capital_before']) * 100
            avg_stop_loss = pnl_pct.mean()
        else:
            avg_stop_loss = 0
            
        risk_metrics['avg_stop_loss_pnl'] = avg_stop_loss
    
    # Risk-Reward Ratio
    take_profit_trades = exit_trades[exit_trades['exit_reason'] == 'take_profit']
    if len(take_profit_trades) > 0 and len(stop_loss_trades) > 0:
        if 'pnl_percent' in take_profit_trades.columns:
            avg_profit = take_profit_trades['pnl_percent'].mean()
        elif 'pnl_absolute' in take_profit_trades.columns and 'capital_before' in take_profit_trades.columns:
            pnl_pct = (take_profit_trades['pnl_absolute'] / take_profit_trades['capital_before']) * 100
            avg_profit = pnl_pct.mean()
        else:
            avg_profit = 0
            
        avg_loss = abs(risk_metrics['avg_stop_loss_pnl'])
        
        if avg_loss > 0:
            risk_metrics['risk_reward_ratio'] = avg_profit / avg_loss
    
    # Win Rate —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
    if 'pnl_percent' in exit_trades.columns:
        winning_risk_trades = exit_trades[exit_trades['pnl_percent'] > 0]
    elif 'pnl_absolute' in exit_trades.columns:
        winning_risk_trades = exit_trades[exit_trades['pnl_absolute'] > 0]
    else:
        winning_risk_trades = pd.DataFrame()
        
    if len(exit_trades) > 0:
        risk_metrics['win_rate_with_stops'] = len(winning_risk_trades) / len(exit_trades) * 100
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è PnL –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã—Ö–æ–¥–∞
    pnl_data = {}
    for reason in risk_exit_reasons:
        reason_trades = exit_trades[exit_trades['exit_reason'] == reason]
        if len(reason_trades) > 0:
            if 'pnl_percent' in reason_trades.columns:
                pnl_data[reason] = {
                    'mean': reason_trades['pnl_percent'].mean(),
                    'std': reason_trades['pnl_percent'].std(),
                    'count': len(reason_trades)
                }
            elif 'pnl_absolute' in reason_trades.columns and 'capital_before' in reason_trades.columns:
                pnl_pct = (reason_trades['pnl_absolute'] / reason_trades['capital_before']) * 100
                pnl_data[reason] = {
                    'mean': pnl_pct.mean(),
                    'std': pnl_pct.std(),
                    'count': len(reason_trades)
                }
    
    if pnl_data:
        risk_metrics['pnl_by_reason'] = pnl_data
    
    return risk_metrics

# üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏
def analyze_trades_with_risk_management(trade_history: pd.DataFrame) -> Dict[str, Any]:
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ —Å —É—á–µ—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
    
    Parameters:
    -----------
    trade_history : pd.DataFrame
        –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ exit_reason, stop_loss, take_profit
        
    Returns:
    --------
    dict
        –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º —Å —Ä–∏—Å–∫–∞–º–∏
    """
    if trade_history.empty:
        return {}
    
    analysis = {
        'total_trades': len(trade_history),
        'trades_with_risk_data': 0,
        'exit_reason_stats': {},
        'avg_risk_metrics': {},
        'risk_efficiency': {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∏—Å–∫–∞—Ö
    if 'exit_reason' not in trade_history.columns:
        return analysis
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã—Ö–æ–¥–∞
    exit_reasons = trade_history['exit_reason'].value_counts()
    analysis['exit_reason_stats'] = exit_reasons.to_dict()
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤
    for reason in exit_reasons.index:
        reason_trades = trade_history[trade_history['exit_reason'] == reason]
        
        reason_stats = {
            'count': len(reason_trades),
            'avg_pnl': reason_trades['pnl_percent'].mean() if 'pnl_percent' in reason_trades.columns else 0,
            'win_rate': len(reason_trades[reason_trades['pnl_percent'] > 0]) / len(reason_trades) * 100 if len(reason_trades) > 0 else 0,
            'avg_duration': reason_trades['duration'].mean() if 'duration' in reason_trades.columns else 0
        }
        
        analysis['risk_efficiency'][reason] = reason_stats
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    if 'stop_loss' in trade_history.columns and 'take_profit' in trade_history.columns:
        valid_trades = trade_history[
            (trade_history['stop_loss'] > 0) & 
            (trade_history['take_profit'] > 0) &
            (trade_history['entry_price'] > 0)
        ]
        
        if not valid_trades.empty:
            # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Ä–∏–≤–æ—Ä–¥ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
            risk_rewards = []
            for _, trade in valid_trades.iterrows():
                if trade['position_type'] == 1:  # LONG
                    risk = trade['entry_price'] - trade['stop_loss']
                    reward = trade['take_profit'] - trade['entry_price']
                else:  # SHORT
                    risk = trade['stop_loss'] - trade['entry_price']
                    reward = trade['entry_price'] - trade['take_profit']
                
                if risk > 0:
                    risk_rewards.append(reward / risk)
            
            if risk_rewards:
                analysis['avg_risk_metrics'] = {
                    'avg_risk_reward_ratio': np.mean(risk_rewards),
                    'median_risk_reward_ratio': np.median(risk_rewards),
                    'min_risk_reward_ratio': np.min(risk_rewards),
                    'max_risk_reward_ratio': np.max(risk_rewards)
                }
    
    analysis['trades_with_risk_data'] = len(trade_history[trade_history['exit_reason'] != ''])
    
    return analysis

def calculate_trade_metrics(trade_history: pd.DataFrame) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ —Å–¥–µ–ª–∫–∞–º"""
    if trade_history.empty:
        return {}
    
    metrics = {
        'total_trades': len(trade_history),
        'winning_trades': len(trade_history[trade_history['pnl_absolute'] > 0]),
        'losing_trades': len(trade_history[trade_history['pnl_absolute'] < 0]),
        'total_pnl': trade_history['pnl_absolute'].sum(),
        'avg_pnl_per_trade': trade_history['pnl_absolute'].mean(),
        'win_rate': len(trade_history[trade_history['pnl_absolute'] > 0]) / len(trade_history) * 100,
        'avg_win': trade_history[trade_history['pnl_absolute'] > 0]['pnl_absolute'].mean(),
        'avg_loss': trade_history[trade_history['pnl_absolute'] < 0]['pnl_absolute'].mean(),
        'largest_win': trade_history['pnl_absolute'].max(),
        'largest_loss': trade_history['pnl_absolute'].min(),
        'avg_trade_duration': trade_history['duration'].mean()
    }
    
    # Profit Factor
    gross_profit = trade_history[trade_history['pnl_absolute'] > 0]['pnl_absolute'].sum()
    gross_loss = abs(trade_history[trade_history['pnl_absolute'] < 0]['pnl_absolute'].sum())
    metrics['profit_factor'] = gross_profit / gross_loss if gross_loss > 0 else float('inf')
    
    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ê–ù–ê–õ–ò–ó –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ö –û–°–ù–û–í–ù–´–ú –ú–ï–¢–†–ò–ö–ê–ú
    risk_analysis = analyze_trades_with_risk_management(trade_history)
    metrics['risk_analysis'] = risk_analysis
    
    return metrics

# üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∏—Å–∫–∞–º
def generate_risk_report(performance: Dict[str, Any], trade_metrics: Dict[str, Any]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
    
    Parameters:
    -----------
    performance : dict
        –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    trade_metrics : dict
        –ú–µ—Ç—Ä–∏–∫–∏ —Å–¥–µ–ª–æ–∫
        
    Returns:
    --------
    str
        –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    """
    report = []
    report.append("=" * 60)
    report.append("–û–¢–ß–ï–¢ –ü–û –°–ò–°–¢–ï–ú–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò")
    report.append("=" * 60)
    report.append("")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if performance.get('risk_system_enabled', False):
        report.append("‚úÖ –°–ò–°–¢–ï–ú–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ê–ö–¢–ò–í–ù–ê")
        report.append(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {performance.get('total_trades_with_risk', 0)}")
        report.append("")
    else:
        report.append("‚ùå –°–ò–°–¢–ï–ú–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ù–ï –ê–ö–¢–ò–í–ù–ê")
        report.append("")
        return "\n".join(report)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤
    report.append("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–´–•–û–î–û–í:")
    for reason in ['stop_loss', 'take_profit', 'trailing_stop', 'time_stop']:
        count = performance.get(f'{reason}_trades', 0)
        if count > 0:
            avg_pnl = performance.get(f'avg_{reason}_pnl', 0)
            report.append(f"   {reason.upper()}: {count} —Å–¥–µ–ª–æ–∫, —Å—Ä–µ–¥–Ω–∏–π PnL: {avg_pnl:+.2f}%")
    
    report.append("")
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    report.append("üéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê:")
    report.append(f"   Win Rate —Å —Ä–∏—Å–∫–∞–º–∏: {performance.get('win_rate_with_stops', 0):.1f}%")
    report.append(f"   Risk-Reward Ratio: {performance.get('risk_reward_ratio', 0):.2f}")
    report.append(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤: {performance.get('stop_loss_efficiency', 0):.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ PnL –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º
    if 'pnl_by_reason' in performance:
        report.append("")
        report.append("üí∞ PnL –ü–û –ü–†–ò–ß–ò–ù–ê–ú –í–´–•–û–î–ê:")
        pnl_data = performance['pnl_by_reason']
        for reason, stats in pnl_data.items():
            if 'mean' in stats and stats.get('count', 0) > 0:
                report.append(f"   {reason}: {stats['mean']:+.2f}% (n={stats['count']})")
    
    return "\n".join(report)

# üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫-–æ—Ä–¥–µ—Ä–æ–≤
def analyze_risk_efficiency(trade_history: pd.DataFrame, price_data: pd.DataFrame) -> Dict[str, Any]:
    """
    –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    """
    if trade_history.empty:
        return {}
    
    analysis = {
        'total_trades_with_risk': 0,
        'stop_loss_analysis': {},
        'take_profit_analysis': {}, 
        'exit_timing_analysis': {},
        'risk_efficiency_score': 0
    }
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
    risk_trades = trade_history[trade_history['exit_reason'].isin([
        'stop_loss', 'take_profit', 'trailing_stop', 'time_stop'
    ])]
    
    analysis['total_trades_with_risk'] = len(risk_trades)
    
    if risk_trades.empty:
        return analysis
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
    stop_loss_trades = risk_trades[risk_trades['exit_reason'] == 'stop_loss']
    if not stop_loss_trades.empty:
        analysis['stop_loss_analysis'] = {
            'count': len(stop_loss_trades),
            'avg_pnl_percent': stop_loss_trades['pnl_percent'].mean(),
            'avg_pnl_absolute': stop_loss_trades['pnl_absolute'].mean(),
            'max_loss': stop_loss_trades['pnl_percent'].min(),
            'premature_stops': 0,  # –ë—É–¥–µ–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∏–∂–µ
            'optimal_stops': 0
        }
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    take_profit_trades = risk_trades[risk_trades['exit_reason'] == 'take_profit']
    if not take_profit_trades.empty:
        analysis['take_profit_analysis'] = {
            'count': len(take_profit_trades),
            'avg_pnl_percent': take_profit_trades['pnl_percent'].mean(),
            'avg_pnl_absolute': take_profit_trades['pnl_absolute'].mean(),
            'max_profit': take_profit_trades['pnl_percent'].max(),
            'missed_profits': 0,  # –ë—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∏–∂–µ
            'optimal_takes': 0
        }
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
    analysis['exit_timing_analysis'] = {
        'avg_hold_time_days': risk_trades['duration'].mean(),
        'median_hold_time_days': risk_trades['duration'].median(),
        'quickest_exit': risk_trades['duration'].min(),
        'longest_hold': risk_trades['duration'].max()
    }
    
    # üÜï –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    analysis['risk_efficiency_score'] = calculate_risk_efficiency_score(analysis)
    
    return analysis

# üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def calculate_risk_efficiency_score(risk_analysis: Dict) -> float:
    """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (0-100)"""
    score = 50  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    
    if not risk_analysis.get('total_trades_with_risk', 0):
        return 0
    
    # –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    score += min(20, risk_analysis['total_trades_with_risk'] / 10)
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
    stop_analysis = risk_analysis.get('stop_loss_analysis', {})
    if stop_analysis:
        avg_stop_pnl = stop_analysis.get('avg_pnl_percent', 0)
        if avg_stop_pnl > -5:  # –•–æ—Ä–æ—à–∏–µ —Å—Ç–æ–ø—ã (–ø–æ—Ç–µ—Ä–∏ < 5%)
            score += 15
        elif avg_stop_pnl > -10:  # –ü—Ä–∏–µ–º–ª–µ–º—ã–µ —Å—Ç–æ–ø—ã
            score += 5
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤  
    take_analysis = risk_analysis.get('take_profit_analysis', {})
    if take_analysis:
        avg_take_pnl = take_analysis.get('avg_pnl_percent', 0)
        if avg_take_pnl > 5:  # –•–æ—Ä–æ—à–∏–µ —Ç–µ–π–∫–∏ (–ø—Ä–∏–±—ã–ª—å > 5%)
            score += 15
        elif avg_take_pnl > 2:  # –ü—Ä–∏–µ–º–ª–µ–º—ã–µ —Ç–µ–π–∫–∏
            score += 5
    
    return min(100, max(0, score))

# üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫–æ–≤
def generate_risk_efficiency_report(risk_analysis: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    report = []
    report.append("=" * 60)
    report.append("üìä –û–¢–ß–ï–¢ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê")
    report.append("=" * 60)
    
    if not risk_analysis.get('total_trades_with_risk', 0):
        report.append("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")
        return "\n".join(report)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report.append(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {risk_analysis['total_trades_with_risk']}")
    report.append(f"üéØ –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {risk_analysis['risk_efficiency_score']:.1f}/100")
    report.append("")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
    stop_analysis = risk_analysis.get('stop_loss_analysis', {})
    if stop_analysis:
        report.append("üõë –ê–ù–ê–õ–ò–ó –°–¢–û–ü-–õ–û–°–°–û–í:")
        report.append(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stop_analysis['count']}")
        report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: {stop_analysis['avg_pnl_percent']:+.2f}%")
        report.append(f"   ‚Ä¢ –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: {stop_analysis['max_loss']:+.2f}%")
        report.append("")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    take_analysis = risk_analysis.get('take_profit_analysis', {})
    if take_analysis:
        report.append("‚úÖ –ê–ù–ê–õ–ò–ó –¢–ï–ô–ö-–ü–†–û–§–ò–¢–û–í:")
        report.append(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {take_analysis['count']}")
        report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: {take_analysis['avg_pnl_percent']:+.2f}%")
        report.append(f"   ‚Ä¢ –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: {take_analysis['max_profit']:+.2f}%")
        report.append("")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
    timing_analysis = risk_analysis.get('exit_timing_analysis', {})
    if timing_analysis:
        report.append("‚è±Ô∏è  –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò –£–î–ï–†–ñ–ê–ù–ò–Ø:")
        report.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {timing_analysis['avg_hold_time_days']:.1f} –¥–Ω–µ–π")
        report.append(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {timing_analysis['median_hold_time_days']:.1f} –¥–Ω–µ–π")
        report.append(f"   ‚Ä¢ –°–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ: {timing_analysis['quickest_exit']} –¥–Ω–µ–π")
        report.append(f"   ‚Ä¢ –°–∞–º–æ–µ –¥–æ–ª–≥–æ–µ: {timing_analysis['longest_hold']} –¥–Ω–µ–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report.append("")
    report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    score = risk_analysis['risk_efficiency_score']
    if score >= 80:
        report.append("   üéâ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")
    elif score >= 60:
        report.append("   üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–æ–≤.")
    elif score >= 40:
        report.append("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∏—Å–∫–æ–≤.")
    else:
        report.append("   üö® –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–æ–≤.")
    
    return "\n".join(report)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:

def analyze_performance_optimized(results: pd.DataFrame, initial_capital: float) -> Dict[str, Any]:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    if results.empty:
        return {}
    
    capital = results['capital']
    
    # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    total_return_pct = (capital.iloc[-1] - initial_capital) / initial_capital * 100
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
    cumulative_max = capital.cummax()
    drawdown = (cumulative_max - capital) / cumulative_max
    max_drawdown_pct = drawdown.max() * 100
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
    returns = capital.pct_change().dropna()
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –®–∞—Ä–ø–∞
    if len(returns) > 1 and returns.std() > 0:
        sharpe = returns.mean() / returns.std() * np.sqrt(252)
    else:
        sharpe = 0
    
    # –ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
    performance = {
        'total_return': total_return_pct,
        'max_drawdown': max_drawdown_pct,
        'sharpe_ratio': sharpe,
        'final_capital': capital.iloc[-1],
        'volatility': returns.std() * np.sqrt(252) * 100 if len(returns) > 0 else 0,
        'total_trades': len(results[results['position_type'] != 0]) if 'position_type' in results.columns else 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if 'risk_level' in results.columns:
        performance.update({
            'avg_risk': results['risk_level'].mean() * 100,
            'risk_adjustments': len(results[results['risk_level'] != results['risk_level'].iloc[0]])
        })
    
    return performance

def analyze_risk_management_optimized(results: pd.DataFrame) -> Dict[str, Any]:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    
    risk_metrics = {
        'risk_system_enabled': False,
        'total_trades_with_risk': 0
    }
    
    if 'exit_reason' not in results.columns:
        return risk_metrics
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏
    exit_trades = results[results['exit_reason'] != '']
    if exit_trades.empty:
        return risk_metrics
    
    risk_metrics.update({
        'risk_system_enabled': True,
        'total_trades_with_risk': len(exit_trades)
    })
    
    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤
    for reason in ['stop_loss', 'take_profit', 'trailing_stop', 'time_stop']:
        count = len(exit_trades[exit_trades['exit_reason'] == reason])
        if count > 0:
            risk_metrics[f'{reason}_trades'] = count
    
    return risk_metrics
