# ===== –°–ï–ö–¶–ò–Ø 2: –û–°–ù–û–í–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê =====
import numpy as np
import pandas as pd
from datetime import datetime
from typing import List, Optional, Dict, Tuple
import warnings
import time
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
from utils.error_handler import with_error_handling

class SeikotaTradingSystem:
    def __init__(self, initial_capital: float = 100000):
        self.initial_capital = initial_capital
        self.current_capital = initial_capital
        self.positions = []
        
        # –£–ü–†–û–©–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        self._cache_stats = {
            'atr_hits': 0, 'atr_misses': 0,
            'kelly_hits': 0, 'kelly_misses': 0,
            'position_hits': 0, 'position_misses': 0,
            'risk_hits': 0, 'risk_misses': 0
        }
        
        # –ü–†–û–°–¢–û–ô –∫—ç—à
        self._atr_cache = {}
        self._kelly_cache = {}
        self._position_size_cache = {}
        self._risk_management_cache = {}
        
        self.total_commission = 0
        self.total_slippage = 0
        self.trade_count = 0
        self.trade_history = []
        
        # üîπ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'calculation_time': 0,
            'cache_efficiency': 0,
            'vectorized_operations': 0
        }
        
        # üÜï RISK MANAGEMENT: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
        self.risk_params = {
            'stop_loss_atr_multiplier': 2.0,    # –°—Ç–æ–ø-–ª–æ—Å—Å –≤ ATR
            'take_profit_atr_multiplier': 3.0,  # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ ATR  
            'trailing_stop_enabled': True,      # –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
            'trailing_stop_atr_multiplier': 1.5,
            'break_even_stop': True,            # –°—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
            'break_even_atr_threshold': 1.0,    # ATR –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ–∑—É–±—ã—Ç–∫–∞
            'max_position_risk': 0.02,          # –ú–∞–∫—Å —Ä–∏—Å–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é (2%)
            'time_stop_days': 10,               # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–æ–ø (–¥–Ω–µ–π)
        }
        
        # üÜï –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
        self.active_orders = {
            'stop_loss': {},      # {position_id: stop_price}
            'take_profit': {},    # {position_id: take_profit_price}
            'trailing_stop': {},  # {position_id: {stop_price, highest_price}}
            'break_even': {}      # {position_id: activated}
        }
        
        self.risk_management_enabled = True

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î
    @with_error_handling
    def get_available_strategies(self) -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Returns:
        --------
        dict
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        """
        return {
            'multi_timeframe': '–ú—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–æ–≤–∞—è (MA)',
            'supertrend': 'Super Trend'
        }

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    @with_error_handling
    @with_error_handling
    def calculate_risk_levels(self, entry_price: float, atr: float, position_type: int) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        """
        # üÜï –ï—Å–ª–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if not self.risk_management_enabled:
            return {
                'stop_loss': entry_price,
                'take_profit': entry_price,
                'initial_stop_loss': entry_price
            }
        
        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
        if atr <= 0 or entry_price <= 0:
            return {
                'stop_loss': entry_price,
                'take_profit': entry_price,
                'initial_stop_loss': entry_price
            }
        
        stop_distance = atr * self.risk_params['stop_loss_atr_multiplier']
        take_profit_distance = atr * self.risk_params['take_profit_atr_multiplier']
        
        if position_type == 1:  # LONG –ø–æ–∑–∏—Ü–∏—è
            stop_loss = entry_price - stop_distance
            take_profit = entry_price + take_profit_distance
        else:  # SHORT –ø–æ–∑–∏—Ü–∏—è
            stop_loss = entry_price + stop_distance
            take_profit = entry_price - take_profit_distance
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        risk_percent = abs(stop_loss - entry_price) / entry_price
        if risk_percent > self.risk_params['max_position_risk']:
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
            if position_type == 1:
                stop_loss = entry_price * (1 - self.risk_params['max_position_risk'])
            else:
                stop_loss = entry_price * (1 + self.risk_params['max_position_risk'])
        
        return {
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'initial_stop_loss': stop_loss,
            'stop_distance': stop_distance,
            'take_profit_distance': take_profit_distance
        }

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
    @with_error_handling
    def update_trailing_stop(self, position_id: str, current_price: float, 
                           atr: float, position_type: int) -> Optional[float]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
        
        Parameters:
        -----------
        position_id : str
            ID –ø–æ–∑–∏—Ü–∏–∏
        current_price : float
            –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        atr : float
            –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR
        position_type : int
            –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: 1 (LONG), -1 (SHORT)
            
        Returns:
        --------
        float or None
            –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        """
        if position_id not in self.active_orders['trailing_stop']:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            self.active_orders['trailing_stop'][position_id] = {
                'stop_price': self.active_orders['stop_loss'].get(position_id, current_price),
                'highest_price': current_price if position_type == 1 else float('inf'),
                'lowest_price': current_price if position_type == -1 else 0
            }
            return self.active_orders['trailing_stop'][position_id]['stop_price']
        
        trail_data = self.active_orders['trailing_stop'][position_id]
        trailing_distance = atr * self.risk_params['trailing_stop_atr_multiplier']
        
        new_stop_price = None
        
        if position_type == 1:  # LONG
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∏–≤—ã—Å—à—É—é —Ü–µ–Ω—É
            if current_price > trail_data['highest_price']:
                trail_data['highest_price'] = current_price
                # –ü–æ–¥–Ω–∏–º–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                new_stop_price = current_price - trailing_distance
                trail_data['stop_price'] = new_stop_price
                
                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑—É–±—ã—Ç–∫–∞
                if (self.risk_params['break_even_stop'] and 
                    current_price >= trail_data['highest_price'] * (1 + self.risk_params['break_even_atr_threshold'] * atr / trail_data['highest_price'])):
                    new_stop_price = max(new_stop_price, self.active_orders['stop_loss'].get(position_id, current_price))
                    self.active_orders['break_even'][position_id] = True
                    
        else:  # SHORT
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∏–º–µ–Ω—å—à—É—é —Ü–µ–Ω—É
            if current_price < trail_data['lowest_price']:
                trail_data['lowest_price'] = current_price
                # –û–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                new_stop_price = current_price + trailing_distance
                trail_data['stop_price'] = new_stop_price
                
                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑—É–±—ã—Ç–∫–∞
                if (self.risk_params['break_even_stop'] and 
                    current_price <= trail_data['lowest_price'] * (1 - self.risk_params['break_even_atr_threshold'] * atr / trail_data['lowest_price'])):
                    new_stop_price = min(new_stop_price, self.active_orders['stop_loss'].get(position_id, current_price))
                    self.active_orders['break_even'][position_id] = True
        
        return new_stop_price

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    @with_error_handling
    def check_risk_orders(self, position_id: str, current_price: float, 
                         position_type: int, entry_price: float) -> Tuple[bool, str, float]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
        
        Parameters:
        -----------
        position_id : str
            ID –ø–æ–∑–∏—Ü–∏–∏
        current_price : float
            –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        position_type : int
            –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: 1 (LONG), -1 (SHORT)
        entry_price : float
            –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            
        Returns:
        --------
        tuple
            (should_exit, exit_reason, exit_price)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        stop_loss_price = self.active_orders['stop_loss'].get(position_id)
        if stop_loss_price:
            if (position_type == 1 and current_price <= stop_loss_price) or \
               (position_type == -1 and current_price >= stop_loss_price):
                return True, 'stop_loss', stop_loss_price
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        take_profit_price = self.active_orders['take_profit'].get(position_id)
        if take_profit_price:
            if (position_type == 1 and current_price >= take_profit_price) or \
               (position_type == -1 and current_price <= take_profit_price):
                return True, 'take_profit', take_profit_price
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
        if position_id in self.active_orders['trailing_stop']:
            trail_stop_price = self.active_orders['trailing_stop'][position_id]['stop_price']
            if (position_type == 1 and current_price <= trail_stop_price) or \
               (position_type == -1 and current_price >= trail_stop_price):
                return True, 'trailing_stop', trail_stop_price
        
        return False, '', 0.0

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é
    @with_error_handling
    @with_error_handling
    def setup_risk_orders(self, position_id: str, entry_price: float, 
                        atr: float, position_type: int):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é
        """
        # üÜï –ï—Å–ª–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        if not self.risk_management_enabled:
            return
        
        risk_levels = self.calculate_risk_levels(entry_price, atr, position_type)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        self.active_orders['stop_loss'][position_id] = risk_levels['stop_loss']
        self.active_orders['take_profit'][position_id] = risk_levels['take_profit']
        
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.risk_params['trailing_stop_enabled']:
            self.update_trailing_stop(position_id, entry_price, atr, position_type)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.active_orders['time_stop'] = self.active_orders.get('time_stop', {})
        self.active_orders['time_stop'][position_id] = {
            'entry_time': datetime.now(),
            'max_days': self.risk_params['time_stop_days']
        }

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
    @with_error_handling
    def check_time_stop(self, position_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        
        Parameters:
        -----------
        position_id : str
            ID –ø–æ–∑–∏—Ü–∏–∏
            
        Returns:
        --------
        bool
            True –µ—Å–ª–∏ –ø–æ—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        if position_id not in self.active_orders.get('time_stop', {}):
            return False
        
        time_data = self.active_orders['time_stop'][position_id]
        days_in_position = (datetime.now() - time_data['entry_time']).days
        
        return days_in_position >= time_data['max_days']

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
    @with_error_handling
    def clear_risk_orders(self, position_id: str):
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
        
        Parameters:
        -----------
        position_id : str
            ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        """
        for order_type in self.active_orders:
            if position_id in self.active_orders[order_type]:
                del self.active_orders[order_type][position_id]

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞
    @with_error_handling
    def update_risk_parameters(self, **kwargs):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        
        Parameters:
        -----------
        **kwargs
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        valid_params = [
            'stop_loss_atr_multiplier', 'take_profit_atr_multiplier',
            'trailing_stop_enabled', 'trailing_stop_atr_multiplier',
            'break_even_stop', 'break_even_atr_threshold',
            'max_position_risk', 'time_stop_days'
        ]
        
        for key, value in kwargs.items():
            if key in valid_params:
                self.risk_params[key] = value

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
    @with_error_handling
    def get_active_orders(self, position_id: str = None) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
        
        Parameters:
        -----------
        position_id : str, optional
            ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            
        Returns:
        --------
        dict
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–∞—Ö
        """
        if position_id:
            return {
                'stop_loss': self.active_orders['stop_loss'].get(position_id),
                'take_profit': self.active_orders['take_profit'].get(position_id),
                'trailing_stop': self.active_orders['trailing_stop'].get(position_id),
                'break_even': self.active_orders['break_even'].get(position_id, False),
                'time_stop': self.active_orders.get('time_stop', {}).get(position_id)
            }
        else:
            return self.active_orders.copy()


    # üÜï –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ú–ï–¢–û–î–ê: _optimized_simulation_loop
    
    def _optimized_simulation_loop(self, data: pd.DataFrame, initial_f: float, 
                                risk_per_trade: float, use_dynamic_risk: bool) -> pd.DataFrame:
        """
        UPDATED trading simulation loop with risk management system
        –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        """
        
        # === 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–°–¢–û–†–ò–ò ===
        capital_history = [self.initial_capital]
        f_history = [initial_f]
        trades_history = []
        position_size_history = [0]
        risk_history = [risk_per_trade]
        drawdown_history = [0]
        position_type_history = [0]
        
        # üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∏—Å–∫–æ–≤
        stop_loss_history = [0]
        take_profit_history = [0]
        exit_reason_history = ['']

        # === 2. –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
        current_f = initial_f
        current_risk = risk_per_trade
        peak_capital = self.initial_capital
        position_size = 0
        entry_price = 0
        entry_index = 0
        position_type = 0
        in_position = False
        current_position_id = None  # üÜï ID —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏

        # === 3. –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –° –£–ß–ï–¢–û–ú –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê ===
        for i in range(1, len(data)):
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                current_capital = capital_history[-1]
                signal = data['signal'].iloc[i]
                current_price = data['close'].iloc[i]
                atr = data['atr'].iloc[i] if 'atr' in data.columns else None

                # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if current_price <= 0:
                    current_price = data['close'].iloc[i-1] if i > 0 else 0.01

                # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
                peak_capital = max(peak_capital, current_capital)
                current_drawdown = (peak_capital - current_capital) / peak_capital if peak_capital > 0 else 0

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º
                if use_dynamic_risk:
                    current_risk = self.dynamic_risk_management(
                        current_capital, peak_capital, risk_per_trade
                    )

                # –†–∞—Å—á–µ—Ç –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ PnL
                unrealized_pnl = 0
                if in_position and position_size > 0 and entry_price > 0:
                    if position_type == 1:  # LONG
                        price_change_pct = (current_price - entry_price) / entry_price
                        unrealized_pnl = price_change_pct * position_size
                    elif position_type == -1:  # SHORT
                        price_change_pct = (entry_price - current_price) / entry_price
                        unrealized_pnl = price_change_pct * position_size
                
                # üÜï –ü–†–û–í–ï–†–ö–ê –†–ò–°–ö-–û–†–î–ï–†–û–í –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ô –ü–û–ó–ò–¶–ò–ò
                exit_trade = False
                trade_result_pct = 0
                trade_result = 0
                exit_reason = 'signal'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Ö–æ–¥ –ø–æ —Å–∏–≥–Ω–∞–ª—É
                exit_price = current_price  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Ö–æ–¥ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ

                # –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ, –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∏—Å–∫-–æ—Ä–¥–µ—Ä–æ–≤:
                if in_position and current_position_id and self.risk_management_enabled:  # üÜï –î–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
                    should_exit, risk_exit_reason, risk_exit_price = self.check_risk_orders(
                        current_position_id, current_price, position_type, entry_price
                    )
                    
                    if should_exit:
                        exit_trade = True
                        exit_reason = risk_exit_reason
                        exit_price = risk_exit_price

                # ... –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∏—Å–∫–æ–≤ ...

                # –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é:
                if in_position and current_position_id and self.risk_management_enabled:
                    # üÜï –£–°–¢–ê–ù–û–í–ö–ê –û–†–î–ï–†–û–í –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
                    if atr is not None:
                        self.setup_risk_orders(
                            current_position_id, entry_price, atr, position_type
                        )
                        # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
                        position_type_name = "LONG" if position_type == 1 else "SHORT"
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
                    elif self.check_time_stop(current_position_id):
                        exit_trade = True
                        exit_reason = 'time_stop'
                        exit_price = current_price
                    
                    # üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
                    if self.risk_params['trailing_stop_enabled'] and atr is not None:
                        new_stop = self.update_trailing_stop(
                            current_position_id, current_price, atr, position_type
                        )
                        if new_stop:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
                            self.active_orders['stop_loss'][current_position_id] = new_stop

                # üìà –õ–û–ì–ò–ö–ê –í–•–û–î–ê –í –ü–û–ó–ò–¶–ò–Æ
                if not in_position:
                    if signal == 1:  # –ü–û–ö–£–ü–ö–ê (LONG)
                        position_size = self.calculate_position_size(
                            current_f, current_price, atr, current_risk
                        )
                        
                        if position_size > 0 and current_price > 0:
                            entry_price = current_price
                            entry_index = i
                            position_type = 1
                            in_position = True
                            current_position_id = f"L_{i}_{current_price}"  # üÜï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø–æ–∑–∏—Ü–∏–∏
                            
                            # üÜï –£–°–¢–ê–ù–û–í–ö–ê –û–†–î–ï–†–û–í –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
                            if atr is not None:
                                self.setup_risk_orders(
                                    current_position_id, entry_price, atr, position_type
                                )
                            
                    elif signal == 0:  # –ü–†–û–î–ê–ñ–ê (SHORT)  
                        position_size = self.calculate_position_size(
                            current_f, current_price, atr, current_risk
                        )
                        
                        if position_size > 0 and current_price > 0:
                            entry_price = current_price
                            entry_index = i
                            position_type = -1
                            in_position = True
                            current_position_id = f"S_{i}_{current_price}"  # üÜï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø–æ–∑–∏—Ü–∏–∏
                            
                            # üÜï –£–°–¢–ê–ù–û–í–ö–ê –û–†–î–ï–†–û–í –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
                            if atr is not None:
                                self.setup_risk_orders(
                                    current_position_id, entry_price, atr, position_type
                                )

                # üìâ –õ–û–ì–ò–ö–ê –í–´–•–û–î–ê –ò–ó –ü–û–ó–ò–¶–ò–ò
                elif in_position and not exit_trade:  # üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–∏ –ø–æ —Ä–∏—Å–∫–∞–º
                    # –í—ã—Ö–æ–¥ –∏–∑ LONG –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    if position_type == 1 and signal == 0:
                        price_change_pct = (current_price - entry_price) / entry_price
                        trade_result_pct = price_change_pct
                        trade_result = price_change_pct * position_size
                        exit_trade = True
                        exit_reason = 'signal_sell'
                        
                    # –í—ã—Ö–æ–¥ –∏–∑ SHORT –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É  
                    elif position_type == -1 and signal == 1:
                        price_change_pct = (entry_price - current_price) / entry_price
                        trade_result_pct = price_change_pct
                        trade_result = price_change_pct * position_size
                        exit_trade = True
                        exit_reason = 'signal_buy'
                
                # üÜï –û–ë–†–ê–ë–û–¢–ö–ê –í–´–•–û–î–ê –ü–û –†–ò–°–ö–ê–ú
                if exit_trade and in_position:
                    # –†–∞—Å—á–µ—Ç PnL –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ —Ä–∏—Å–∫–∞–º
                    if exit_reason in ['stop_loss', 'take_profit', 'trailing_stop', 'time_stop']:
                        if position_type == 1:  # LONG
                            price_change_pct = (exit_price - entry_price) / entry_price
                        else:  # SHORT
                            price_change_pct = (entry_price - exit_price) / entry_price
                        
                        trade_result_pct = price_change_pct
                        trade_result = price_change_pct * position_size
                    
                    # –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏—á–∏–Ω–µ –≤—ã—Ö–æ–¥–∞
                    trade_info = {
                        'entry_index': entry_index,
                        'exit_index': i,
                        'entry_price': entry_price,
                        'exit_price': exit_price,  # üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—Ä–¥–µ—Ä–∞
                        'position_size': position_size,
                        'position_type': position_type,
                        'pnl_percent': trade_result_pct * 100,
                        'pnl_absolute': trade_result,
                        'duration': i - entry_index,
                        'capital_before': current_capital,
                        'capital_after': current_capital + trade_result,
                        'exit_reason': exit_reason,  # üÜï –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞
                        'position_id': current_position_id,  # üÜï ID –ø–æ–∑–∏—Ü–∏–∏
                        'stop_loss': self.active_orders['stop_loss'].get(current_position_id),
                        'take_profit': self.active_orders['take_profit'].get(current_position_id)
                    }
                    self.trade_history.append(trade_info)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
                    trades_history.append(trade_result_pct)
                    current_capital += trade_result
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ö–µ–ª–ª–∏
                    if len(trades_history) >= 10:
                        current_f = self.calculate_kelly_fraction(trades_history[-10:])
                    
                    # üÜï –û–ß–ò–°–¢–ö–ê –û–†–î–ï–†–û–í –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
                    self.clear_risk_orders(current_position_id)
                    
                    # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
                    position_size = 0
                    position_type = 0
                    in_position = False
                    current_position_id = None

                # üÜï –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –†–ò–°–ö–ê–• –í –ò–°–¢–û–†–ò–Æ
                current_stop_loss = 0
                current_take_profit = 0
                
                if in_position and current_position_id:
                    current_stop_loss = self.active_orders['stop_loss'].get(current_position_id, 0)
                    current_take_profit = self.active_orders['take_profit'].get(current_position_id, 0)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                total_capital = current_capital + unrealized_pnl
                total_capital = max(total_capital, 0)

                capital_history.append(total_capital)
                f_history.append(current_f)
                position_size_history.append(position_size)
                risk_history.append(current_risk)
                drawdown_history.append(current_drawdown)
                position_type_history.append(position_type)
                stop_loss_history.append(current_stop_loss)  # üÜï
                take_profit_history.append(current_take_profit)  # üÜï
                exit_reason_history.append(exit_reason if exit_trade else '')  # üÜï

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å–∏—Å—Ç–µ–º—ã
                self.current_capital = total_capital

            except Exception as e:
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞ —à–∞–≥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                capital_history.append(capital_history[-1] if capital_history else self.initial_capital)
                f_history.append(f_history[-1] if f_history else initial_f)
                position_size_history.append(position_size_history[-1] if position_size_history else 0)
                risk_history.append(risk_history[-1] if risk_history else risk_per_trade)
                drawdown_history.append(drawdown_history[-1] if drawdown_history else 0)
                position_type_history.append(position_type_history[-1] if position_type_history else 0)
                stop_loss_history.append(stop_loss_history[-1] if stop_loss_history else 0)  # üÜï
                take_profit_history.append(take_profit_history[-1] if take_profit_history else 0)  # üÜï
                exit_reason_history.append(exit_reason_history[-1] if exit_reason_history else '')  # üÜï

        # === 4. –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú–ò –ö–û–õ–û–ù–ö–ê–ú–ò ===
        result_data = data.iloc[1:].copy()
        result_data = result_data.reset_index(drop=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ data
        existing_columns = result_data.columns.tolist()
        all_columns = data.columns.tolist()
        
        for col in all_columns:
            if col not in existing_columns and col in data.columns:
                if len(data[col]) > 1 and len(data[col]) - 1 == len(result_data):
                    result_data[col] = data[col].iloc[1:]
                else:
                    result_data[col] = data[col].iloc[0] if len(data[col]) > 0 else np.nan
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        if len(capital_history) > 1 and len(capital_history) - 1 == len(result_data):
            result_data['capital'] = capital_history[1:]
        else:
            result_data['capital'] = [self.initial_capital] * len(result_data)
            
        result_data['kelly_f'] = f_history[1:] if len(f_history) > 1 else [initial_f] * len(result_data)
        result_data['position_size'] = position_size_history[1:] if len(position_size_history) > 1 else [0] * len(result_data)
        result_data['risk_level'] = risk_history[1:] if len(risk_history) > 1 else [risk_per_trade] * len(result_data)
        result_data['drawdown'] = drawdown_history[1:] if len(drawdown_history) > 1 else [0] * len(result_data)
        result_data['position_type'] = position_type_history[1:] if len(position_type_history) > 1 else [0] * len(result_data)
        
        # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –ö–û–õ–û–ù–ö–ò –î–õ–Ø –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
        result_data['stop_loss_level'] = stop_loss_history[1:] if len(stop_loss_history) > 1 else [0] * len(result_data)
        result_data['take_profit_level'] = take_profit_history[1:] if len(take_profit_history) > 1 else [0] * len(result_data)
        result_data['exit_reason'] = exit_reason_history[1:] if len(exit_reason_history) > 1 else [''] * len(result_data)
        
        return result_data    

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î simulate_trading
    @with_error_handling
    def simulate_trading(self, price_data: pd.DataFrame,
                    initial_f: float = 0.1,
                    risk_per_trade: float = 0.01,
                    use_multi_timeframe: bool = True,
                    use_dynamic_risk: bool = True,
                    realistic_mode: bool = False,
                    result_name: str = None,
                    strategy_type: str = 'multi_timeframe',
                    supertrend_atr_period: int = 10,
                    supertrend_multiplier: float = 3.0) -> pd.DataFrame:
        """
        –û–°–ù–û–í–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –¢–û–†–ì–û–í–õ–ò
        –° —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        
        # === 1. –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–• ===
        from utils.data_loader import validate_price_data
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        validation = validate_price_data(price_data)
        if not validation['is_valid']:
            error_msg = f"–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation['errors']}"
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π DataFrame
            return self._create_safe_dataframe(price_data, self.initial_capital)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self._validate_parameters(initial_f, risk_per_trade):
            return self._create_safe_dataframe(price_data, self.initial_capital)
        
        # === 2. –ü–û–î–ì–û–¢–û–í–ö–ê –°–ò–°–¢–ï–ú–´ ===
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        self.initial_capital = initial_f * 100000  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.current_capital = self.initial_capital
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.clear_caches()
        self.trade_history = []
        
        # === 3. –í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò ===
        data = price_data.copy()

        # –í –º–µ—Ç–æ–¥–µ simulate_trading:
        if strategy_type == 'supertrend':
            data = self.supertrend_strategy(data, supertrend_atr_period, supertrend_multiplier)
        else:
            if use_multi_timeframe:
                data = self.multi_timeframe_signal(data)
                # üî• –ù–ï –ú–ï–ù–Ø–ï–ú –ö–û–õ–û–ù–ö–£ - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç 'signal'
            else:
                # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π
                data['signal'] = np.where(
                    data['close'] > data['close'].rolling(20).mean(), 1, 0)

        # üî• –ì–ê–†–ê–ù–¢–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ signal —Å–æ–∑–¥–∞–Ω–∞
        if 'signal' not in data.columns:
            data['signal'] = (data['close'] > data['close'].rolling(20).mean()).astype(int)
        
        # === 4. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –†–ê–°–ß–ï–¢–´ ===
        if 'high' in data.columns and 'low' in data.columns:
            data['atr'] = self.calculate_atr(data)
        else:
            data['atr'] = data['close'].rolling(20).std()
        
        # === 5. –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–ú–£–õ–Ø–¶–ò–ò ===
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            result_data = self._optimized_simulation_loop(
                data, initial_f, risk_per_trade, use_dynamic_risk
            )
            
            # === 6. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
            if result_data.empty or 'capital' not in result_data.columns:
                return self._create_safe_dataframe(price_data, self.initial_capital)
            
            # === 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
            final_capital = result_data['capital'].iloc[-1]
            total_return = (final_capital - self.initial_capital) / self.initial_capital * 100
            trades_count = len(self.trade_history)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_report = self.get_performance_report()
            
            return result_data
            
        except Exception as e:
            # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @with_error_handling
            raise  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    def _validate_parameters(self, initial_f: float, risk_per_trade: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        checks = [
            0 < initial_f <= 0.5,
            0 < risk_per_trade <= 0.1,
            self.initial_capital > 0
        ]
        
        if not all(checks):
            return False
        return True

    def _create_safe_dataframe(self, original_data: pd.DataFrame, capital: float) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ DataFrame –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        safe_data = original_data.copy().iloc[:min(100, len(original_data))]
        safe_data['capital'] = capital
        safe_data['kelly_f'] = 0.1
        safe_data['position_size'] = 0
        safe_data['risk_level'] = 0.01
        safe_data['drawdown'] = 0
        safe_data['position_type'] = 0
        
        return safe_data

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î clear_caches
    @with_error_handling
    def clear_caches(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        cache_attrs = ['_atr_cache', '_kelly_cache', '_position_size_cache', '_risk_management_cache']
        
        for attr in cache_attrs:
            if hasattr(self, attr):
                try:
                    # –î–ª—è —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º clear(), –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ - –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    cache_obj = getattr(self, attr)
                    if isinstance(cache_obj, dict):
                        cache_obj.clear()
                    else:
                        setattr(self, attr, {})  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
                except Exception as e:
                    pass
        
        # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._cache_stats = {
            'atr_hits': 0, 'atr_misses': 0,
            'kelly_hits': 0, 'kelly_misses': 0, 
            'position_hits': 0, 'position_misses': 0,
            'risk_hits': 0, 'risk_misses': 0
        }
        
        # üÜï –û—á–∏—Å—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∏—Å–∫–æ–≤
        self.active_orders = {
            'stop_loss': {},
            'take_profit': {},
            'trailing_stop': {},
            'break_even': {},
            'time_stop': {}
        }
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        self.trade_history = []

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î get_trade_history
    @with_error_handling
    def get_trade_history(self) -> pd.DataFrame:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –≤ –≤–∏–¥–µ DataFrame"""
        if not self.trade_history:
            return pd.DataFrame()
        
        return pd.DataFrame(self.trade_history)

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î get_performance_report
    @with_error_handling
    def get_performance_report(self) -> dict:
        """–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        cache_stats = self.get_cache_stats()
        
        return {
            'calculation_time': self.performance_stats.get('calculation_time', 0),
            'cache_efficiency': cache_stats.get('overall_hit_ratio', 0),
            'vectorized_operations': self.performance_stats.get('vectorized_operations', 0),
            'total_trades': len(self.trade_history),
            'data_points_processed': getattr(self, '_data_points_processed', 0)
        }

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î get_cache_stats
    @with_error_handling
    def get_cache_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        total_hits = (self._cache_stats['atr_hits'] + self._cache_stats['kelly_hits'] + 
                     self._cache_stats['position_hits'] + self._cache_stats['risk_hits'])
        total_misses = (self._cache_stats['atr_misses'] + self._cache_stats['kelly_misses'] + 
                       self._cache_stats['position_misses'] + self._cache_stats['risk_misses'])
        
        hit_ratio = total_hits / (total_hits + total_misses) if (total_hits + total_misses) > 0 else 0
        
        stats = {
            'cache_sizes': {
                'atr_cache': len(self._atr_cache),
                'kelly_cache': len(self._kelly_cache),
                'position_cache': len(self._position_size_cache),
                'risk_cache': len(self._risk_management_cache)
            },
            'hit_ratios': {
                'atr': self._cache_stats['atr_hits'] / (self._cache_stats['atr_hits'] + self._cache_stats['atr_misses']) if (self._cache_stats['atr_hits'] + self._cache_stats['atr_misses']) > 0 else 0,
                'kelly': self._cache_stats['kelly_hits'] / (self._cache_stats['kelly_hits'] + self._cache_stats['kelly_misses']) if (self._cache_stats['kelly_hits'] + self._cache_stats['kelly_misses']) > 0 else 0,
                'position': self._cache_stats['position_hits'] / (self._cache_stats['position_hits'] + self._cache_stats['position_misses']) if (self._cache_stats['position_hits'] + self._cache_stats['position_misses']) > 0 else 0,
                'risk': self._cache_stats['risk_hits'] / (self._cache_stats['risk_hits'] + self._cache_stats['risk_misses']) if (self._cache_stats['risk_hits'] + self._cache_stats['risk_misses']) > 0 else 0
            },
            'total_hits': total_hits,
            'total_misses': total_misses,
            'overall_hit_ratio': hit_ratio
        }
        
        return stats

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ –ò–ó –ò–°–•–û–î–ù–û–ì–û –ö–û–î–ê
    @with_error_handling
    def dynamic_risk_management(self, current_capital: float, 
                            peak_capital: float, 
                            base_risk: float = 0.01) -> float:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º"""
        # –£–ü–†–û–©–ï–ù–ù–´–ô –∫–ª—é—á –∫—ç—à–∞
        cache_key = f"risk_{base_risk:.2f}"
        
        if hasattr(self, '_risk_management_cache') and cache_key in self._risk_management_cache:
            self._cache_stats['risk_hits'] += 1
            return self._risk_management_cache[cache_key]
        
        self._cache_stats['risk_misses'] += 1
        
        # –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –î–û –ª—é–±–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        adjusted_risk = base_risk
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å)
        if peak_capital > 0 and current_capital > 0:
            drawdown = (peak_capital - current_capital) / peak_capital
        else:
            drawdown = 0
        
        # –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∏—Å–∫–∞
        if drawdown >= 0.10:  # –ü—Ä–æ—Å–∞–¥–∫–∞ >10%
            adjusted_risk = base_risk * 0.5
        elif drawdown >= 0.05:  # –ü—Ä–æ—Å–∞–¥–∫–∞ 5-10%
            adjusted_risk = base_risk * 0.7
        else:  # –ü—Ä–æ—Å–∞–¥–∫–∞ <5%
            adjusted_risk = base_risk * 1.0
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞
        if current_capital > peak_capital * 1.05:
            adjusted_risk *= 1.2
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞
        adjusted_risk = max(0.005, min(adjusted_risk, 0.05))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if not hasattr(self, '_risk_management_cache'):
            self._risk_management_cache = {}
        self._risk_management_cache[cache_key] = adjusted_risk
        
        return adjusted_risk

    @with_error_handling
    def multi_timeframe_signal(self, data: pd.DataFrame) -> pd.DataFrame:
        """–°–ò–ì–ù–ê–õ–´ –ù–ê –ù–ï–°–ö–û–õ–¨–ö–ò–• –¢–ê–ô–ú–§–†–ï–ô–ú–ê–• - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        periods = {'fast': 10, 'slow': 30, 'trend': 50}
        
        for name, period in periods.items():
            data[f'ma_{name}'] = data['close'].rolling(period).mean()
            data[f'signal_{name}'] = (data['close'] > data[f'ma_{name}']).astype(int)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤)
        data['combined_signal'] = (
            data['signal_fast'] + data['signal_slow'] + data['signal_trend']
        ) >= 2
        
        # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
        data['trend_strength'] = (
            (data['close'] > data['ma_slow']).astype(int) + 
            (data['ma_fast'] > data['ma_slow']).astype(int) +
            (data['ma_slow'] > data['ma_trend']).astype(int)
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–∏–ª–µ —Ç—Ä–µ–Ω–¥–∞
        data['final_signal'] = (
            (data['combined_signal'] == True) & 
            (data['trend_strength'] >= 2)
        ).astype(int)
        
        # üî• –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
        data['signal'] = data['final_signal']
        
        return data

    @with_error_handling
    def supertrend_strategy(self, data: pd.DataFrame, atr_period: int = 10, multiplier: float = 3.0) -> pd.DataFrame:
        """
        –°–¢–†–ê–¢–ï–ì–ò–Ø SUPER TREND - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
        """
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ Super Trend
        from utils.supertrend import calculate_supertrend
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ Super Trend
        data_with_supertrend = calculate_supertrend(data, atr_period, multiplier)
        
        # üîß –®–ê–ì 2: –û–ë–†–ê–ë–û–¢–ö–ê NaN –ó–ù–ê–ß–ï–ù–ò–ô (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
        
        if 'supertrend_direction' in data_with_supertrend.columns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NaN –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞
            nan_count_direction = data_with_supertrend['supertrend_direction'].isna().sum()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞
            first_valid_idx = data_with_supertrend['supertrend_direction'].first_valid_index()
            if first_valid_idx is not None:
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                first_valid_value = data_with_supertrend.loc[first_valid_idx, 'supertrend_direction']
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ NaN —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (forward fill)
                data_with_supertrend['supertrend_direction'] = data_with_supertrend['supertrend_direction'].fillna(first_valid_value)
            else:
                # –ï—Å–ª–∏ –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è NaN (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1 (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)
                data_with_supertrend['supertrend_direction'] = data_with_supertrend['supertrend_direction'].fillna(1)
        
        if 'supertrend_line' in data_with_supertrend.columns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NaN –≤ –ª–∏–Ω–∏–∏ Super Trend
            nan_count_line = data_with_supertrend['supertrend_line'].isna().sum()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –≤ –ª–∏–Ω–∏–∏ Super Trend
            first_valid_idx = data_with_supertrend['supertrend_line'].first_valid_index()
            if first_valid_idx is not None:
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
                first_valid_value = data_with_supertrend.loc[first_valid_idx, 'supertrend_line']
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ NaN —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                data_with_supertrend['supertrend_line'] = data_with_supertrend['supertrend_line'].fillna(first_valid_value)
            else:
                # –ï—Å–ª–∏ –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è NaN, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                data_with_supertrend['supertrend_line'] = data_with_supertrend['supertrend_line'].fillna(data_with_supertrend['close'])
        
        # üîß –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Super Trend (—Ç–µ–ø–µ—Ä—å –±–µ–∑ NaN)
        supertrend_direction = data_with_supertrend['supertrend_direction']
        
        # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:
        # - –ö–æ–≥–¥–∞ Super Trend –º–µ–Ω—è–µ—Ç—Å—è —Å -1 –Ω–∞ 1 ‚Üí –ü–û–ö–£–ü–ö–ê (—Å–∏–≥–Ω–∞–ª = 1)
        # - –ö–æ–≥–¥–∞ Super Trend –º–µ–Ω—è–µ—Ç—Å—è —Å 1 –Ω–∞ -1 ‚Üí –ü–†–û–î–ê–ñ–ê (—Å–∏–≥–Ω–∞–ª = 0)
        # - –í –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ‚Üí —É–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        
        signals = []
        current_position = 0  # 0 = –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, 1 = –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—è
        
        for i in range(len(supertrend_direction)):
            current_direction = supertrend_direction.iloc[i]
            
            if i == 0:
                # –ü–µ—Ä–≤—ã–π –±–∞—Ä: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–¥ –≤–æ—Å—Ö–æ–¥—è—â–∏–π (1) ‚Üí –ø–æ–∫—É–ø–∞–µ–º, –µ—Å–ª–∏ –Ω–∏—Å—Ö–æ–¥—è—â–∏–π (-1) ‚Üí –≤—ã—Ö–æ–¥–∏–º
                current_position = 1 if current_direction == 1 else 0
            else:
                previous_direction = supertrend_direction.iloc[i-1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
                if current_direction != previous_direction:
                    # –°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üí –º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    if current_direction == 1:  
                        # –°–º–µ–Ω–∞ –Ω–∞ –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ‚Üí –ü–û–ö–£–ü–ö–ê
                        current_position = 1
                    else:  
                        # –°–º–µ–Ω–∞ –Ω–∞ –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ‚Üí –ü–†–û–î–ê–ñ–ê/–í–´–•–û–î
                        current_position = 0
                # –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            
            signals.append(current_position)
        
        # üîß –®–ê–ì 4: –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (0 –∏–ª–∏ 1)
        data['signal'] = signals
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Super Trend –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
        data['supertrend_direction'] = data_with_supertrend['supertrend_direction']
        data['supertrend_line'] = data_with_supertrend['supertrend_line']
        
        # ‚úÖ –ì–ê–†–ê–ù–¢–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ–º Super Trend –¥–∞–Ω–Ω—ã–µ –≤ –û–°–ù–û–í–ù–û–ô DataFrame
        # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö!
        data['supertrend_direction'] = data_with_supertrend['supertrend_direction']
        data['supertrend_line'] = data_with_supertrend['supertrend_line']
        
        return data
    
    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î calculate_atr
    @with_error_handling
    def calculate_atr(self, data: pd.DataFrame, period: int = 14) -> pd.Series:
        """ATR —Å –£–ü–†–û–©–ï–ù–ù–´–ú–ò –∫–ª—é—á–∞–º–∏ –∫—ç—à–∞"""
        # –£–ü–†–û–©–ï–ù–ù–´–ô –∫–ª—é—á - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥
        cache_key = f"atr_{period}"
        
        if hasattr(self, '_atr_cache') and cache_key in self._atr_cache:
            self._cache_stats['atr_hits'] += 1
            return self._atr_cache[cache_key]
        
        self._cache_stats['atr_misses'] += 1
        
        # –†–∞—Å—á–µ—Ç ATR
        high = data['high'] if 'high' in data.columns else data['close']
        low = data['low'] if 'low' in data.columns else data['close']
        close = data['close']

        tr1 = high - low
        tr2 = abs(high - close.shift())
        tr3 = abs(low - close.shift())
        tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
        atr = tr.rolling(period, min_periods=1).mean()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not hasattr(self, '_atr_cache'):
            self._atr_cache = {}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self._atr_cache[cache_key] = atr
        return atr

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î calculate_position_size
    @with_error_handling
    def calculate_position_size(self, f: float, current_price: float,
                            atr: float = None, risk_per_trade: float = 0.01) -> float:
        """
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        # üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not hasattr(self, '_position_size_cache'):
            self._position_size_cache = {}
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
            atr_value = atr if atr is not None else 0.0
            cache_key = f"pos_{f:.4f}_{current_price:.4f}_{atr_value:.4f}_{risk_per_trade:.4f}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in self._position_size_cache:
                self._cache_stats['position_hits'] += 1
                return self._position_size_cache[cache_key]
            
            self._cache_stats['position_misses'] += 1
            
            # üîí –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (not np.isfinite(f) or not np.isfinite(current_price) or 
                not np.isfinite(risk_per_trade)):
                result = 0.0
                self._position_size_cache[cache_key] = result
                return result
            
            if f <= 0 or current_price <= 0 or risk_per_trade <= 0:
                result = 0.0
                self._position_size_cache[cache_key] = result
                return result
                
            if self.current_capital <= 0:
                result = 0.0
                self._position_size_cache[cache_key] = result
                return result
            
            # –†–∞–∑–º–µ—Ä –ø–æ –ö–µ–ª–ª–∏
            kelly_amount = self.current_capital * f
            
            # –†–∞–∑–º–µ—Ä –ø–æ —Ä–∏—Å–∫—É –Ω–∞ —Å–¥–µ–ª–∫—É
            risk_amount = self.current_capital * risk_per_trade

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ ATR
            if atr is not None and atr > 0:
                stop_loss_pct = (2 * atr) / current_price
                if stop_loss_pct > 0:
                    volatility_position = risk_amount / stop_loss_pct
                    position_size = min(kelly_amount, volatility_position)
                else:
                    position_size = min(kelly_amount, risk_amount * 5)
            else:
                position_size = min(kelly_amount, risk_amount * 3)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = min(position_size, self.current_capital * 0.25)
            position_size = max(position_size, self.current_capital * 0.01)

            # üîí –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò
            if (not np.isfinite(position_size) or 
                position_size <= 0 or 
                position_size > self.current_capital):
                position_size = min(kelly_amount, risk_amount * 3)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._position_size_cache[cache_key] = position_size
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
            if len(self._position_size_cache) > 50:
                oldest_key = next(iter(self._position_size_cache))
                del self._position_size_cache[oldest_key]
            
            return position_size
            
        except Exception as e:
            return 0.0

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –ú–ï–¢–û–î calculate_kelly_fraction
    @with_error_handling
    def calculate_kelly_fraction(self, trades: List[float]) -> float:
        """
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–æ–ª–∏ f –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ö–µ–ª–ª–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        # üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not hasattr(self, '_kelly_cache'):
            self._kelly_cache = {}
        
        if not trades or len(trades) < 5:
            return 0.1
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
            trades_array = np.array(trades)
            cache_key = f"kelly_{len(trades)}_{np.mean(trades):.6f}_{np.std(trades):.6f}"
            
            if cache_key in self._kelly_cache:
                self._cache_stats['kelly_hits'] += 1
                return self._kelly_cache[cache_key]
            
            self._cache_stats['kelly_misses'] += 1
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ (3 —Å–∏–≥–º–∞)
            if len(trades_array) > 10:
                std = np.std(trades_array)
                mean = np.mean(trades_array)
                if std > 0:
                    trades_array = trades_array[
                        (trades_array >= mean - 3*std) & 
                        (trades_array <= mean + 3*std)
                    ]

            winning_trades = trades_array[trades_array > 0]
            losing_trades = trades_array[trades_array < 0]

            if len(winning_trades) == 0 or len(losing_trades) == 0:
                result = 0.1
                self._kelly_cache[cache_key] = result
                return result

            # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ö–µ–ª–ª–∏
            p = len(winning_trades) / len(trades_array)
            avg_win = np.mean(winning_trades)
            avg_loss = abs(np.mean(losing_trades))

            if avg_loss < 0.001 or avg_win < 0.001:
                result = 0.1
                self._kelly_cache[cache_key] = result
                return result

            win_loss_ratio = avg_win / avg_loss
            kelly_f = p - (1 - p) / win_loss_ratio

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ mean/variance
            mean_return = np.mean(trades_array)
            std_return = np.std(trades_array)
            
            kelly_f_alt = mean_return / (std_return ** 2) if std_return > 0.001 else 0.1

            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            kelly_f = min(kelly_f, kelly_f_alt) if kelly_f_alt > 0 else kelly_f
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –¥—Ä–æ–±–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            kelly_f = max(0.01, min(kelly_f, 0.25))
            fractional_f = kelly_f * 0.25

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._kelly_cache[cache_key] = fractional_f
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
            if len(self._kelly_cache) > 20:
                oldest_key = next(iter(self._kelly_cache))
                del self._kelly_cache[oldest_key]
            
            return fractional_f
            
        except Exception as e:
            return 0.1    
        
    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    @with_error_handling
    def update_risk_parameters(self, **kwargs):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        
        Parameters:
        -----------
        **kwargs
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        valid_params = [
            'stop_loss_atr_multiplier', 'take_profit_atr_multiplier',
            'trailing_stop_enabled', 'trailing_stop_atr_multiplier',
            'break_even_stop', 'break_even_atr_threshold',
            'max_position_risk', 'time_stop_days', 'risk_management_enabled'
        ]
        
        for key, value in kwargs.items():
            if key in valid_params:
                if key == 'risk_management_enabled':
                    self.risk_management_enabled = value
                else:
                    self.risk_params[key] = value

