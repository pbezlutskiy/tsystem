# ===== –°–ï–ö–¶–ò–Ø 3: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
"""
–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from typing import List, Dict, Optional
from utils.analytics import analyze_performance

class ResultsVisualizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.results_history = {}
        self.validation_results = {}
        self.trade_analytics = {}
    
    def add_simulation_result(self, name: str, results: pd.DataFrame, performance: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.results_history[name] = {
            'results': results,
            'performance': performance,
            'timestamp': datetime.now()
        }
    
    def add_validation_result(self, name: str, results: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.validation_results[name] = {
            'results': results,
            'timestamp': datetime.now()
        }
    
    def get_performance_summary(self, result_name: str = None) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞"""
        if not self.results_history:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        if result_name:
            results = {result_name: self.results_history[result_name]}
        else:
            results = self.results_history
        
        summary = "=" * 80 + "\n"
        summary += "–°–í–û–î–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò\n"
        summary += "=" * 80 + "\n"
        
        for name, data in results.items():
            perf = data['performance']
            summary += f"\nüìä {name.upper()}\n"
            summary += "-" * 40 + "\n"
            summary += f"üí∞ –ö–∞–ø–∏—Ç–∞–ª: ${perf['final_capital']:,.2f} | –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {perf['total_return']:+.2f}%\n"
            summary += f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {perf['max_drawdown']:.2f}% | –°—Ä–µ–¥–Ω—è—è: {perf.get('avg_drawdown', 0):.2f}%\n"
            summary += f"üéØ –ö–æ—ç—Ñ. –®–∞—Ä–ø–∞: {perf['sharpe_ratio']:.2f} | –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {perf.get('volatility', 0):.2f}%\n"
            summary += f"‚öñÔ∏è  –°—Ä–µ–¥–Ω–∏–π f: {perf['avg_kelly_f']:.3f} | –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {perf.get('avg_risk', 0):.1f}%\n"
            summary += f"üìè –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: ${perf['avg_position_size']:,.2f}\n"
            
            if 'total_costs' in perf:
                summary += f"üí∏ –ò–∑–¥–µ—Ä–∂–∫–∏: ${perf['total_costs']:.2f} ({perf.get('costs_percentage', 0):.2f}%)\n"
        
        return summary

    def plot_comparison_chart(self, result_names: List[str] = None, figsize=(12, 8)):
        """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        if not self.results_history:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        if result_names is None:
            result_names = list(self.results_history.keys())[:4]
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=figsize)
        colors = ['blue', 'green', 'red', 'orange', 'purple', 'brown']
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
        for i, name in enumerate(result_names):
            if name in self.results_history:
                data = self.results_history[name]['results']
                ax1.plot(data.index, data['capital'], label=name, linewidth=2, 
                        color=colors[i % len(colors)])
        
        ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞', fontsize=12, fontweight='bold')
        ax1.set_xlabel('–í—Ä–µ–º—è')
        ax1.set_ylabel('–ö–∞–ø–∏—Ç–∞–ª ($)')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–æ–∫
        for i, name in enumerate(result_names):
            if name in self.results_history:
                data = self.results_history[name]['results']
                if 'drawdown' in data.columns:
                    ax2.plot(data.index, data['drawdown'] * 100, label=name, 
                            linewidth=2, color=colors[i % len(colors)])
        
        ax2.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–æ–∫', fontsize=12, fontweight='bold')
        ax2.set_xlabel('–í—Ä–µ–º—è')
        ax2.set_ylabel('–ü—Ä–æ—Å–∞–¥–∫–∞ (%)')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
        returns = []
        labels = []
        for name in result_names:
            if name in self.results_history:
                perf = self.results_history[name]['performance']
                returns.append(perf['total_return'])
                labels.append(name)
        
        colors_bars = ['green' if x >= 0 else 'red' for x in returns]
        bars = ax3.bar(labels, returns, color=colors_bars, alpha=0.7)
        
        for bar, value in zip(bars, returns):
            ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + (0.1 if value >=0 else -0.5),
                    f'{value:.1f}%', ha='center', va='bottom' if value >=0 else 'top', 
                    fontweight='bold')
        
        ax3.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏', fontsize=12, fontweight='bold')
        ax3.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax3.tick_params(axis='x', rotation=45)
        ax3.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = ['total_return', 'sharpe_ratio', 'max_drawdown']
        metric_names = ['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\n(%)', '–ö–æ—ç—Ñ.\n–®–∞—Ä–ø–∞', '–ü—Ä–æ—Å–∞–¥–∫–∞\n(%)']
        
        x = np.arange(len(metric_names))
        width = 0.8 / len(result_names)
        
        for i, name in enumerate(result_names):
            if name in self.results_history:
                perf = self.results_history[name]['performance']
                values = [
                    perf.get('total_return', 0),
                    perf.get('sharpe_ratio', 0),
                    -perf.get('max_drawdown', 0)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                ]
                ax4.bar(x + i * width, values, width, label=name, alpha=0.7, 
                       color=colors[i % len(colors)])
        
        ax4.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫', fontsize=12, fontweight='bold')
        ax4.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        ax4.set_xticks(x + width * (len(result_names) - 1) / 2)
        ax4.set_xticklabels(metric_names)
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        return fig

    # –í –º–µ—Ç–æ–¥–µ get_detailed_stats –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Ä–∏—Å–∫–æ–≤:
    def get_detailed_stats(self, result_name: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞"""
        if result_name not in self.results_history:
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç '{result_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        data = self.results_history[result_name]['results']
        perf = self.results_history[result_name]['performance']
        daily_returns = data['capital'].pct_change().dropna() * 100
        
        stats = "=" * 60 + "\n"
        stats += "–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        stats += "=" * 60 + "\n"
        
        stats += f"\nüìà –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:\n"
        stats += f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {perf['total_return']:+.2f}%\n"
        stats += f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {perf['sharpe_ratio']:.2f}\n"
        stats += f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {perf['max_drawdown']:.2f}%\n"
        stats += f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {perf.get('volatility', 0):.2f}%\n"
        
        stats += f"\n‚öñÔ∏è  –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:\n"
        stats += f"   –°—Ä–µ–¥–Ω–∏–π Kelly f: {perf['avg_kelly_f']:.3f}\n"
        stats += f"   –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {perf.get('avg_risk', 0):.1f}%\n"
        stats += f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${perf['avg_position_size']:,.2f}\n"
        stats += f"   –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Ä–∏—Å–∫–∞: {perf.get('risk_adjustments', 0)}\n"
        
        # üÜï –†–ê–ó–î–ï–õ –°–ò–°–¢–ï–ú–´ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
        if perf.get('risk_system_enabled', False):
            stats += f"\nüõ°Ô∏è  –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò:\n"
            stats += f"   –°–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {perf.get('total_trades_with_risk', 0)}\n"
            stats += f"   –°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤: {perf.get('stop_loss_trades', 0)}\n"
            stats += f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤: {perf.get('take_profit_trades', 0)}\n"
            stats += f"   Risk-Reward Ratio: {perf.get('risk_reward_ratio', 0):.2f}\n"
            stats += f"   Win Rate —Å —Ä–∏—Å–∫–∞–º–∏: {perf.get('win_rate_with_stops', 0):.1f}%\n"
        
        stats += f"\nüí∏ –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–´–ï –ò–ó–î–ï–†–ñ–ö–ò:\n"
        if 'total_costs' in perf:
            stats += f"   –û–±—â–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏: ${perf['total_costs']:.2f}\n"
            stats += f"   –ö–æ–º–∏—Å—Å–∏–∏: ${perf.get('total_commission', 0):.2f}\n"
            stats += f"   –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: ${perf.get('total_slippage', 0):.2f}\n"
            stats += f"   –ò–∑–¥–µ—Ä–∂–∫–∏ –≤ %: {perf.get('costs_percentage', 0):.2f}%\n"
        
        stats += f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–•–û–î–ù–û–°–¢–ï–ô:\n"
        stats += f"   –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {daily_returns.mean():.4f}%\n"
        stats += f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {daily_returns.std():.4f}%\n"
        stats += f"   –ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {daily_returns.skew():.3f}\n"
        stats += f"   –≠–∫—Å—Ü–µ—Å—Å: {daily_returns.kurtosis():.3f}\n"
        
        return stats

    def get_available_results(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        return list(self.results_history.keys())
    
    def get_available_validations(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–π"""
        return list(self.validation_results.keys())
    

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –ú–ï–¢–û–î–´ –í –ö–õ–ê–°–° ResultsVisualizer

    def plot_risk_levels(self, result_name: str, figsize=(14, 10)):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∏—Å–∫-–æ—Ä–¥–µ—Ä–æ–≤ –∏ —Ç–æ—á–µ–∫ –≤—ã—Ö–æ–¥–∞
        """
        if result_name not in self.results_history:
            print(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç '{result_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        try:
            data = self.results_history[result_name]['results']
            
            # üÜï –°–û–ó–î–ê–ï–ú –¢–û–õ–¨–ö–û –ù–£–ñ–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ì–†–ê–§–ò–ö–û–í
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ - 4 –≥—Ä–∞—Ñ–∏–∫–∞, –∏–Ω–∞—á–µ - 2
            has_trade_history = 'trade_history' in self.results_history[result_name]
            
            if has_trade_history:
                fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=figsize)
            else:
                fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 8))
            
            fig.suptitle(f'üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: {result_name}', 
                        fontsize=14, fontweight='bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –¶–µ–Ω—ã —Å —Ä–∏—Å–∫-–æ—Ä–¥–µ—Ä–∞–º–∏
            ax1.plot(data.index, data['close'], label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', 
                    linewidth=1, color='black', alpha=0.7)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≥–¥–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏)
            positions = data[data['position_type'] != 0]
            if not positions.empty and 'stop_loss_level' in positions.columns:
                # –°—Ç–æ–ø-–ª–æ—Å—Å—ã
                stops = positions[positions['stop_loss_level'] > 0]
                if not stops.empty:
                    ax1.scatter(stops.index, stops['stop_loss_level'], 
                            color='red', marker='_', s=30, label='–°—Ç–æ–ø-–ª–æ—Å—Å', alpha=0.6)
                
                # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
                takes = positions[positions['take_profit_level'] > 0]
                if not takes.empty:
                    ax1.scatter(takes.index, takes['take_profit_level'], 
                            color='green', marker='_', s=30, label='–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç', alpha=0.6)
            
            # –û—Ç–º–µ—Ç–∫–∏ —Ç–æ—á–µ–∫ –≤—ã—Ö–æ–¥–∞
            exit_points = data[data['exit_reason'] != '']
            exit_colors = {
                'stop_loss': 'red',
                'take_profit': 'green', 
                'trailing_stop': 'orange',
                'time_stop': 'purple',
                'signal_sell': 'blue',
                'signal_buy': 'blue'
            }
            
            for reason, color in exit_colors.items():
                points = exit_points[exit_points['exit_reason'] == reason]
                if not points.empty:
                    ax1.scatter(points.index, points['close'], 
                            color=color, marker='o', s=40, label=f'–í—ã—Ö–æ–¥: {reason}', alpha=0.8)
            
            ax1.set_title('üìà –¶–µ–Ω—ã —Å —Ä–∏—Å–∫-–æ—Ä–¥–µ—Ä–∞–º–∏ –∏ —Ç–æ—á–∫–∞–º–∏ –≤—ã—Ö–æ–¥–∞')
            ax1.set_ylabel('–¶–µ–Ω–∞')
            ax1.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–∞–ø–∏—Ç–∞–ª —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã—Ö–æ–¥–æ–≤
            ax2.plot(data.index, data['capital'], label='–ö–∞–ø–∏—Ç–∞–ª', linewidth=2, color='blue')
            
            for reason, color in exit_colors.items():
                points = exit_points[exit_points['exit_reason'] == reason]
                if not points.empty:
                    ax2.scatter(points.index, points['capital'], 
                            color=color, marker='o', s=50, label=f'–í—ã—Ö–æ–¥: {reason}', alpha=0.8)
            
            ax2.set_title('üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å —Ç–æ—á–∫–∞–º–∏ –≤—ã—Ö–æ–¥–∞')
            ax2.set_ylabel('–ö–∞–ø–∏—Ç–∞–ª ($)')
            ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            ax2.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫)
            if has_trade_history:
                trades = self.results_history[result_name]['trade_history']
                if not trades.empty and 'exit_reason' in trades.columns:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã—Ö–æ–¥–∞
                    pnl_by_reason = trades.groupby('exit_reason')['pnl_percent'].agg(['mean', 'count', 'std'])
                    
                    if not pnl_by_reason.empty:
                        reasons = pnl_by_reason.index
                        means = pnl_by_reason['mean']
                        counts = pnl_by_reason['count']
                        
                        colors = [exit_colors.get(reason, 'gray') for reason in reasons]
                        bars = ax3.bar(reasons, means, color=colors, alpha=0.7, yerr=pnl_by_reason['std'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
                        for bar, count, mean_val in zip(bars, counts, means):
                            height = bar.get_height()
                            ax3.text(bar.get_x() + bar.get_width()/2., height,
                                    f'n={count}\n{mean_val:+.1f}%', 
                                    ha='center', va='bottom' if height >=0 else 'top',
                                    fontsize=8)
                        
                        ax3.set_title('üìä –°—Ä–µ–¥–Ω–∏–π PnL –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤')
                        ax3.set_ylabel('–°—Ä–µ–¥–Ω–∏–π PnL (%)')
                        ax3.tick_params(axis='x', rotation=45)
                        ax3.grid(True, alpha=0.3)
                else:
                    ax3.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö', 
                            ha='center', va='center', transform=ax3.transAxes, fontsize=12)
                    ax3.set_title('üìä –°—Ä–µ–¥–Ω–∏–π PnL –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤')
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∏—Å–∫-–æ—Ä–¥–µ—Ä–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∏ –≤—ã—Ö–æ–¥–∞)
            if has_trade_history and not exit_points.empty and 'pnl_percent' in exit_points.columns:
                # –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                window_size = min(20, len(exit_points))
                if window_size > 5:
                    exit_points_sorted = exit_points.sort_index()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    rolling_profitable = exit_points_sorted['pnl_percent'].rolling(
                        window=window_size).apply(lambda x: (x > 0).sum() / len(x) * 100)
                    
                    ax4.plot(rolling_profitable.index, rolling_profitable, 
                            label='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤', linewidth=2, color='purple')
                    ax4.axhline(y=50, color='red', linestyle='--', alpha=0.7, label='–£—Ä–æ–≤–µ–Ω—å 50%')
                    
                    ax4.set_title('üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–æ–≤ (—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ)')
                    ax4.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ (%)')
                    ax4.legend()
                    ax4.grid(True, alpha=0.3)
                else:
                    ax4.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 
                            ha='center', va='center', transform=ax4.transAxes, fontsize=10)
                    ax4.set_title('üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–æ–≤')
            elif has_trade_history:
                ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—á–∫–∞—Ö –≤—ã—Ö–æ–¥–∞', 
                        ha='center', va='center', transform=ax4.transAxes, fontsize=10)
                ax4.set_title('üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–æ–≤')
            
            plt.tight_layout()
            return fig
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫-–æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return None

    def get_detailed_risk_stats(self, result_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É"""
        if result_name not in self.results_history:
            return f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç '{result_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        try:
            data = self.results_history[result_name]
            performance = data['performance']
            
            stats = "=" * 70 + "\n"
            stats += "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê\n"
            stats += "=" * 70 + "\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–æ–≤
            if performance.get('risk_system_enabled', False):
                stats += "‚úÖ –°–ò–°–¢–ï–ú–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ê–ö–¢–ò–í–ù–ê\n\n"
                
                stats += "üìà –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:\n"
                stats += f"‚Ä¢ –°–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {performance.get('total_trades_with_risk', 0)}\n"
                stats += f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å—ã: {performance.get('stop_loss_trades', 0)}\n"
                stats += f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {performance.get('take_profit_trades', 0)}\n"
                stats += f"‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø—ã: {performance.get('trailing_stop_trades', 0)}\n"
                stats += f"‚Ä¢ Risk-Reward Ratio: {performance.get('risk_reward_ratio', 0):.2f}\n"
                stats += f"‚Ä¢ Win Rate —Å —Ä–∏—Å–∫–∞–º–∏: {performance.get('win_rate_with_stops', 0):.1f}%\n\n"
                
                # –ê–Ω–∞–ª–∏–∑ PnL –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º
                if 'pnl_by_reason' in performance:
                    stats += "üí∞ PnL –ü–û –ü–†–ò–ß–ò–ù–ê–ú –í–´–•–û–î–ê:\n"
                    pnl_data = performance['pnl_by_reason']
                    for reason, stats_data in pnl_data.items():
                        if 'mean' in stats_data:
                            mean_pnl = stats_data['mean']
                            count = stats_data.get('count', 0)
                            color = "üü¢" if mean_pnl > 0 else "üî¥"
                            stats += f"‚Ä¢ {color} {reason}: {mean_pnl:+.2f}% (n={count})\n"
                    stats += "\n"
                
                # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
                stats += "üõë –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–¢–û–ü-–õ–û–°–°–û–í:\n"
                stats += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: {performance.get('avg_stop_loss_pnl', 0):+.2f}%\n"
                stats += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {performance.get('stop_loss_efficiency', 0):.1f}%\n\n"
                
            else:
                stats += "‚ùå –°–ò–°–¢–ï–ú–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ù–ï –ê–ö–¢–ò–í–ù–ê\n"
                stats += "–°–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º\n\n"
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–∑ trade_history
            if 'trade_history' in data:
                trades = data['trade_history']
                if not trades.empty:
                    risk_trades = trades[trades['exit_reason'].isin([
                        'stop_loss', 'take_profit', 'trailing_stop', 'time_stop'
                    ])]
                    
                    if not risk_trades.empty:
                        stats += "üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:\n"
                        stats += f"‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}\n"
                        stats += f"‚Ä¢ –°–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {len(risk_trades)}\n"
                        stats += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {risk_trades['duration'].mean():.1f} –¥–Ω–µ–π\n"
                        stats += f"‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {risk_trades['duration'].max():.1f} –¥–Ω–µ–π\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            stats += "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            win_rate = performance.get('win_rate_with_stops', 0)
            risk_reward = performance.get('risk_reward_ratio', 0)
            
            if win_rate > 60 and risk_reward > 1.5:
                stats += "‚Ä¢ üéâ –û—Ç–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.\n"
            elif win_rate > 50 and risk_reward > 1.0:
                stats += "‚Ä¢ üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ú–æ–∂–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n"
            elif win_rate < 40 or risk_reward < 0.8:
                stats += "‚Ä¢ ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.\n"
            else:
                stats += "‚Ä¢ üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–Ω–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
            
            return stats
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    def get_risk_efficiency_report(self, result_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        if result_name not in self.results_history:
            return f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç '{result_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        try:
            data = self.results_history[result_name]
            performance = data['performance']
            
            report = "üéØ –û–¢–ß–ï–¢ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê\n"
            report += "=" * 50 + "\n\n"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if performance.get('risk_system_enabled', False):
                report += "‚úÖ –°–ò–°–¢–ï–ú–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ê–ö–¢–ò–í–ù–ê\n\n"
                
                report += "üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
                report += f"‚Ä¢ –°–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {performance.get('total_trades_with_risk', 0)}\n"
                report += f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å—ã: {performance.get('stop_loss_trades', 0)}\n"
                report += f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {performance.get('take_profit_trades', 0)}\n"
                report += f"‚Ä¢ Risk-Reward Ratio: {performance.get('risk_reward_ratio', 0):.2f}\n"
                report += f"‚Ä¢ Win Rate: {performance.get('win_rate_with_stops', 0):.1f}%\n\n"
                
                # –ê–Ω–∞–ª–∏–∑ PnL –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤
                if 'pnl_by_reason' in performance:
                    report += "üí∞ PnL –ü–û –¢–ò–ü–ê–ú –í–´–•–û–î–û–í:\n"
                    pnl_data = performance['pnl_by_reason']
                    for reason, stats in pnl_data.items():
                        if 'mean' in stats:
                            mean_pnl = stats['mean']
                            count = stats.get('count', 0)
                            emoji = "üü¢" if mean_pnl > 0 else "üî¥"
                            report += f"‚Ä¢ {emoji} {reason}: {mean_pnl:+.2f}% (n={count})\n"
                    report += "\n"
                
                # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
                avg_stop_pnl = performance.get('avg_stop_loss_pnl', 0)
                stop_efficiency = performance.get('stop_loss_efficiency', 0)
                report += f"üõë –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–¢–û–ü-–õ–û–°–°–û–í:\n"
                report += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: {avg_stop_pnl:+.2f}%\n"
                report += f"‚Ä¢ –î–æ–ª—è –æ—Ç –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫: {stop_efficiency:.1f}%\n\n"
                
            else:
                report += "‚ùå –°–ò–°–¢–ï–ú–ê –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ù–ï –ê–ö–¢–ò–í–ù–ê\n"
                report += "–°–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º\n\n"
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
            if 'trade_history' in data:
                trades = data['trade_history']
                if not trades.empty:
                    risk_trades = trades[trades['exit_reason'].isin(['stop_loss', 'take_profit', 'trailing_stop'])]
                    
                    if not risk_trades.empty:
                        report += "üìà –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
                        report += f"‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}\n"
                        report += f"‚Ä¢ –°–¥–µ–ª–æ–∫ —Å —Ä–∏—Å–∫–∞–º–∏: {len(risk_trades)}\n"
                        report += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {risk_trades['duration'].mean():.1f} –¥–Ω–µ–π\n"
                        report += f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {risk_trades['duration'].max():.1f} –¥–Ω–µ–π\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            report += "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            win_rate = performance.get('win_rate_with_stops', 0)
            risk_reward = performance.get('risk_reward_ratio', 0)
            
            if win_rate > 60 and risk_reward > 1.5:
                report += "‚Ä¢ üéâ –û—Ç–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.\n"
            elif win_rate > 50 and risk_reward > 1.0:
                report += "‚Ä¢ üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ú–æ–∂–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n"
            elif win_rate < 40 or risk_reward < 0.8:
                report += "‚Ä¢ ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.\n"
                report += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª–∏ ATR –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤\n"
            else:
                report += "‚Ä¢ üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–Ω–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
            
            return report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}"    
        
