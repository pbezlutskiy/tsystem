# find_tbank_config_usage.py
import os
import re

def find_tbank_config_usage(root_dir='.'):
    """–ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç tbank_config"""
    
    usage_files = []
    
    for root, dirs, files in os.walk(root_dir):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        if 'venv' in root or '__pycache__' in root or '.git' in root:
            continue
            
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                    # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã tbank_config
                    patterns = [
                        r'from\s+tbank_config',
                        r'import\s+tbank_config',
                        r'TBankConfig',
                        r'tbank_config\.'
                    ]
                    
                    for pattern in patterns:
                        if re.search(pattern, content):
                            usage_files.append({
                                'file': file_path,
                                'pattern': pattern,
                                'content': content
                            })
                            break  # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
                            
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    
    return usage_files

def analyze_usage(usage_files):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tbank_config"""
    
    print("üìä –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø TBANK_CONFIG:")
    print("=" * 50)
    
    for usage in usage_files:
        print(f"\nüìÅ –§–∞–π–ª: {usage['file']}")
        print(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω: {usage['pattern']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        lines = usage['content'].split('\n')
        for i, line in enumerate(lines, 1):
            if 'tbank_config' in line.lower() or 'TBankConfig' in line:
                print(f"   –°—Ç—Ä–æ–∫–∞ {i}: {line.strip()}")
        
        print("-" * 30)

if __name__ == "__main__":
    print("üîç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π tbank_config...")
    
    usage_files = find_tbank_config_usage()
    
    if usage_files:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(usage_files)} —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tbank_config:")
        analyze_usage(usage_files)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        with open('tbank_config_usage_report.txt', 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ TBANK_CONFIG\n")
            f.write("=" * 50 + "\n")
            for usage in usage_files:
                f.write(f"\n–§–∞–π–ª: {usage['file']}\n")
                f.write(f"–ü–∞—Ç—Ç–µ—Ä–Ω: {usage['pattern']}\n")
                f.write("-" * 30 + "\n")
                
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: tbank_config_usage_report.txt")
    else:
        print("‚úÖ –§–∞–π–ª—ã —Å tbank_config –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")